[{"title":"C语言手写Httpd网站服务器","url":"/2024/09/26/C%E8%AF%AD%E8%A8%80%E6%89%8B%E5%86%99Httpd%E7%BD%91%E7%AB%99%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"<hr>\n<h2 id=\"执行WEB服务前的准备工作\">执行WEB服务前的准备工作</h2>\n<h3 id=\"创建项目\">创建项目</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//httpd默认的端口是80，这里指定了8000端口，也可以使用其它端口</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port = <span class=\"number\">8000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化网络，并使用指定端口来创建服务端的套接字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> server_sock = startup(&amp;port);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;httpd running on port %d\\n&quot;</span>, port);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"网络通信初始化\">网络通信初始化</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网络通信需要包含的头文件、需要加载的库文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment (lib, <span class=\"string\">&quot;WS2_32.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    WSADATA wsaData; <span class=\"comment\">// 网络通信相关的版本等信息</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = WSAStartup( <span class=\"comment\">// WSAStartup 网络通信初始化，</span></span><br><span class=\"line\">        MAKEWORD(<span class=\"number\">1</span>, <span class=\"number\">1</span>),   <span class=\"comment\">// 指定使用Windows Sockets规范的1.1版本</span></span><br><span class=\"line\">        &amp;wsaData);        <span class=\"comment\">// 存储初始化后的版本等信息结果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建套接字\">创建套接字</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">error_die</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* sc)</span> &#123;</span><br><span class=\"line\">    perror(sc); <span class=\"comment\">//打印错误原因</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> server_socket = socket(PF_INET, <span class=\"comment\">//套接字的类型（网络套接字、文件套接字，此处是前者）</span></span><br><span class=\"line\">        SOCK_STREAM,  <span class=\"comment\">//数据包的类型（数据流、数据报，此处是前者）               </span></span><br><span class=\"line\">        IPPROTO_TCP); <span class=\"comment\">//具体协议</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server_socket == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">//打印错误提示，并结束程序</span></span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;socket&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置套接字属性–端口可复用\">设置套接字属性–端口可复用</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置端口可复用（端口复用）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> opt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ret = setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, (<span class=\"type\">const</span> <span class=\"type\">char</span>*)&amp;opt, <span class=\"keyword\">sizeof</span>(opt));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;setsockopt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绑定套接字和网络地址\">绑定套接字和网络地址</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置服务器的网络地址</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(*port);</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绑定套接字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bind(server_socket, (<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;[bind]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取动态端口\">获取动态端口</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 动态分配端口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*port == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> namelen = <span class=\"keyword\">sizeof</span>(server_addr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getsockname(server_socket, (<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr, &amp;namelen) &lt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            error_die(<span class=\"string\">&quot;getsockname&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *port = ntohs(server_addr.sin_port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server_socket;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建监听队列\">创建监听队列</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建监听队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listen(server_socket, <span class=\"number\">5</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;listen&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server_socket;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["c","服务器"]},{"title":"Java 综合实战（一）","url":"/2024/09/24/Java%20%E7%BB%BC%E5%90%88%E5%AE%9E%E6%88%98/","content":"<hr>\n<h2 id=\"Java-综合实战（一）\">Java 综合实战（一）</h2>\n<h3 id=\"健康计算器\">健康计算器</h3>\n<p><strong>需求：开发一个简单的健康计算器应用程序，它可以接受用户的输入（如年龄、性别、体重、身高），并计算出用户的 BMI（身体质量指数）和 BMR（基础代谢率）。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的身高：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> height=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的体重：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> weight=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的性别（男/女）：&quot;</span>);</span><br><span class=\"line\">        String sex=sc.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的年龄：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> age=sc.nextInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> bmi=calcBMI(height,weight);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;您的BMI值为：&quot;</span>+bmi);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> bmr=calcBMR(height,weight,age,sex);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;您的BMR值为：&quot;</span>+bmr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calcBMI</span><span class=\"params\">(<span class=\"type\">double</span> height,<span class=\"type\">double</span> weight)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> weight/(height*height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calcBMR</span><span class=\"params\">(<span class=\"type\">double</span> height,<span class=\"type\">double</span> weight,<span class=\"type\">int</span> age,String sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> bmr=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sex.equals(<span class=\"string\">&quot;男&quot;</span>))&#123;</span><br><span class=\"line\">            bmr=<span class=\"number\">88.362</span>+<span class=\"number\">13.397</span>*weight+<span class=\"number\">4.799</span>*height-<span class=\"number\">5.677</span>*age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            bmr=<span class=\"number\">447.593</span>+<span class=\"number\">9.247</span>*weight+<span class=\"number\">3.098</span>*height-<span class=\"number\">4.330</span>*age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bmr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单计算器\">简单计算器</h3>\n<p><strong>需求：设计一个可以执行基本数学运算（加、减、乘、除）的计算器程序。</strong><br>\n<strong>功能描述：用户输入两个数字、一个运算符（+、-、*、/）。根据所选运算符执行相应的数学运算，显示运算结果。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入第一个数字：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> num1=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入第二个数字：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> num2=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入运算符（+、-、*、/）：&quot;</span>);</span><br><span class=\"line\">        String operator=sc.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> result=calculate(num1,num2,operator);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;计算结果为：&quot;</span>+result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calculate</span><span class=\"params\">(<span class=\"type\">double</span> num1,<span class=\"type\">double</span> num2,String operator)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operator)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                result=num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                result=num1-num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                result=num1*num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                result=num1/num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;输入的运算符有误！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"猜数字小游戏\">猜数字小游戏</h3>\n<p><strong>需求：随机生成一个1-100之间的数据，提示用户猜测，猜大提示过大，猜小提示过小，直到猜中结束游戏。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        guessNumber();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">guessNumber</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*方法一*/</span></span><br><span class=\"line\">        <span class=\"comment\">//Math.random()返回[0,1)之间的随机小数</span></span><br><span class=\"line\">        <span class=\"comment\">//(int)(Math.random()*100)==&gt;[0,100)的整数==&gt;[0,99]+1==&gt;[1,100]</span></span><br><span class=\"line\">        <span class=\"comment\">//int number=(int)(Math.random()*100)+1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*方法二*/</span></span><br><span class=\"line\">        Random r=<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> number=r.nextInt(<span class=\"number\">100</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;请输入一个1~100之间的数字：&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> guess=sc.nextInt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(guess&lt;number)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜小了，再试试吧！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(guess&gt;number)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜大了，再试试吧！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;恭喜你猜对了！&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发一个验证码\">开发一个验证码</h3>\n<p><strong>需求：开发一个程序，可以生成指定位数的验证码，每位可以是数字，大小写字母。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(getCode(<span class=\"number\">6</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getCode</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        String code=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> type=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">3</span>); <span class=\"comment\">//数字0/大写1/小写2</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"type\">int</span> num=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">10</span>);</span><br><span class=\"line\">                    code+=num;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"type\">int</span> num1=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">26</span>)+<span class=\"number\">65</span>;</span><br><span class=\"line\">                    code+=(<span class=\"type\">char</span>)num1;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"type\">int</span> num2=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">26</span>)+<span class=\"number\">97</span>;</span><br><span class=\"line\">                    code+=(<span class=\"type\">char</span>)num2;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"找素数\">找素数</h3>\n<p><strong>需求：输出101-200之间的所有素数以及总个数。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//目标：找出101-200之间的全部素数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">101</span>;i&lt;=<span class=\"number\">200</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isPrime(i))&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;素数的个数为：&quot;</span>+count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPrime</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i*i&lt;=num;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"斗地主游戏\">斗地主游戏</h3>\n<p><strong>需求：开发一个简易版的斗地主游戏，要求只完成做牌（存储54张牌）、洗牌。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        String[] poker=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">54</span>];</span><br><span class=\"line\">        String[] colors=&#123;<span class=\"string\">&quot;♠&quot;</span>,<span class=\"string\">&quot;♥&quot;</span>,<span class=\"string\">&quot;♣&quot;</span>,<span class=\"string\">&quot;♦&quot;</span>&#125;;</span><br><span class=\"line\">        String[] nums=&#123;<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>,<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"string\">&quot;8&quot;</span>,<span class=\"string\">&quot;9&quot;</span>,<span class=\"string\">&quot;10&quot;</span>,<span class=\"string\">&quot;J&quot;</span>,<span class=\"string\">&quot;Q&quot;</span>,<span class=\"string\">&quot;K&quot;</span>,<span class=\"string\">&quot;A&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;colors.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">                poker[index++]=colors[i]+nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        poker[index++]=<span class=\"string\">&quot;Big Joker&quot;</span>;</span><br><span class=\"line\">        poker[index++]=<span class=\"string\">&quot;Small Joker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//打印牌</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;poker.length;i++)&#123;</span><br><span class=\"line\">            System.out.print(poker[i]+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//洗牌</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;poker.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=(<span class=\"type\">int</span>)(Math.random()*poker.length);</span><br><span class=\"line\">            String temp=poker[i];</span><br><span class=\"line\">            poker[i]=poker[j];</span><br><span class=\"line\">            poker[j]=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;洗牌后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;poker.length;i++)&#123;</span><br><span class=\"line\">            System.out.print(poker[i]+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"石头迷阵游戏\">石头迷阵游戏</h3>\n<p><strong>需求：只需完成数据初始化</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        start(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span>[][] arr=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> count=<span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">               arr[i][j]=count++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       print(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//打乱二维数组中的元素顺序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x=(<span class=\"type\">int</span>)(Math.random()*arr.length);</span><br><span class=\"line\">                <span class=\"type\">int</span> y=(<span class=\"type\">int</span>)(Math.random()*arr[i].length);</span><br><span class=\"line\">                <span class=\"type\">int</span> temp=arr[i][j];</span><br><span class=\"line\">                arr[i][j]=arr[x][y];</span><br><span class=\"line\">                arr[x][y]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打乱后：&quot;</span>);</span><br><span class=\"line\">        print(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(<span class=\"type\">int</span>[][] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class=\"line\">                System.out.print(arr[i][j]+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["Java"]},{"title":"C语言手写植物大战僵尸","url":"/2024/09/26/C%E8%AF%AD%E8%A8%80%E6%89%8B%E5%86%99%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/","content":"<hr>\n<h2 id=\"C语言手写植物大战僵尸\">C语言手写植物大战僵尸</h2>\n<h3 id=\"创建主场景\">创建主场景</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;graphics.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIN_WIDTH 900</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIN_HEIGHT 600</span></span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE imgBg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//游戏初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tloadimage(&amp;imgBg, <span class=\"string\">&quot;res/bg.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tinitgraph(WIN_WIDTH, WIN_HEIGHT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更新窗口</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tputimage(<span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;imgBg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//游戏初始化</span></span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//更新窗口</span></span><br><span class=\"line\">\tupdateWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物卡牌\">实现植物卡牌</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#define ZHI_WU_CUNT 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span> WAN_DOU, XIANG_RI_KUI, ZHI_WU_COUNT &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE imgBar;</span><br><span class=\"line\">IMAGE imgCards[ZHI_WU_COUNT];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tloadimage(&amp;imgBar, <span class=\"string\">&quot;res/bar.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化植物卡牌</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ZHI_WU_COUNT; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成植物卡牌的文件名</span></span><br><span class=\"line\">\t\tsprintf_s(name, <span class=\"keyword\">sizeof</span>(name), <span class=\"string\">&quot;res/Cards/card_%d.png&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tloadimage(&amp;imgCards[i], name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//putimage(250, 0, &amp;imgBar); //有黑边</span></span><br><span class=\"line\">\tputimagePNG(<span class=\"number\">250</span>, <span class=\"number\">0</span>, &amp;imgBar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ZHI_WU_COUNT; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x = <span class=\"number\">338</span> + i * <span class=\"number\">65</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t\tputimage(x, y, &amp;imgCards[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物的选择和拖动\">实现植物的选择和拖动</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">IMAGE* imgZhiWu[ZHI_WU_COUNT][<span class=\"number\">20</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> curX, curY; <span class=\"comment\">//当前选中的植物，在移动过程中的位置</span></span><br><span class=\"line\"><span class=\"type\">int</span> curZhiWu; <span class=\"comment\">//0:没有选中，1:选择了第一种植物 etc.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">fileExist</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span> &#123;</span><br><span class=\"line\">\tFILE* fp = fopen(name, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfclose(fp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(imgZhiWu, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(imgZhiWu));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化植物卡牌</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ZHI_WU_COUNT; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; j++) &#123;</span><br><span class=\"line\">\t\t\tsprintf_s(name, <span class=\"keyword\">sizeof</span>(name), <span class=\"string\">&quot;res/zhiwu/%d/%d.png&quot;</span>, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//先判断这个文件是否存在</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (fileExist(name)) &#123;</span><br><span class=\"line\">\t\t\t\timgZhiWu[i][j] = new IMAGE;</span><br><span class=\"line\">\t\t\t\tloadimage(imgZhiWu[i][j], name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcurZhiWu = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//创建游戏的图形窗口</span></span><br><span class=\"line\">\tinitgraph(WIN_WIDTH, WIN_HEIGHT, <span class=\"number\">1</span>); <span class=\"comment\">//加一个参数1，保留后台界面，方便调试</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBeginBatchDraw(); <span class=\"comment\">//开始缓冲（先打印到内存中）</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//渲染 拖动过程中的植物</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (curZhiWu &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tIMAGE* img = imgZhiWu[curZhiWu - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tputimagePNG(curX - img-&gt;getwidth() / <span class=\"number\">2</span>, curY - img-&gt;getheight() / <span class=\"number\">2</span>, img);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tEndBatchDraw(); <span class=\"comment\">//结束双缓冲（再一次性打印到窗口）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">userClick</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tExMessage msg;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> status = <span class=\"number\">0</span>;<span class=\"comment\">//状态变量（先点击再拖动）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (msg.message == WM_LBUTTONDOWN) &#123; <span class=\"comment\">//左击按下</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.x &gt; <span class=\"number\">338</span> &amp;&amp; msg.x &lt; <span class=\"number\">338</span> + <span class=\"number\">65</span> * ZHI_WU_COUNT &amp;&amp; msg.y &lt; <span class=\"number\">96</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> index = (msg.x - <span class=\"number\">338</span>) / <span class=\"number\">65</span>; <span class=\"comment\">//选择卡牌序号</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, index);</span><br><span class=\"line\">\t\t\t\tstatus = <span class=\"number\">1</span>; <span class=\"comment\">//可以拖动</span></span><br><span class=\"line\">\t\t\t\tcurZhiWu = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_MOUSEMOVE &amp;&amp; status == <span class=\"number\">1</span>) &#123; <span class=\"comment\">//鼠标移动</span></span><br><span class=\"line\">\t\t\tcurX = msg.x;</span><br><span class=\"line\">\t\t\tcurY = msg.y;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_LBUTTONUP) &#123; <span class=\"comment\">//左键抬起</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">void</span>) &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tupdateWindow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物的种植\">实现植物的种植</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zhiwu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> type;\t\t<span class=\"comment\">//0:没有选中，1:第一种植物\tetc.\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameIndex; <span class=\"comment\">//序列帧的序号</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zhiwu</span> <span class=\"title\">map</span>[3][9];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(<span class=\"built_in\">map</span>, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">map</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j].type &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> x = <span class=\"number\">256</span> + j * <span class=\"number\">81</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> y = <span class=\"number\">179</span> + i * <span class=\"number\">102</span> + <span class=\"number\">14</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> zhiWuType = <span class=\"built_in\">map</span>[i][j].type - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> index = <span class=\"built_in\">map</span>[i][j].frameIndex;</span><br><span class=\"line\">\t\t\t\tputimagePNG(x, y, imgZhiWu[zhiWuType][index]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">userClick</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_LBUTTONUP) &#123; <span class=\"comment\">//左键抬起</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.x &gt; <span class=\"number\">256</span> &amp;&amp; msg.y &gt; <span class=\"number\">179</span> &amp;&amp; msg.y &lt; <span class=\"number\">489</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> row = (msg.y - <span class=\"number\">179</span>) / <span class=\"number\">102</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> col = (msg.x - <span class=\"number\">256</span>) / <span class=\"number\">81</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//printf(&quot;%d, %d\\n&quot;, row, col);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[row][col].type == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">map</span>[row][col].type = curZhiWu;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">map</span>[row][col].frameIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurZhiWu = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物的摇摆\">实现植物的摇摆</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新游戏相关数据</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateGame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j].type &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">map</span>[i][j].frameIndex++;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> zhiWuType = <span class=\"built_in\">map</span>[i][j].type - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> index = <span class=\"built_in\">map</span>[i][j].frameIndex;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (imgZhiWu[zhiWuType][index] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">map</span>[i][j].frameIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tupdateWindow();</span><br><span class=\"line\">\t\tupdateGame(); <span class=\"comment\">//更新游戏相关数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSleep(<span class=\"number\">10</span>);<span class=\"comment\">//帧等待</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化游戏循环和游戏渲染循序\">优化游戏循环和游戏渲染循序</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBeginBatchDraw(); <span class=\"comment\">//开始缓冲</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//渲染 拖动过程中的植物（放到了最后）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (curZhiWu &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tIMAGE* img = imgZhiWu[curZhiWu - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tputimagePNG(curX - img-&gt;getwidth() / <span class=\"number\">2</span>, curY - img-&gt;getheight() / <span class=\"number\">2</span>, img);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tEndBatchDraw(); <span class=\"comment\">//结束双缓冲</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\">\t<span class=\"type\">int</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\">\t\ttimer += getDelay();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\ttimer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\tupdateWindow();</span><br><span class=\"line\">\t\t\tupdateGame();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"制作启动菜单\">制作启动菜单</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">startUI</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//启动菜单</span></span><br><span class=\"line\">\tIMAGE imgBg,imgMenu1,imgMenu2;</span><br><span class=\"line\">\tloadimage(&amp;imgBg, <span class=\"string\">&quot;res/menu.png&quot;</span>);</span><br><span class=\"line\">\tloadimage(&amp;imgMenu1, <span class=\"string\">&quot;res/menu1.png&quot;</span>);</span><br><span class=\"line\">\tloadimage(&amp;imgMenu2, <span class=\"string\">&quot;res/menu2.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tBeginBatchDraw();</span><br><span class=\"line\">\t\tputimage(<span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;imgBg);</span><br><span class=\"line\">\t\tputimagePNG(<span class=\"number\">474</span>, <span class=\"number\">75</span>, flag ? &amp;imgMenu2: &amp;imgMenu1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tExMessage msg;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.message == WM_LBUTTONDOWN&amp;&amp;</span><br><span class=\"line\">\t\t\t\t\tmsg.x&gt;<span class=\"number\">474</span>&amp;&amp;msg.x&lt;<span class=\"number\">474</span>+<span class=\"number\">300</span>&amp;&amp;</span><br><span class=\"line\">\t\t\t\t\tmsg.y&gt;<span class=\"number\">75</span>&amp;&amp;msg.y&lt;<span class=\"number\">75</span>+<span class=\"number\">140</span>)&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//EndBatchDraw();</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_LBUTTONUP&amp;&amp;flag) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tEndBatchDraw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\"></span><br><span class=\"line\">\tstartUI();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\">\t\ttimer += getDelay();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\ttimer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\tupdateWindow();</span><br><span class=\"line\">\t\t\tupdateGame();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建随机阳光\">创建随机阳光</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sunshineBall</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y; <span class=\"comment\">//阳光球在飘落过程中的坐标位置（x不变）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameIndex; <span class=\"comment\">//当前显示的图片帧的序号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> destY; <span class=\"comment\">//飘落的目标位置的y坐标</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> used; <span class=\"comment\">//是否在使用</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//阳光池</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sunshineBall</span> <span class=\"title\">balls</span>[10];</span></span><br><span class=\"line\">IMAGE imgSunshineBall[<span class=\"number\">29</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(balls, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(balls));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">29</span>; i++) &#123;</span><br><span class=\"line\">\t\tsprintf_s(name, <span class=\"keyword\">sizeof</span>(name), <span class=\"string\">&quot;res/sunshine/%d.png&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tloadimage(&amp;imgSunshineBall[i], name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//配置随机种子</span></span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">creatSunshine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> fre = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= fre) &#123; <span class=\"comment\">//每fre帧创建一个阳光，fre随机改变</span></span><br><span class=\"line\">\t\tfre = <span class=\"number\">200</span> + rand() % <span class=\"number\">200</span>;</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//从阳光池中取一个可以使用的</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ballMax = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ballMax &amp;&amp; balls[i].used; i++);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= ballMax) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tballs[i].used = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tballs[i].frameIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tballs[i].x = <span class=\"number\">260</span> + rand() % (<span class=\"number\">900</span> - <span class=\"number\">260</span>);</span><br><span class=\"line\">\t\tballs[i].y = <span class=\"number\">60</span>;</span><br><span class=\"line\">\t\tballs[i].destY = <span class=\"number\">200</span> + (rand() % <span class=\"number\">4</span>) * <span class=\"number\">90</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateGame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tcreatSunshine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示随机阳光\">显示随机阳光</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sunshineBall</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y; <span class=\"comment\">//阳光球在飘落过程中的坐标位置（x不变）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameIndex; <span class=\"comment\">//当前显示的图片帧的序号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> destY; <span class=\"comment\">//飘落的目标位置的y坐标</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> used; <span class=\"comment\">//是否在使用</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> timer; <span class=\"comment\">//计时器</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ballMax = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ballMax; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balls[i].used) &#123;</span><br><span class=\"line\">\t\t\tIMAGE* img = &amp;imgSunshineBall[balls[i].frameIndex];</span><br><span class=\"line\">\t\t\tputimagePNG(balls[i].x, balls[i].y, img);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">creatSunshine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= fre) &#123;</span><br><span class=\"line\">\t\tballs[i].timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateSunshine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ballMax = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ballMax; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balls[i].used) &#123;</span><br><span class=\"line\">\t\t\tballs[i].frameIndex = (balls[i].frameIndex + <span class=\"number\">1</span>) % <span class=\"number\">29</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (balls[i].timer == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//未到达地面</span></span><br><span class=\"line\">\t\t\t\tballs[i].y += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (balls[i].y &gt;= balls[i].destY) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//balls[i].used = false;</span></span><br><span class=\"line\">\t\t\t\tballs[i].timer++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (balls[i].timer &gt; <span class=\"number\">100</span>) &#123; <span class=\"comment\">//掉到地面100帧之后</span></span><br><span class=\"line\">\t\t\t\t\tballs[i].used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateGame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tcreatSunshine(); <span class=\"comment\">//创建阳光</span></span><br><span class=\"line\">\tupdateSunshine(); <span class=\"comment\">//更新阳光的状态</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"收集阳光、显示阳光值\">收集阳光、显示阳光值</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;mmsystem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;winmm.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> sunshine; <span class=\"comment\">//总阳光值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tsunshine = <span class=\"number\">150</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置字体</span></span><br><span class=\"line\">\tLOGFONT f;</span><br><span class=\"line\">\tgettextstyle(&amp;f);                     <span class=\"comment\">// 获取当前字体设置</span></span><br><span class=\"line\">\tf.lfHeight = <span class=\"number\">30</span>;                      <span class=\"comment\">// 设置字体高度为 48</span></span><br><span class=\"line\">\tf.lfWidth = <span class=\"number\">15</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(f.lfFaceName, <span class=\"string\">&quot;Segoe UI Black&quot;</span>); </span><br><span class=\"line\">\tf.lfQuality = ANTIALIASED_QUALITY;    <span class=\"comment\">// 设置输出效果为抗锯齿  </span></span><br><span class=\"line\">\tsettextstyle(&amp;f);                     <span class=\"comment\">// 设置字体样式</span></span><br><span class=\"line\">\tsetbkmode(TRANSPARENT);\t\t\t\t  <span class=\"comment\">//背景模式透明</span></span><br><span class=\"line\">\tsetcolor(BLACK);\t\t\t\t\t  <span class=\"comment\">//字体颜色</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> scoreText[<span class=\"number\">8</span>];</span><br><span class=\"line\">\tsprintf_s(scoreText, <span class=\"keyword\">sizeof</span>(scoreText), <span class=\"string\">&quot;%d&quot;</span>, sunshine);</span><br><span class=\"line\">\touttextxy(<span class=\"number\">276</span>, <span class=\"number\">67</span>, scoreText); <span class=\"comment\">//在指定位置输出文本--分数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">collectSunshine</span><span class=\"params\">(ExMessage* msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"type\">int</span> w = imgSunshineBall[<span class=\"number\">0</span>].getwidth(); <span class=\"comment\">//阳光球宽度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> h = imgSunshineBall[<span class=\"number\">0</span>].getheight();<span class=\"comment\">//阳光球高度</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balls[i].used) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x = balls[i].x;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> y = balls[i].y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg-&gt;x &gt; x &amp;&amp; msg-&gt;x &lt; x + w &amp;&amp; msg-&gt;y &gt; y &amp;&amp; msg-&gt;y &lt; y + h) &#123;</span><br><span class=\"line\">\t\t\t\tballs[i].used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\tsunshine += <span class=\"number\">25</span>;</span><br><span class=\"line\">\t\t\t\tmciSendString(<span class=\"string\">&quot;play res/sunshine.mp3&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//添加音效</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">userClick</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tExMessage msg;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (msg.message == WM_LBUTTONDOWN) &#123; <span class=\"comment\">//左击按下</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.x &gt; <span class=\"number\">338</span> &amp;&amp; msg.x &lt; <span class=\"number\">338</span> + <span class=\"number\">65</span> * ZHI_WU_COUNT &amp;&amp; msg.y &lt; <span class=\"number\">96</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tcollectSunshine(&amp;msg);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["c","PvZ"]},{"title":"Markdown 语法","url":"/2024/09/09/Markdown%E8%AF%AD%E6%B3%95/","content":"<h2 id=\"Markdown-标题\">Markdown 标题</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p> <strong>或者在文本下方添加任意数量的 = 或 - 分别用于表示一级标题或二级标题</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">一级标题</span></span><br><span class=\"line\"><span class=\"section\">=========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">二级标题</span></span><br><span class=\"line\"><span class=\"section\">---------</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-字体\">Markdown 字体</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文字*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文字_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**粗体文字**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">__粗体文字__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文字*</span>**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文字_</span>__</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-引用\">Markdown 引用</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;这是引用的内容</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;这是引用的内容</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-分割线\">Markdown 分割线</h2>\n<p> <strong>三个或者三个以上的 - 或者 * 或者 _ 都可以</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">****</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">____</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-下划线\">Markdown 下划线</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>带下划线文本<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span>   </span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-删除线\">Markdown 删除线</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">~~tencent.com~~</span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-图片\">Markdown 图片</h2>\n<h3 id=\"插入互联网上图片\">插入互联网上图片</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片描述</span>](<span class=\"link\">图片链接 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图片描述就是显示在图片下面的文字，相当于对图片内容的解释。<br>\n图片title是图片的标题，当鼠标移到图片上时显示的内容。<br>\n注意：title可加可不加，图片描述可写可不写。</p>\n</blockquote>\n<h3 id=\"插入本地图片\">插入本地图片</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片描述</span>](<span class=\"link\">图片本地路径 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图片描述就是显示在图片下面的文字，相当于对图片内容的解释。<br>\n图片title是图片的标题，当鼠标移到图片上时显示的内容。<br>\n注意：title可加可不加，图片描述可写可不写。</p>\n</blockquote>\n<h2 id=\"Markdown-超链接\">Markdown 超链接</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">超链接名</span>](<span class=\"link\">超链接地址 &quot;超链接title&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p> <strong>注：title可加可不加</strong></p>\n<h2 id=\"Markdown-列表\">Markdown 列表</h2>\n<h3 id=\"无序列表\">无序列表</h3>\n<p> <strong>无序列表用 - + * 任何一种都可以</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h3 id=\"有序列表\">有序列表</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套列表\">嵌套列表</h3>\n<p> <strong>上一级和下一级之间敲一个Tab键即可</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-表格\">Markdown 表格</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">|表头|表头|表头|</span><br><span class=\"line\">|---|:--:|---:|</span><br><span class=\"line\">|内容|内容|内容|</span><br><span class=\"line\">|内容|内容|内容|</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二行分割表头和内容<br>\n-有一个就行，为了对齐，多加了几个<br>\n文字默认居左<br>\n-两边加：表示文字居中<br>\n-右边加：表示文字居右</p>\n</blockquote>\n<h2 id=\"Markdown-代码\">Markdown 代码</h2>\n<h3 id=\"单行代码\">单行代码</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`hello world`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"代码块\">代码块</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"code\">```)语言</span></span><br><span class=\"line\"><span class=\"code\">  代码内容</span></span><br><span class=\"line\"><span class=\"code\">(```</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-流程图\">Markdown 流程图</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"code\">```)flow</span></span><br><span class=\"line\"><span class=\"code\">st=&gt;start: 开始</span></span><br><span class=\"line\"><span class=\"code\">op=&gt;operation: My Operation</span></span><br><span class=\"line\"><span class=\"code\">cond=&gt;condition: Yes or No?</span></span><br><span class=\"line\"><span class=\"code\">e=&gt;end</span></span><br><span class=\"line\"><span class=\"code\">st-&gt;op-&gt;cond</span></span><br><span class=\"line\"><span class=\"code\">cond(yes)-&gt;e</span></span><br><span class=\"line\"><span class=\"code\">cond(no)-&gt;op</span></span><br><span class=\"line\"><span class=\"code\">(```</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-换行\">Markdown 换行</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">连续两个以上空格+回车</span><br></pre></td></tr></table></figure>\n<p> <strong>或者</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用html语言换行标签<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-缩进字符\">Markdown 缩进字符</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">&amp;nbsp;</span>  缩进1/4中文</span><br><span class=\"line\"><span class=\"literal\">&amp;ensp;</span>  缩进半个中文，一个字符</span><br><span class=\"line\"><span class=\"literal\">&amp;emsp;</span>  缩进一个中文，2个字符</span><br></pre></td></tr></table></figure>","tags":["Markdown"]},{"title":"Hackathon决赛","url":"/2024/10/26/Hackathon%E5%86%B3%E8%B5%9B/","content":"<p>本次所选工程题目对于我们来说难度还是太大了。所以决定先去观光一下华为欧洲小镇吧~</p>\n<center>\n<img src=\"https://s2.loli.net/2024/10/26/dDNqeRghP17isKX.jpg\" width=\"100%\" />\n<p>Figure 1</p>\n</center>\n<p>意料之外获得“安慰奖”。</p>\n<center>\n<img src=\"https://s2.loli.net/2024/10/29/xtLy9h3d5SHAeuZ.jpg\" width=\"100%\" />\n<p>Figure 2</p>\n</center>\n<p>返程飞机上的体验感还不错。</p>\n<center>\n<img src=\"https://s2.loli.net/2024/10/29/UOLH8Fyaf7lPsI6.jpg\" width=\"100%\" />\n<p>Figure 3</p>\n</center>","tags":["Hackathon","华为","比赛","体验"]},{"title":"Mini App","url":"/2024/10/30/Mini%20App/","content":"<p><strong>作业说明：</strong><br>\n个人作业。不限主题，不限功能，做出一款Mini App</p>\n<p><strong>具体要求：</strong><br>\n1.功能要求：可使用任意界面框架完成至少一个的功能点<br>\n2.技术要求：需要使用到网络、存储等技术点中至少一条<br>\n3.性能要求：不卡顿、无明显资源泄露</p>\n<p><strong>提交要求：</strong><br>\n1.产品报告：不限于ppt/word/pdf格式，内容需至少包括 ①产品功能介绍；②程序概要设计；③软件架构图；④技术亮点及其实现原理（非必选）<br>\n2.源代码：要求提交到GitHub/gitee repo仓库，将仓库地址粘贴到txt提交即可<br>\n3.演示录屏：mkv, mp4, avi, rm, rmvb格式优先<br>\n4.提交时间：11月30日晚12点前</p>\n<p><strong>提交格式：</strong><br>\n请将以上三个内容合并到一个文件夹并压缩，命名：学校+姓名+Android/iOS+App名称<br>\n上传至：<br>\n腾讯客户端菁英班课程大作业提交</p>\n<p><strong>样例参考：</strong><br>\n例1：《表情图库》<br>\n1.功能要求：使用网格/列表，展示表情图库<br>\n2.技术要求：使用 DB 存储图片文件信息，使用文件存储表情图片<br>\n3.性能要求：快速打开超过1000张图片的图库，显示图片流畅滑动不卡顿，内存资源不泄露</p>\n<p>例2：《微信文本/图片聊天》<br>\n1.功能要求：仿照微信做一个可以文本/图片聊天的界面<br>\n2.技术要求：能够进行两人以上的聊天，能够发送文本/图片<br>\n3.性能要求：聊天列表上下滑动不卡顿，没有资源泄露</p>\n<p>注：以上仅为样例参考，同学们可以任意选择自己想做的 Mini App。</p>\n","tags":["Mini App","腾讯"]},{"title":"Hello World","url":"/2024/09/05/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<h3 id=\"Create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"MiniMIPS32","url":"/2024/10/12/MiniMIPS32/","content":"<h2 id=\"指令集仿真器-–-TEMU\">指令集仿真器 – TEMU</h2>\n<h3 id=\"实验简介\">实验简介</h3>\n<p>采用高级语言（C/C++、Java或Python等）设计面向32位MIPS或LoongArch指令集子集的指令集仿真器 – TEMU，用于实现对程序执行过程的模拟和调试。该指令集仿真器可模拟常见指令，支持单步执行、断点、显示寄存器信息、显示特定存储单元信息等功能，为后续的处理器设计实验提供仿真测试工具。</p>\n","tags":["MiniMIPS32"]},{"title":"动态规划做题总结","url":"/2024/10/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/","content":"<h1>入门 DP</h1>\n<h2 id=\"爬楼梯\">爬楼梯</h2>\n<h3 id=\"爬楼梯-2\">爬楼梯</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(n+<span class=\"number\">1</span>)</span>;     </span><br><span class=\"line\">        f[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            f[i]=f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*由于这里的 f(x) 只和 f(x−1) 与 f(x−2) 有关，所以我们可以用「滚动数组思想」把空间复杂度优化成 O(1)*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"number\">0</span>, q = <span class=\"number\">0</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            p = q; </span><br><span class=\"line\">            q = r; </span><br><span class=\"line\">            r = p + q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用最小花费爬楼梯\">使用最小花费爬楼梯</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minCostClimbingStairs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; cost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = cost.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            dp[i] = min(dp[i - <span class=\"number\">1</span>] + cost[i - <span class=\"number\">1</span>], dp[i - <span class=\"number\">2</span>] + cost[i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合总和-Ⅳ\">组合总和 Ⅳ</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*本质是爬楼梯，相当于每次往上爬 nums[i] 步*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(target + <span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; <span class=\"comment\">//只有当不选取任何元素时，元素之和才为 0，因此只有 1 种方案。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= target; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span>&amp; num : nums) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &lt;= i&amp;&amp; dp[i - num] &lt; INT_MAX - dp[i]) &#123;</span><br><span class=\"line\">                    dp[i] += dp[i - num];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*另一种写法*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 unsigned 可以让溢出不报错</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于溢出的数据，不会影响答案的正确性（题目保证）</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">unsigned</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(target + <span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= target; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : nums) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x &lt;= i) &#123;</span><br><span class=\"line\">                    f[i] += f[i - x];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计构造好字符串的方案数\">统计构造好字符串的方案数</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">countGoodStrings</span><span class=\"params\">(<span class=\"type\">int</span> low, <span class=\"type\">int</span> high, <span class=\"type\">int</span> zero, <span class=\"type\">int</span> one)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(high + <span class=\"number\">1</span>)</span>; <span class=\"comment\">// f[i] 表示构造长为 i 的字符串的方案数</span></span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// 构造空串的方案数为 1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= high; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= zero) f[i] = f[i - zero];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= one)  f[i] = (f[i] + f[i - one]) % MOD;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= low)  ans = (ans + f[i]) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计打字方案数\">统计打字方案数</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">countTexts</span><span class=\"params\">(<span class=\"built_in\">string</span> pressedKeys)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; dp3 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>&#125;;   <span class=\"comment\">// 连续按多次 3 个字母按键对应的方案数</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; dp4 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>&#125;;   <span class=\"comment\">// 连续按多次 4 个字母按键对应的方案数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> n = pressedKeys.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">4</span>; i &lt; n + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">            dp3.push_back((dp3[i<span class=\"number\">-1</span>] + dp3[i<span class=\"number\">-2</span>] + dp3[i<span class=\"number\">-3</span>]) % m);</span><br><span class=\"line\">            dp4.push_back((dp4[i<span class=\"number\">-1</span>] + dp4[i<span class=\"number\">-2</span>] + dp4[i<span class=\"number\">-3</span>] + dp4[i<span class=\"number\">-4</span>]) % m);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> res = <span class=\"number\">1</span>;   <span class=\"comment\">// 总方案数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;   <span class=\"comment\">// 当前字符连续出现的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pressedKeys[i] == pressedKeys[i<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                ++cnt;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 对按键对应字符数量讨论并更新总方案数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pressedKeys[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;7&#x27;</span> || pressedKeys[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                    res *= dp4[cnt];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res *= dp3[cnt];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res %= m;</span><br><span class=\"line\">                cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新最后一段连续字符子串对应的方案数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pressedKeys[n<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;7&#x27;</span> || pressedKeys[n<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">            res *= dp4[cnt];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res *= dp3[cnt];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res %= m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打家劫舍\">打家劫舍</h2>\n<h3 id=\"打家劫舍-2\">打家劫舍</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*题意转化为：从序列中选择子序列使得它们的和最大，数不能有相邻*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>; <span class=\"comment\">//用 dp[i] 表示前 i 间房屋能偷窃到的最高总金额</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-2</span>]+nums[i],dp[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*上述方法使用了数组存储结果。考虑到每间房屋的最高总金额只和该房屋的前两间房屋的最高总金额相关，因此可以使用滚动数组，在每个时刻只需要存储前两间房屋的最高总金额。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> first=nums[<span class=\"number\">0</span>],second=max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp=second;</span><br><span class=\"line\">            second=max(first+nums[i],second);</span><br><span class=\"line\">            first=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除并获得点数\">删除并获得点数</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">private:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> first=nums[<span class=\"number\">0</span>],second=max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp=second;</span><br><span class=\"line\">            second=max(first+nums[i],second);</span><br><span class=\"line\">            first=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteAndEarn</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxval=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> val:nums)&#123;</span><br><span class=\"line\">            maxval=max(maxval,val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;sum(maxval+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> val:nums)&#123;</span><br><span class=\"line\">            sum[val]+=val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rob(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计放置房子的方式数\">统计放置房子的方式数</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*单独考虑一侧的房子，定义 f[i] 表示前 i 个地块的放置方案数，其中第 i 个地块可以放房子，也可以不放房子。*/</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">countHousePlacements</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span>;</span><br><span class=\"line\">        f[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        f[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            f[i]=(f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>])%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n]*f[n]%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打家劫舍-II\">打家劫舍 II</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一间房屋和最后一间房屋不同时偷窃*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">robRange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> first = nums[start], second = max(nums[start], nums[start + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start + <span class=\"number\">2</span>; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp = second;</span><br><span class=\"line\">            second = max(first + nums[i], second);</span><br><span class=\"line\">            first = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> length = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(robRange(nums, <span class=\"number\">0</span>, length - <span class=\"number\">2</span>), robRange(nums, <span class=\"number\">1</span>, length - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"施咒的最大总伤害\">施咒的最大总伤害</h3>\n<h2 id=\"最大子数组和\">最大子数组和</h2>\n<blockquote>\n<p><em>定义状态 f[i] 表示以 a[i] 结尾的最大子数组和，不和 i 左边拼起来就是f[i]=a[i]，和 i 左边拼起来就是f[i]=f[i−1]+a[i]，取最大值就得到了状态转移方程 f[i]=max(f[i−1],0)+a[i]，答案为 max(f)。这个做法也叫做 Kadane 算法。</em></p>\n</blockquote>\n<h3 id=\"最大子数组和-2\">最大子数组和</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*模板题*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(nums.size())</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ranges::max(dp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"找到最大开销的子字符串\">找到最大开销的子字符串</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*一点转化+模板题*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maximumCostSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> chars, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; vals)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">m</span><span class=\"params\">(<span class=\"number\">26</span>+<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        iota(m.begin(),m.end(),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;chars.size();i++)&#123;</span><br><span class=\"line\">            m[chars[i]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>]=vals[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(s.size())</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=m[s[<span class=\"number\">0</span>]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=max(<span class=\"number\">0</span>,dp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;s.size();i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+m[s[i]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">            ans=max(ans,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任意子数组和的绝对值的最大值\">任意子数组和的绝对值的最大值</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*题目转化为max(最大子数组和，-最小子数组和，0)*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxAbsoluteSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(nums.size())</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans1=dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">            ans1=max(ans1,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp1</span><span class=\"params\">(nums.size())</span>;</span><br><span class=\"line\">        dp1[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans2=dp1[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            dp1[i]=min(dp1[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">            ans2=min(ans2,dp1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=max(<span class=\"number\">0</span>,ans1);</span><br><span class=\"line\">        ans=max(ans,-ans2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"K-次串联后最大子数组之和\">K 次串联后最大子数组之和</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">考虑两种情况：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">1.如果k=1，那就是正常DP。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">2.k&gt;1时也考虑两种情况：数组所有元素和大于0，数组所有元素和小于等于0。</span></span><br><span class=\"line\"><span class=\"comment\">首先计算两个相接的DP也就是k=2的情况，如果数组元素和大于0，那可以看成再第一段结尾第二段开头插入k-2个正数，如果数组所有元素和为负，那k=2的情况就是最大的情况。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">kConcatenationMaxSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; arr, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=arr.size();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> sum=<span class=\"number\">0</span>,presum=<span class=\"number\">0</span>,result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n*(k&gt;<span class=\"number\">1</span>?<span class=\"number\">2</span>:<span class=\"number\">1</span>);i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> num=arr[i%n];</span><br><span class=\"line\">            presum=max(presum,<span class=\"number\">0ll</span>)+num;</span><br><span class=\"line\">            result=max(result,presum);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;n) sum+=num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum&gt;<span class=\"number\">0</span>&amp;&amp;k&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            result=(result+sum*(k<span class=\"number\">-2</span>)%mod)%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.sum&gt;0、k=2时，最大子数组和如果没有跨过两个数组，那岂不是不能在中间插入k-2个sum吗？</span></span><br><span class=\"line\"><span class=\"comment\">反证法，反设sum&gt;0时，如果最大子数组和没有跨过两个数组。从L到R的子数组的和最大（0&lt;=L&lt;=R&lt;n-1），考虑R向右n个数(R+1到R+n)，这n个数一定是和arr的数是一样的（循环了），那么这n个数的和是sum，大于0。所以从L到R+n的子数组的和要更大，而这个子数组跨过了两个数组，与反设矛盾。所以这样做是对的。</span></span><br><span class=\"line\"><span class=\"comment\">2.sum&lt;=0时，为什么可以化归到k=2的情况？</span></span><br><span class=\"line\"><span class=\"comment\">还是反证法，假设最大子数组的长度&gt;2n，那一定包括一个完整的arr数组，那么因为sum&lt;=0，所以拿掉这一部分，把前后拼接在一起（这样做显然是合法的），这样做结果只会更优，如此操作下去，就可以划归到k=2的情况了。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"环形子数组的最大和\">环形子数组的最大和</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxSubarraySumCircular</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">qianmax</span><span class=\"params\">(n)</span>; <span class=\"comment\">//前缀最大值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> presum=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        qianmax[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> pre=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            pre=max(pre,<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">            ans=max(ans,pre);</span><br><span class=\"line\"></span><br><span class=\"line\">            presum+=nums[i];</span><br><span class=\"line\">            qianmax[i]=max(qianmax[i<span class=\"number\">-1</span>],presum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> housum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;<span class=\"number\">0</span>;i--)&#123; <span class=\"comment\">//枚举后缀和</span></span><br><span class=\"line\">            housum+=nums[i];</span><br><span class=\"line\">            ans=max(ans,housum+qianmax[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拼接数组的最大分数\">拼接数组的最大分数</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*转换成最大子数组和*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums1, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, s = <span class=\"number\">0</span>; i &lt; nums1.size(); i++) &#123;</span><br><span class=\"line\">            sum += nums1[i];</span><br><span class=\"line\">            s = max(s,<span class=\"number\">0</span>)+(nums2[i] - nums1[i]);</span><br><span class=\"line\">            maxSum = max(maxSum, s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum + maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maximumsSplicedArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums1, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(solve(nums1, nums2), solve(nums2, nums1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展）乘积最大子数组\">(扩展）乘积最大子数组</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span> &lt;<span class=\"type\">long</span>&gt; maxF(nums.begin(),nums.end()), minF(nums.begin(), nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class=\"line\">            maxF[i] = max(maxF[i - <span class=\"number\">1</span>] * nums[i], max((<span class=\"type\">long</span>)nums[i], minF[i - <span class=\"number\">1</span>] * nums[i]));</span><br><span class=\"line\">            minF[i] = min(minF[i - <span class=\"number\">1</span>] * nums[i], min((<span class=\"type\">long</span>)nums[i], maxF[i - <span class=\"number\">1</span>] * nums[i]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minF[i]&lt;INT_MIN) &#123;</span><br><span class=\"line\">                minF[i]=nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *max_element(maxF.begin(), maxF.end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*优化空间*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> maxF = nums[<span class=\"number\">0</span>], minF = nums[<span class=\"number\">0</span>], ans = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> mx = maxF, mn = minF;</span><br><span class=\"line\">            maxF = max(mx * nums[i], max((<span class=\"type\">long</span>)nums[i], mn * nums[i]));</span><br><span class=\"line\">            minF = min(mn * nums[i], min((<span class=\"type\">long</span>)nums[i], mx * nums[i]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minF&lt;INT_MIN) &#123;</span><br><span class=\"line\">                minF=nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = max(maxF, ans);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1>网格图 DP</h1>\n<h2 id=\"基础\">基础</h2>\n<h3 id=\"珠宝的最高价值\">珠宝的最高价值</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">jewelleryValue</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; frame)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=frame.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=frame[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        f[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=frame[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123; <span class=\"comment\">//处理第一列</span></span><br><span class=\"line\">            f[i][<span class=\"number\">0</span>]=f[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]+frame[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123; <span class=\"comment\">//处理第一行</span></span><br><span class=\"line\">            f[<span class=\"number\">0</span>][j]=f[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>]+frame[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                f[i][j]=max(f[i<span class=\"number\">-1</span>][j],f[i][j<span class=\"number\">-1</span>])+frame[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/*注意到状态转移方程中，f(i,j) 只会从 f(i−1,j) 和 f(i,j−1) 转移而来，而与 f(i−2,⋯) 以及更早的状态无关，因此我们同一时刻只需要存储最后两行的状态，即使用两个长度为 n 的一位数组代替 n×m 的二维数组 f，交替地进行状态转移，减少空间复杂度。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">jewelleryValue</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; frame)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=frame.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=frame[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos=i%<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                f[pos][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>) f[pos][j]=max(f[pos][j],f[<span class=\"number\">1</span>-pos][j]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">0</span>) f[pos][j]=max(f[pos][j],f[pos][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">                f[pos][j]+=frame[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不同路径\">不同路径</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++) f[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*此外，由于 f(i,j) 仅与第 i 行和第 i−1 行的状态有关，因此我们可以使用滚动数组代替代码中的二维数组，使空间复杂度降低为 O(n)。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(n,<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                f[j]+=f[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不同路径-II\">不同路径 II</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; obstacleGrid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=obstacleGrid.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> n=obstacleGrid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123; <span class=\"comment\">//处理第一列</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obstacleGrid[i][<span class=\"number\">0</span>]==<span class=\"number\">1</span>)&#123; <span class=\"comment\">//有障碍 </span></span><br><span class=\"line\">                f[i][<span class=\"number\">0</span>]=<span class=\"number\">0</span>; </span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//后面都到达不了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;  <span class=\"comment\">//处理第一行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obstacleGrid[<span class=\"number\">0</span>][j]==<span class=\"number\">1</span>)&#123; <span class=\"comment\">//有障碍</span></span><br><span class=\"line\">                f[<span class=\"number\">0</span>][j]=<span class=\"number\">0</span>; </span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//后面都到达不了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obstacleGrid[i][j]==<span class=\"number\">1</span>) f[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最小路径和\">最小路径和</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=grid.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++) dp[i][<span class=\"number\">0</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]+grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++) dp[<span class=\"number\">0</span>][j]=dp[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>]+grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                dp[i][j]=min(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>])+grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三角形最小路径和\">三角形最小路径和</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minimumTotal</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; triangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=triangle.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=triangle[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]+triangle[i][<span class=\"number\">0</span>]; <span class=\"comment\">//第一列只能从上面转移</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                dp[i][j]=min(dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j])+triangle[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[i][i]=dp[i<span class=\"number\">-1</span>][i<span class=\"number\">-1</span>]+triangle[i][i];<span class=\"comment\">//最后一列只能从左上转移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[n<span class=\"number\">-1</span>].begin(),dp[n<span class=\"number\">-1</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*可以发现，dp[i][j] 只与 dp[i−1][..] 有关，而与 dp[i−2][..] 及之前的状态无关，因此我们不必存储这些无关的状态。具体地，我们使用两个长度为 n 的一维数组进行转移，将 i 根据奇偶性映射到其中一个一维数组，那么 i−1 就映射到了另一个一维数组。这样我们使用这两个一维数组，交替地进行状态转移。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minimumTotal</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; triangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=triangle.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=triangle[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cur=i%<span class=\"number\">2</span>; <span class=\"comment\">//当前行</span></span><br><span class=\"line\">            <span class=\"type\">int</span> pre=<span class=\"number\">1</span>-cur; <span class=\"comment\">//上一行</span></span><br><span class=\"line\">            dp[cur][<span class=\"number\">0</span>]=dp[pre][<span class=\"number\">0</span>]+triangle[i][<span class=\"number\">0</span>]; <span class=\"comment\">//第一列只能从上面转移</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                dp[cur][j]=min(dp[pre][j<span class=\"number\">-1</span>],dp[pre][j])+triangle[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[cur][i]=dp[pre][i<span class=\"number\">-1</span>]+triangle[i][i];<span class=\"comment\">//最后一列只能从左上转移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].begin(),dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"下降路径最小和\">下降路径最小和</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minFallingPathSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; matrix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=matrix.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        copy(matrix[<span class=\"number\">0</span>].begin(),matrix[<span class=\"number\">0</span>].end(),dp[<span class=\"number\">0</span>].begin());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> minn=dp[i<span class=\"number\">-1</span>][j]; <span class=\"comment\">//都能从正上方转移</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">0</span>)&#123; <span class=\"comment\">//可以从左上方转移</span></span><br><span class=\"line\">                    minn=min(minn,dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&lt;n<span class=\"number\">-1</span>)&#123; <span class=\"comment\">//可以从右上方转移</span></span><br><span class=\"line\">                    minn=min(minn,dp[i<span class=\"number\">-1</span>][j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[i][j]=minn+matrix[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[n<span class=\"number\">-1</span>].begin(),dp[n<span class=\"number\">-1</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"矩阵中移动的最大次数\">矩阵中移动的最大次数</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxMoves</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>; <span class=\"type\">bool</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=grid.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m)); <span class=\"comment\">//dp[i][j]==1表示(i,j)位置可到达</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">            flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j<span class=\"number\">-1</span>]&lt;grid[i][j]&amp;&amp;dp[i][j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(grid[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]&lt;grid[i][j]&amp;&amp;dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                        dp[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&lt;n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(grid[i+<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]&lt;grid[i][j]&amp;&amp;dp[i+<span class=\"number\">1</span>][j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                        dp[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[i][j])&#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    ans=j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//ans+=1;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"网格中的最小路径代价\">网格中的最小路径代价</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minPathCost</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; moveCost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid.size(),n=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cur=i%<span class=\"number\">2</span>; <span class=\"comment\">//当前行</span></span><br><span class=\"line\">            <span class=\"type\">int</span> pre=<span class=\"number\">1</span>-cur; <span class=\"comment\">//上一行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123; <span class=\"comment\">//当前行每一列</span></span><br><span class=\"line\">                dp[cur][j]=INT_MAX;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)&#123; <span class=\"comment\">//上一行每一列</span></span><br><span class=\"line\">                    dp[cur][j]=min(dp[cur][j],dp[pre][k]+moveCost[grid[i<span class=\"number\">-1</span>][k]][j]+grid[i][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[(m<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].begin(),dp[(m<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"下降路径最小和-II\">下降路径最小和 II</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minFallingPathSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=grid.size(),m=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123; </span><br><span class=\"line\">            <span class=\"type\">int</span> cur=i%<span class=\"number\">2</span>; <span class=\"comment\">//当前行</span></span><br><span class=\"line\">            <span class=\"type\">int</span> pre=<span class=\"number\">1</span>-cur; <span class=\"comment\">//上一行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123; <span class=\"comment\">//当前行每一列</span></span><br><span class=\"line\">                dp[cur][j]=INT_MAX;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;m;k++)&#123; <span class=\"comment\">//上一行每一列</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j!=k)&#123;</span><br><span class=\"line\">                        dp[cur][j]=min(dp[cur][j],dp[pre][k]+grid[i][j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].begin(),dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶\">进阶</h2>\n<h3 id=\"矩阵的最大非负积\">矩阵的最大非负积</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxProductPath</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid.size(),n=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;&gt; maxgt(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;&gt; minlt(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;(n));</span><br><span class=\"line\">        maxgt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=minlt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123; <span class=\"comment\">//处理第一行</span></span><br><span class=\"line\">            maxgt[<span class=\"number\">0</span>][j]=minlt[<span class=\"number\">0</span>][j]=maxgt[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>]*grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123; <span class=\"comment\">//处理第一列</span></span><br><span class=\"line\">            maxgt[i][<span class=\"number\">0</span>]=minlt[i][<span class=\"number\">0</span>]=maxgt[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]*grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    maxgt[i][j]=max(maxgt[i<span class=\"number\">-1</span>][j],maxgt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                    minlt[i][j]=min(minlt[i<span class=\"number\">-1</span>][j],minlt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    maxgt[i][j]=min(minlt[i<span class=\"number\">-1</span>][j],minlt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                    minlt[i][j]=max(maxgt[i<span class=\"number\">-1</span>][j],maxgt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxgt[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxgt[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大得分的路径数目\">最大得分的路径数目</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">using PII = <span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">private:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">constexpr</span> <span class=\"type\">int</span> mod = (<span class=\"type\">int</span>)<span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;PII&gt;&gt;&amp; dp, <span class=\"type\">int</span> n, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u &gt;= n || v &gt;= n || dp[u][v].first == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp[u][v].first &gt; dp[x][y].first) &#123;</span><br><span class=\"line\">            dp[x][y] = dp[u][v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dp[u][v].first == dp[x][y].first) &#123;</span><br><span class=\"line\">            dp[x][y].second += dp[u][v].second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[x][y].second &gt;= mod) &#123;</span><br><span class=\"line\">                dp[x][y].second -= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">pathsWithMaxScore</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; board)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = board.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;PII&gt;&gt; dp(n, <span class=\"built_in\">vector</span>&lt;PII&gt;(n, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;));</span><br><span class=\"line\">        dp[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(i == n - <span class=\"number\">1</span> &amp;&amp; j == n - <span class=\"number\">1</span>) &amp;&amp; board[i][j] != <span class=\"string\">&#x27;X&#x27;</span>) &#123;</span><br><span class=\"line\">                    update(dp, n, i, j, i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">                    update(dp, n, i, j, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    update(dp, n, i, j, i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (dp[i][j].first != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        dp[i][j].first += (board[i][j] == <span class=\"string\">&#x27;E&#x27;</span> ? <span class=\"number\">0</span> : board[i][j] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].first == <span class=\"number\">-1</span> ? <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125; : <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&#123;dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].first, dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].second&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"矩阵中和能被-K-整除的路径\">矩阵中和能被 K 整除的路径</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*把路径和模 k 的结果当成一个扩展维度*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">numberOfPaths</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; &amp;grid, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = grid.size(), n = grid[<span class=\"number\">0</span>].size(), f[m + <span class=\"number\">1</span>][n + <span class=\"number\">1</span>][k];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(f)); <span class=\"comment\">// f[i][j][v] 表示从左上走到 (i,j)，且路径和模 k 的结果为 v 时的路径数</span></span><br><span class=\"line\">        f[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v = <span class=\"number\">0</span>; v &lt; k; ++v)</span><br><span class=\"line\">                    f[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>][(v + grid[i][j]) % k] = (f[i + <span class=\"number\">1</span>][j][v] + f[i][j + <span class=\"number\">1</span>][v]) % mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[m][n][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*代码实现时，为了避免判断是否越界，可以把下标都加一。此时可以设初始值 f[0][1][0]=1（或者 f[1][0][0]=1）简化一点点代码。*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"地下城游戏\">地下城游戏</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1>背包</h1>\n<h2 id=\"0-1-背包\">0-1 背包</h2>\n<blockquote>\n<p><em>每个物品只能选一次</em></p>\n</blockquote>\n<h3 id=\"和为目标值的最长子序列的长度\">和为目标值的最长子序列的长度</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"完全背包\">完全背包</h2>\n<h2 id=\"多重背包\">多重背包</h2>\n<h2 id=\"分组背包\">分组背包</h2>\n<h1>经典线性 DP</h1>\n<h2 id=\"最长公共子序列（LCS）\">最长公共子序列（LCS）</h2>\n<blockquote>\n<p><em>一般定义f[i][j]表示对(s[:i],t[:j])的求解结果。</em></p>\n</blockquote>\n<h3 id=\"最长公共子序列\">最长公共子序列</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(string text1, string text2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=text<span class=\"number\">1.</span><span class=\"built_in\">size</span>(),n=text<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m<span class=\"number\">+1</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n<span class=\"number\">+1</span>)); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1=text1[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> c2=text2[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c1==c2)&#123;</span><br><span class=\"line\">                    dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]<span class=\"number\">+1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"built_in\">max</span>(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两个字符串的删除操作\">两个字符串的删除操作</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minDistance</span><span class=\"params\">(string word1, string word2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = word<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = word<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1 = word1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> c2 = word2[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> lcs = dp[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m - lcs + n - lcs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两个字符串的最小ASCII删除和\">两个字符串的最小ASCII删除和</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimumDeleteSum</span><span class=\"params\">(string s1, string s2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = s<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + s1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + s2[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1 = s1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> c2 = s2[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">min</span>(dp[i - <span class=\"number\">1</span>][j] + s1[i - <span class=\"number\">1</span>], dp[i][j - <span class=\"number\">1</span>] + s2[j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑距离\">编辑距离</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"最长递增子序列（LIS）\">最长递增子序列（LIS）</h2>\n","tags":["动态规划","编程"]},{"title":"《软件工程》复习","url":"/2024/10/30/%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E3%80%8B%E5%A4%8D%E4%B9%A0/","content":"<h2 id=\"1-2-软件及其特点\">1.2 软件及其特点</h2>\n<h3 id=\"软件的组成\">软件的组成</h3>\n<p>程序、数据和相关文档</p>\n<h3 id=\"软件的生命周期\">软件的生命周期</h3>\n<p>需求分析、软件设计、编码实现、软件测试、部署运行、使用维护。</p>\n<h3 id=\"软件的分类\">软件的分类</h3>\n<p><strong>应用软件</strong><br>\n<strong>系统软件</strong><br>\n<strong>支撑软件</strong></p>\n<h3 id=\"开源软件的优势\">开源软件的优势</h3>\n<h4 id=\"开源软件的好处\"><strong>开源软件的好处</strong></h4>\n<p>源代码可自由传播<br>\n激发创作者的热情<br>\n免费使用降低成本</p>\n<h4 id=\"开源软件的优势-2\"><strong>开源软件的优势</strong></h4>\n<p><strong>采购和开发的成本更低</strong>：开源软件通常是免费的，即使要付费，其费用也非常低廉<br>\n<strong>软件质量更高、更安全</strong>：核心代码都在公众的视野之中，代码问题（如缺陷、安全漏洞等）很容易被人发现<br>\n<strong>软件研制和交付的更快</strong>：基于开源软件的项目开发可以更为快速地给用户交付软件产品<br>\n<strong>软件功能更为强大</strong>：大量的软件开发者不仅参与软件开发，贡献他们的代码，而且还参与软件的创新，提出和构思软件需求，不断完善软件功能</p>\n<h3 id=\"软件质量要素\">软件质量要素</h3>\n<p>正确性、可靠性、健壮性、有效性、安全性、可维护性、可移植性、可重用性、可理解性、可信性、持续性、可用性、互操作性。</p>\n<h2 id=\"2-软件工程概述\">2 软件工程概述</h2>\n<h3 id=\"软件危机的表现\">软件危机的表现</h3>\n<p>开发成本高<br>\n进度难以控制<br>\n质量难以保证<br>\n软件维护困难<br>\n失败风险很大</p>\n<h3 id=\"软件工程的要素\">软件工程的要素</h3>\n<p><img src=\"image.png\" alt=\"alt text\"></p>\n<h3 id=\"软件工程的原则\">软件工程的原则</h3>\n<p>抽象和建模、模块化、软件重用、信息隐藏、关注点分离、分而治之、双向追踪原则、工具辅助。</p>\n<h2 id=\"3-1-软件过程模型\">3.1 软件过程模型</h2>\n<h3 id=\"典型软件过程模型\">典型软件过程模型</h3>\n<p><strong>瀑布模型、增量模型、迭代模型、原型模型、螺旋模型</strong>、基于构件的过程模型、UP模型。</p>\n<h2 id=\"3-2-敏捷软件开发方法\">3.2 敏捷软件开发方法</h2>\n<h3 id=\"敏捷开发的概念和观点\">敏捷开发的概念和观点</h3>\n<h3 id=\"敏捷准则\">敏捷准则</h3>\n<h3 id=\"敏捷开发代表方法\">敏捷开发代表方法</h3>\n<h2 id=\"4-软件需求分析基础\">4 软件需求分析基础</h2>\n<h3 id=\"利益相关方\">利益相关方</h3>\n<h3 id=\"软件需求的类别\">软件需求的类别</h3>\n<h3 id=\"面向对象的需求分析方法\">面向对象的需求分析方法</h3>\n<h2 id=\"5-获取软件需求\">5 获取软件需求</h2>\n<h3 id=\"获取软件需求的方法\">获取软件需求的方法</h3>\n<h3 id=\"用例图\">用例图</h3>\n<h2 id=\"6-分析软件需求\">6 分析软件需求</h2>\n<h3 id=\"顺序图\">顺序图</h3>\n<h3 id=\"类图\">类图</h3>\n<h3 id=\"状态图\">状态图</h3>\n<h3 id=\"分析软件需求过程\">分析软件需求过程</h3>\n<h3 id=\"软件需求文档\">软件需求文档</h3>\n<h2 id=\"7-软件设计基础\">7 软件设计基础</h2>\n<h3 id=\"软件设计的质量要求\">软件设计的质量要求</h3>\n<h3 id=\"软件设计原则\">软件设计原则</h3>\n<h2 id=\"8-软件体系结构设计\">8 软件体系结构设计</h2>\n<h3 id=\"常用软件体系结构风格\">常用软件体系结构风格</h3>\n<h2 id=\"10-软件详细设计\">10 软件详细设计</h2>\n<h3 id=\"详细设计过程\">详细设计过程</h3>\n<h3 id=\"活动图\">活动图</h3>\n<h3 id=\"用例设计\">用例设计</h3>\n<h3 id=\"类设计\">类设计</h3>\n<h3 id=\"数据设计\">数据设计</h3>\n<h2 id=\"13-软件测试\">13 软件测试</h2>\n<h3 id=\"软件测试过程\">软件测试过程</h3>\n<h3 id=\"软件测试原则\">软件测试原则</h3>\n<h3 id=\"软件测试技术\">软件测试技术</h3>\n<h2 id=\"15-软件维护和演化\">15 软件维护和演化</h2>\n<h3 id=\"软件维护的形式\">软件维护的形式</h3>\n<h3 id=\"软件维护技术\">软件维护技术</h3>\n","tags":["复习","软件工程"]},{"title":"单调栈做题总结","url":"/2024/10/06/%E5%8D%95%E8%B0%83%E6%A0%88%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/","content":"<h1>基础</h1>\n<h2 id=\"每日温度\">每日温度</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 找后面第一个大 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dailyTemperatures</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=temperatures.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;temperatures[s.<span class=\"built_in\">top</span>()]&lt;temperatures[i])&#123; <span class=\"comment\">//栈中维护下标写法</span></span><br><span class=\"line\">                ans[s.<span class=\"built_in\">top</span>()]=i-s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"商品折扣后的最终价格\">商品折扣后的最终价格</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 找后面第一个小于等于 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">finalPrices</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=prices.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;prices[s.<span class=\"built_in\">top</span>()]&gt;=prices[i])&#123;</span><br><span class=\"line\">                ans[s.<span class=\"built_in\">top</span>()]=prices[s.<span class=\"built_in\">top</span>()]-prices[i];</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            ans[s.<span class=\"built_in\">top</span>()]=prices[s.<span class=\"built_in\">top</span>()];</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下一个更大元素-I\">下一个更大元素 I</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 找后面第一个大 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nextGreaterElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(nums<span class=\"number\">1.</span>size())</span></span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; hashmap;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//处理nums2</span></span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums2[s.<span class=\"built_in\">top</span>()]&lt;nums2[i])&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> temp=nums2[s.<span class=\"built_in\">top</span>()];</span><br><span class=\"line\">                hashmap[temp]=nums2[i];</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp=nums1[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hashmap[temp]) ans[i]=hashmap[temp];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ans[i]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下一个更大元素-II\">下一个更大元素 II</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 循环找后面第一个大 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nextGreaterElements</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>*n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums[s.<span class=\"built_in\">top</span>()]&lt;nums[i%n])&#123;</span><br><span class=\"line\">                ans[s.<span class=\"built_in\">top</span>()]=nums[i%n];</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i%n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最大宽度坡\">最大宽度坡</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*单调递减栈*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxWidthRamp</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">empty</span>() || nums[s.<span class=\"built_in\">top</span>()] &gt; nums[i]) &#123;<span class=\"comment\">//要把第一个数据push</span></span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; nums[s.<span class=\"built_in\">top</span>()]&lt;=nums[i]) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans,i - s.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"车队\">车队</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 排序+单调栈 *****/</span></span><br><span class=\"line\"><span class=\"comment\">/***** 根据位置由小到大排序，位置大的左侧（位置小）的时间不应更小等-&gt;（严格）单调递减栈 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">carFleet</span><span class=\"params\">(<span class=\"type\">int</span> target, vector&lt;<span class=\"type\">int</span>&gt;&amp; position, vector&lt;<span class=\"type\">int</span>&gt;&amp; speed)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; ps; <span class=\"comment\">//自动排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;position.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            ps[position[i]]=speed[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stack&lt;<span class=\"type\">double</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; [pos,spd]:ps)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> time=<span class=\"built_in\">double</span>(target-pos)/spd;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;s.<span class=\"built_in\">top</span>()&lt;=time)&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1>矩形面积（完结）</h1>\n<h2 id=\"柱状图中最大的矩形\">柱状图中最大的矩形</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 单调栈的其中一种写法---处理栈中元素 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = heights.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(n,<span class=\"number\">-1</span>)</span>, <span class=\"title\">right</span><span class=\"params\">(n,n)</span></span>; <span class=\"comment\">//左边第一个小的位置、右边第一个小的位置</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; <span class=\"comment\">//处理右边</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;heights[s.<span class=\"built_in\">top</span>()]&gt;heights[i])&#123;</span><br><span class=\"line\">\t\t\t\tright[s.<span class=\"built_in\">top</span>()]=i;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        s = <span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; (); <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123; <span class=\"comment\">//处理左边</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;heights[s.<span class=\"built_in\">top</span>()]&gt;heights[i])&#123;</span><br><span class=\"line\">\t\t\t\tleft[s.<span class=\"built_in\">top</span>()]=i;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, (right[i] - left[i] - <span class=\"number\">1</span>) * heights[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"好子数组的最大分数\">好子数组的最大分数</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 单调栈的另一种写法---处理当前元素 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumScore</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(n,<span class=\"number\">-1</span>)</span>,<span class=\"title\">right</span><span class=\"params\">(n,n)</span></span>; <span class=\"comment\">//左边第一小的编号、右边第一小的编号</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; <span class=\"comment\">//处理左边</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums[s.<span class=\"built_in\">top</span>()]&gt;=nums[i]) s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>()) left[i]=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        s=<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; ();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123; <span class=\"comment\">//处理右边</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums[s.<span class=\"built_in\">top</span>()]&gt;=nums[i]) s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>()) right[i]=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> h=nums[i],l=left[i],r=right[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l&lt;k&amp;&amp;r&gt;k)&#123; <span class=\"comment\">//多了一个区间判断</span></span><br><span class=\"line\">                ans=<span class=\"built_in\">max</span>(ans,h*(r-l<span class=\"number\">-1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最大矩形\">最大矩形</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=matrix.<span class=\"built_in\">size</span>(); <span class=\"comment\">//行数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> m=matrix[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); <span class=\"comment\">//列数</span></span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">left</span>(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m,<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(matrix[i][j]==<span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    left[i][j]=(j==<span class=\"number\">0</span>?<span class=\"number\">1</span>:left[i][j<span class=\"number\">-1</span>]<span class=\"number\">+1</span>); <span class=\"comment\">//往左能够延申的最大长度</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//对于每一列，使用基于柱状图求最大矩形的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">up</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">down</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">            stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; </span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;left[s.<span class=\"built_in\">top</span>()][j]&gt;=left[i][j])&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                up[i]=s.<span class=\"built_in\">empty</span>()?<span class=\"number\">-1</span>:s.<span class=\"built_in\">top</span>(); <span class=\"comment\">//上边第一个小于的编号</span></span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s=<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt;();<span class=\"comment\">//清空栈</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;left[s.<span class=\"built_in\">top</span>()][j]&gt;=left[i][j])&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                down[i]=s.<span class=\"built_in\">empty</span>()?n:s.<span class=\"built_in\">top</span>(); <span class=\"comment\">//下边第一个小于的编号</span></span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> width=down[i]-up[i]<span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> area=width*left[i][j];</span><br><span class=\"line\">                ret=<span class=\"built_in\">max</span>(ret,area);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"统计全-1-子矩形\">统计全 1 子矩形</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubmat</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=mat.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=mat[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">height</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/*单调栈求左右更小值(同时处理)*/</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> calc=[&amp;]()-&gt;<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">left</span>(m,<span class=\"number\">-1</span>),<span class=\"built_in\">right</span>(m,m);</span><br><span class=\"line\"> </span><br><span class=\"line\">            stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;height[s.<span class=\"built_in\">top</span>()]&gt;height[i])&#123;</span><br><span class=\"line\">                    right[s.<span class=\"built_in\">top</span>()]=i;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                    left[i]=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">/* 计算结果时, 乘法原理 * 矩阵高度 */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                ans+=(right[i]-i)*(i-left[i])*height[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; <span class=\"comment\">/* 遍历每一行的高度, 更新改行的高度值使用单调栈计算左侧更小值和右侧更小值,再计算每个小矩阵出现的次数*/</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mat[i][j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    height[j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    height[j]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans+=<span class=\"built_in\">calc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接雨水\">接雨水</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">trap</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=height.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; height[s.<span class=\"built_in\">top</span>()]&lt;height[i]) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> top = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> left = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> currWidth = i - left - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> currHeight = <span class=\"built_in\">min</span>(height[left], height[i]) - height[top];</span><br><span class=\"line\">                ans += currWidth * currHeight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/***** 不能单纯找左边第一个大、右边第一个大 *****/</span></span><br><span class=\"line\"><span class=\"comment\">/*这种情况会多算</span></span><br><span class=\"line\"><span class=\"comment\">*   *</span></span><br><span class=\"line\"><span class=\"comment\">** **</span></span><br><span class=\"line\"><span class=\"comment\">** **</span></span><br><span class=\"line\"><span class=\"comment\">*****</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1>最小字典序</h1>\n<h2 id=\"移掉-K-位数字\">移掉 K 位数字</h2>\n","tags":["编程","单调栈","c++"]},{"title":"基于VirtualBox虚拟机安装Ubuntu教程","url":"/2024/10/17/%E5%9F%BA%E4%BA%8EVirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Ubuntu%E6%95%99%E7%A8%8B/","content":"<h2 id=\"下载安装VirtualBox\">下载安装VirtualBox</h2>\n<p>官网下载VirtualBox，目前版本：VirtualBox 5.1.8 for Windows hosts x86/amd64<br>\n下载好了安装VirtualBox，一路Next就可以了,这个比较简单。<br>\n运行VirtulBox程序, 如下图：<br>\n配置VirtualBox。按 CTRL+G打开全局设定，根据需要可以设定虚拟脑位置和界面语言：</p>\n<p>修改默认虚拟脑位置比如D:\\myvbvms可以让自己更方便的查找，备份安装好的虚拟机。</p>\n<h2 id=\"安装-Ubuntu\">安装 Ubuntu</h2>\n<h3 id=\"创建虚拟机\">创建虚拟机</h3>\n<ol>\n<li>运行VirtulBox程序，点击“新建”按钮，新建一个虚拟机。</li>\n<li>虚拟机名称可以随意输入，示例：rocedu。操作系统选择Linux，版本选择ubuntu。点击“下一步”。</li>\n<li>设定虚拟机的内存，此内存即为虚拟机所占用的系统内存，可随意修改，建议不要超过系统内存的1/2。<br>\n首先了解自己的笔记本电脑系统内存大小，“我的电脑”-&gt;“属性”。样机为16G。<br>\n为了方便以后编程学习使用，这里将虚拟内存设为4G。点击“下一步”。</li>\n<li>为虚拟机创建一块虚拟硬盘。选择“现在创建虚拟硬盘”，并单击“创建”。</li>\n</ol>\n<h3 id=\"安装-Ubuntu-系统软件\">安装 Ubuntu 系统软件</h3>\n<p>在虚拟机上安装Ubuntu和在真实机器上安装没有大的差别。</p>\n","tags":["教程","Ubuntu"]},{"title":"图论算法做题总结","url":"/2024/10/07/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/","content":""},{"title":"我的21岁","url":"/2024/11/29/%E6%88%91%E7%9A%8421%E5%B2%81/","content":"<p>恍恍惚惚已经来到这个世界上20个年头，这段时期里有高光也有低谷，感恩过去，拥抱未来，希望在今后心态和能力都要提升，更加成熟一点。无事绊心弦，随缘皆所念。</p>\n<center>\n<img src=\"https://s2.loli.net/2024/11/29/Fh43SXJnB8y1Y5C.jpg\" width=\"100%\" />\n<p>Figure 1</p>\n</center>\n<p>和室友聚餐庆祝一下。</p>\n<center>\n<img src=\"https://s2.loli.net/2024/11/29/mn7x5To8t9VAEwY.jpg\" width=\"100%\" />\n<p>Figure 2</p>\n</center>\n","tags":["生日"]},{"title":"数值计算方法","url":"/2024/10/08/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/","content":"<h2 id=\"插值法\">插值法</h2>\n<p><strong>实现范德蒙德多项式插值、拉格朗日插值、牛顿插值、分段线性、分段三次 Hermite 插值，并完成各方法之间的对比。</strong><br>\n<font color=red>输入</font>：插值区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>e</mi><mo separator=\"true\">,</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">c, d, e, f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 作为标准函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mi>d</mi><mi>x</mi><mo>+</mo><mi>e</mi><mo>⋅</mo><mi>cos</mi><mo>⁡</mo><mi>f</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = c \\cdot \\sin dx + e \\cdot \\cos fx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mop\">sin</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">cos</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">x</span></span></span></span> 的值，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 作为采样点的个数，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 作为实验点的个数。<br>\n<font color=red>要求</font>：在区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> 上均匀采集个采集点，利用这 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 个采集点，分别使用范德蒙德多项式插值、拉格朗日插值、牛顿插值、分段线性、分段三次 Hermite 插值进行插值，求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，之后再选取 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 个点作为实验点，计算在这 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 个实验点上插值函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 与目标函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 的平均误差。同时对比各插值方法之间的精度差异。<br>\n<font color=red>输出</font>：对比函数曲线，平均误差。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 范德蒙德多项式插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">vandermonde_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    coefficients = []</span><br><span class=\"line\">    c = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        coeff = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            coeff.append(x[i]**j)</span><br><span class=\"line\">        coefficients.append(coeff)</span><br><span class=\"line\">        c.append(y[i])</span><br><span class=\"line\">    A = np.array(coefficients)</span><br><span class=\"line\">    inv_A = np.linalg.inv(A)</span><br><span class=\"line\">    a = inv_A.dot(c)</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"built_in\">sum</span> += a[i] * x_values ** i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉格朗日插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lagrange_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        p = y[i]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j != i:</span><br><span class=\"line\">                p *= (x_values - x[j]) / (x[i] - x[j])</span><br><span class=\"line\">        result += p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 牛顿插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">newton_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    coefficients = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        divided_diff = (y[i] - y[i-<span class=\"number\">1</span>]) / (x[i] - x[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">        coefficients.append(divided_diff)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-i-<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            divided_diff = (-divided_diff + coefficients[j-<span class=\"number\">1</span>]) / (x[n-j] - x[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">            coefficients[j-<span class=\"number\">1</span>] = divided_diff</span><br><span class=\"line\">    coefficients.append(y[<span class=\"number\">0</span>])</span><br><span class=\"line\">    result = coefficients[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        result = result * (x_values - x[i]) + coefficients[n-<span class=\"number\">1</span>-i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分段线性插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">piecewise_linear_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>):</span><br><span class=\"line\">        mask = (x[i] &lt;= x_values) &amp; (x_values &lt; x[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">        slope = (y[i+<span class=\"number\">1</span>] - y[i]) / (x[i+<span class=\"number\">1</span>] - x[i])</span><br><span class=\"line\">        result += ((y[i] + slope * (x_values - x[i]))*mask)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x_values == x[n-<span class=\"number\">1</span>]):</span><br><span class=\"line\">        result = y[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分段三次Hermite插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">piecewise_cubic_hermite_interpolation</span>(<span class=\"params\">x, y, yy, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x[i] &lt;= x_values) &amp; (x_values &lt; x[i+<span class=\"number\">1</span>])):</span><br><span class=\"line\">            ai = (<span class=\"number\">1</span>+<span class=\"number\">2</span>*(x_values-x[i])/(x[i+<span class=\"number\">1</span>]-x[i]))*((x_values-x[i+<span class=\"number\">1</span>])/(x[i]-x[i+<span class=\"number\">1</span>]))**<span class=\"number\">2</span></span><br><span class=\"line\">            bi = (x_values - x[i])*((x_values-x[i+<span class=\"number\">1</span>])/(x[i]-x[i+<span class=\"number\">1</span>]))**<span class=\"number\">2</span></span><br><span class=\"line\">            ai1 = (<span class=\"number\">1</span>+<span class=\"number\">2</span>*(x_values-x[i+<span class=\"number\">1</span>])/(x[i]-x[i+<span class=\"number\">1</span>]))*((x_values-x[i])/(x[i+<span class=\"number\">1</span>]-x[i]))**<span class=\"number\">2</span></span><br><span class=\"line\">            bi1 = (x_values - x[i+<span class=\"number\">1</span>])*((x_values-x[i])/(x[i+<span class=\"number\">1</span>]-x[i]))**<span class=\"number\">2</span></span><br><span class=\"line\">            result += (y[i] * ai +yy[i] * bi +y[i+<span class=\"number\">1</span>] * ai1 +yy[i+<span class=\"number\">1</span>] * bi1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x_values == x[n-<span class=\"number\">1</span>]):</span><br><span class=\"line\">        result = y[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目标函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_function</span>(<span class=\"params\">c,d,e,f,x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [(c*np.sin(d*val)+e*np.cos(f*val)) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> x] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目标函数导函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">derivative_function</span>(<span class=\"params\">c,d,e,f,x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [(c*d*np.cos(d*val)-e*f*np.sin(f*val)) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算平均误差</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compute_average_error</span>(<span class=\"params\">f, g, x_values</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>([<span class=\"built_in\">abs</span>(f[i] - g[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x_values))]) / <span class=\"built_in\">len</span>(x_values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置插值区间和参数</span></span><br><span class=\"line\">a = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">d = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">e = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">f = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">num_samples = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">num_experiments = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">x_values = [a + (b - a) * i / (num_samples - <span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_samples)]</span><br><span class=\"line\">ys = target_function(c,d,e,f,x_values)</span><br><span class=\"line\">yy = derivative_function(c,d,e,f,x_values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算实验点</span></span><br><span class=\"line\">experiment_points = [a + (b - a) * i / (num_experiments - <span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_experiments)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算各插值方法的插值结果和平均误差</span></span><br><span class=\"line\">vandermonde_interpolated = [vandermonde_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">vandermonde_error = compute_average_error(target_function(c,d,e,f,experiment_points), vandermonde_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">lagrange_interpolated = [lagrange_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">lagrange_error = compute_average_error(target_function(c,d,e,f,experiment_points), lagrange_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">newton_interpolated = [newton_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">newton_error = compute_average_error(target_function(c,d,e,f,experiment_points), newton_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">piecewise_linear_interpolated = [piecewise_linear_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">piecewise_linear_error = compute_average_error(target_function(c,d,e,f,experiment_points), piecewise_linear_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">piecewise_cubic_hermite_interpolated = [piecewise_cubic_hermite_interpolation(x_values, ys, yy, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">piecewise_cubic_hermite_error = compute_average_error(target_function(c,d,e,f,experiment_points), piecewise_cubic_hermite_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">fig = plt.figure(num = <span class=\"number\">1</span>,dpi = <span class=\"number\">120</span>)</span><br><span class=\"line\">ax = plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"comment\"># 坐标轴</span></span><br><span class=\"line\">ax = plt.gca()  <span class=\"comment\"># get current axis 获得坐标轴对象</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;right&#x27;</span>].set_color(<span class=\"string\">&#x27;none&#x27;</span>)  <span class=\"comment\"># 将右边 边沿线颜色设置为空 其实就相当于抹掉这条边</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;top&#x27;</span>].set_color(<span class=\"string\">&#x27;none&#x27;</span>)</span><br><span class=\"line\">ax.xaxis.set_ticks_position(<span class=\"string\">&#x27;bottom&#x27;</span>)</span><br><span class=\"line\">ax.yaxis.set_ticks_position(<span class=\"string\">&#x27;left&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置中心的为（0，0）的坐标轴</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;bottom&#x27;</span>].set_position((<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"number\">0</span>))  <span class=\"comment\"># 指定 data 设置的bottom(也就是指定的x轴)绑定到y轴的0这个点上</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;left&#x27;</span>].set_position((<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">x=<span class=\"built_in\">list</span>(np.arange(a,b,<span class=\"number\">0.01</span>))<span class=\"comment\">#此处可调整自变量取值范围，以便选择合适的观察尺度</span></span><br><span class=\"line\">y=[]</span><br><span class=\"line\">y1=[]</span><br><span class=\"line\">y2=[]</span><br><span class=\"line\">y3=[]</span><br><span class=\"line\">y4=[]</span><br><span class=\"line\">y5=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x)):</span><br><span class=\"line\">    y = target_function(c,d,e,f,x)</span><br><span class=\"line\">    y1.append(vandermonde_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y2.append(lagrange_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y3.append(newton_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y4.append(piecewise_linear_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y5.append(piecewise_cubic_hermite_interpolation(x_values, ys, yy, x[i]))</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">ax.plot(x,y,label = <span class=\"string\">&quot;Target Function&quot;</span>,color =<span class=\"string\">&quot;blueviolet&quot;</span>)</span><br><span class=\"line\">ax.plot(x_values,ys, marker = <span class=\"string\">&quot;*&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;blueviolet&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y1,label = <span class=\"string\">&quot;vandermonde interpolation\\n average error=%f&quot;</span>%vandermonde_error,color =<span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, vandermonde_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y2,label = <span class=\"string\">&quot;lagrange interpolation\\n average error=%f&quot;</span>%lagrange_error,color =<span class=\"string\">&quot;yellow&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, lagrange_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;yellow&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y3,label = <span class=\"string\">&quot;newton interpolation\\n average error=%f&quot;</span>%newton_error,color =<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, newton_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y4,label = <span class=\"string\">&quot;piecewise linear interpolation\\n average error=%f&quot;</span>%piecewise_linear_error,color =<span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, piecewise_linear_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y5,label = <span class=\"string\">&quot;piecewise cubic hermite interpolation\\n average error=%f&quot;</span>%piecewise_cubic_hermite_error,color =<span class=\"string\">&quot;purple&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, piecewise_cubic_hermite_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;purple&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#ax.set_xlim(0,2)</span></span><br><span class=\"line\"><span class=\"comment\">#plt.draw()</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数逼近\">函数逼近</h2>\n<p><strong>实现最佳平方逼近与最小二乘拟合，并完成两种方法之间的对比。</strong><br>\n<font color=red>输入</font>：函数区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 作为标准函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>c</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x)=\\frac{1}{1+cx^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>的值，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 作为所构造的逼近多项式的次数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k=1,2,3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> 。参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 作为采样点的个数，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 作为实验点的个数。<br>\n<font color=red>要求</font>：要求选用勒让德正交多项式作最佳平方逼近；在区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> 上均匀采集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个采集点，利用这 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 个采集点，计算采集点上的函数值，构造最小二乘拟合多项式函数。之后再选取 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 个点作为实验点，计算在这 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 个实验点上所构造的逼近函数与给定的目标函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 的平均误差。同时对比两种逼近方法之间的精度差异。<br>\n<font color=red>输出</font>：对比函数曲线，平均误差。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sympy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>]=[<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">qpow</span>(<span class=\"params\">a,n</span>):</span><br><span class=\"line\">    ans=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n!=<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n&amp;<span class=\"number\">1</span>:</span><br><span class=\"line\">            ans*=a</span><br><span class=\"line\">        a*=a</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">F</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    res = <span class=\"number\">1</span>/(<span class=\"number\">1</span>+c*x*x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cntpf</span>():</span><br><span class=\"line\">    t = symbols(<span class=\"string\">&#x27;t&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># (b-a)*t/2+(b+a)/2</span></span><br><span class=\"line\">    fp[<span class=\"number\">0</span>] = integrate(<span class=\"number\">1</span> / (<span class=\"number\">1</span> + c * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>) * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>)),(t, -<span class=\"number\">1</span>, <span class=\"number\">1</span>)).evalf()</span><br><span class=\"line\">    fp[<span class=\"number\">1</span>] = integrate((<span class=\"number\">1</span> / (<span class=\"number\">1</span> + c * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>) * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>))) * (t),(t, -<span class=\"number\">1</span>, <span class=\"number\">1</span>)).evalf()</span><br><span class=\"line\">    fp[<span class=\"number\">2</span>] = integrate((<span class=\"number\">1</span> / (<span class=\"number\">1</span> + c * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>) * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>))) * (<span class=\"number\">3</span> * t * t / <span class=\"number\">2</span> - <span class=\"number\">1</span> / <span class=\"number\">2</span>),(t, -<span class=\"number\">1</span>, <span class=\"number\">1</span>)).evalf()</span><br><span class=\"line\">    fp[<span class=\"number\">3</span>] = integrate((<span class=\"number\">1</span> / (<span class=\"number\">1</span> + c * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>) * ((b - a) * t / <span class=\"number\">2</span> + (b + a) / <span class=\"number\">2</span>))) * (<span class=\"number\">5</span> * t * t * t / <span class=\"number\">2</span> - <span class=\"number\">3</span> * t / <span class=\"number\">2</span>),(t, -<span class=\"number\">1</span>, <span class=\"number\">1</span>)).evalf()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bsa</span>(<span class=\"params\">inp</span>):</span><br><span class=\"line\">    res=<span class=\"number\">0</span></span><br><span class=\"line\">    inp =(<span class=\"number\">2</span> * inp -a - b) / (b - a)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,k):</span><br><span class=\"line\">        res+=(<span class=\"number\">2</span>*i+<span class=\"number\">1</span>)*fp[i]*qpow(inp,i)/<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">setup</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">100</span>):</span><br><span class=\"line\">        vispa[i]=<span class=\"number\">0</span></span><br><span class=\"line\">        vispb[i]=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">initx</span>():</span><br><span class=\"line\">    d=(b-a)/n</span><br><span class=\"line\">    x[<span class=\"number\">0</span>]=a</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">        x[i]=x[i-<span class=\"number\">1</span>]+d</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compa</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> vispa[i]==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  pa[i]</span><br><span class=\"line\">    up=<span class=\"number\">0</span></span><br><span class=\"line\">    down=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):</span><br><span class=\"line\">        up+=comP(i-<span class=\"number\">1</span>,x[j])*comP(i-<span class=\"number\">1</span>,x[j])*x[j]</span><br><span class=\"line\">        down += comP(i - <span class=\"number\">1</span>, x[j]) * comP(i - <span class=\"number\">1</span>, x[j])</span><br><span class=\"line\">    res=up/down</span><br><span class=\"line\">    vispa[i] = <span class=\"number\">1</span></span><br><span class=\"line\">    pa[i] = res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compb</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> vispb[i]==<span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pb[i]</span><br><span class=\"line\">    up = <span class=\"number\">0</span></span><br><span class=\"line\">    down = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, n):</span><br><span class=\"line\">        up += comP(i, x[j]) * comP(i, x[j])</span><br><span class=\"line\">        down += comP(i - <span class=\"number\">1</span>, x[j]) * comP(i - <span class=\"number\">1</span>, x[j])</span><br><span class=\"line\">    res=up/down</span><br><span class=\"line\">    vispb[i] = <span class=\"number\">1</span></span><br><span class=\"line\">    pb[i] = res</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">comP</span>(<span class=\"params\">i,inp</span>):</span><br><span class=\"line\">    res=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>:</span><br><span class=\"line\">        res=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i==<span class=\"number\">1</span>:</span><br><span class=\"line\">        res = (inp -compa(<span class=\"number\">1</span>))*comP(<span class=\"number\">0</span>, inp)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        res = (inp -compa(i))*comP(i - <span class=\"number\">1</span>, inp)-compb(i - <span class=\"number\">1</span>) * comP(i - <span class=\"number\">2</span>, inp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lsf</span>(<span class=\"params\">inp</span>):</span><br><span class=\"line\">    initx()</span><br><span class=\"line\">    res=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,k):</span><br><span class=\"line\">        up=<span class=\"number\">0</span></span><br><span class=\"line\">        down=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):</span><br><span class=\"line\">            up += F(x[j]) * comP(i, x[j])</span><br><span class=\"line\">            down += comP(i, x[j]) * comP(i, x[j])</span><br><span class=\"line\">        res += comP(i, inp)*up / down</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bsaerror</span>(<span class=\"params\">inp</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(bsa(inp)-F(inp))</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lsferror</span>(<span class=\"params\">inp</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(lsf(inp)-F(inp))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#全局变量</span></span><br><span class=\"line\">x=[<span class=\"literal\">None</span>]*<span class=\"number\">200</span></span><br><span class=\"line\">fp=[<span class=\"literal\">None</span>]*<span class=\"number\">50</span></span><br><span class=\"line\">vispa=[<span class=\"number\">0</span>]*<span class=\"number\">100</span></span><br><span class=\"line\">vispb=[<span class=\"number\">0</span>]*<span class=\"number\">100</span></span><br><span class=\"line\">pa=[<span class=\"literal\">None</span>]*<span class=\"number\">200</span></span><br><span class=\"line\">pb=[<span class=\"literal\">None</span>]*<span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主函数段</span></span><br><span class=\"line\">a, b, c = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入a,b,c: &quot;</span>).split())</span><br><span class=\"line\">n , k = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入n,k: &quot;</span>).split())</span><br><span class=\"line\">m=<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入测试组数：&quot;</span>)</span><br><span class=\"line\">tst = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入测试用例：&quot;</span>).split()</span><br><span class=\"line\"></span><br><span class=\"line\">setup() <span class=\"comment\">#初始化fp数组</span></span><br><span class=\"line\">cntpf() <span class=\"comment\">#初始化fp数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">bsax=<span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(a),<span class=\"built_in\">int</span>(b))</span><br><span class=\"line\">bsay=[]</span><br><span class=\"line\">bsae=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bsax:</span><br><span class=\"line\">    bsay.append(bsa(i))</span><br><span class=\"line\">    </span><br><span class=\"line\">lsfx=<span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(a),<span class=\"built_in\">int</span>(b))</span><br><span class=\"line\">lsfy=[]</span><br><span class=\"line\">lsfe=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lsfx:</span><br><span class=\"line\">    lsfy.append(lsf(i))</span><br><span class=\"line\">    </span><br><span class=\"line\">nx=<span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(a),<span class=\"built_in\">int</span>(b))</span><br><span class=\"line\">ny=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nx:</span><br><span class=\"line\">    ny.append(F(i))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tst:</span><br><span class=\"line\">    bsae+=bsaerror(<span class=\"built_in\">float</span>(i))</span><br><span class=\"line\">    lsfe+=lsferror(<span class=\"built_in\">float</span>(i))</span><br><span class=\"line\">bsae/=<span class=\"built_in\">float</span>(m)</span><br><span class=\"line\">lsfe/=<span class=\"built_in\">float</span>(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;最佳平方逼近的平均误差为%f&#x27;</span>%bsae)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;最小二乘拟合的平均误差为%f&#x27;</span>%lsfe)</span><br><span class=\"line\">plt.plot(bsax, bsay, label=<span class=\"string\">&#x27;最佳平方逼近&#x27;</span>, color=<span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">plt.plot(lsfx, lsfy, label=<span class=\"string\">&#x27;最小二乘拟合&#x27;</span>, color=<span class=\"string\">&#x27;blue&#x27;</span>)</span><br><span class=\"line\">plt.plot(nx, ny, label=<span class=\"string\">&#x27;原函数&#x27;</span>, color=<span class=\"string\">&#x27;orange&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;函数逼近对比函数&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h2 id=\"数值积分\">数值积分</h2>\n<p><strong>实现复化梯形公式和龙贝格算法计算积分，并完成两种方法之间的精度对比。</strong><br>\n<font color=red>输入</font>：函数区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span>，被积函数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msqrt><mi>x</mi></msqrt><mi>l</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f(x) =\\sqrt{x}lnx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span></span></span></span>，参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> 作为步长。参数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">ε</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> 作为要求满足的精度条件。<br>\n<font color=red>要求</font>：取不同的步长 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span>，要求用复化梯形公式和龙贝格算法分别计算积分值计算当精度达到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">ε</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> 时，所需要等分积分区间的次数（假设每次都是二等分）及 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> 的大小。当达到精度要求时，对比两种方法需要划分次数及步长 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> 的大小。<br>\n<font color=red>输出</font>：数值积分计算结果，划分次数，步长 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> 的大小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\">#初始化变量</span></span><br><span class=\"line\">vis = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)] <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)]</span><br><span class=\"line\">T = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)] <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    res=math.sqrt(x)*math.log(x,math.e)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">F</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    x3=x*x*x</span><br><span class=\"line\">    res=<span class=\"number\">2</span>*math.log(x,math.e)*math.sqrt(x3)/<span class=\"number\">3</span>-<span class=\"number\">4</span>*math.sqrt(x3)/<span class=\"number\">9</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用牛顿莱布尼茨公式直接积分</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Fitg</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    res=F(b)-F(a)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用复合梯形求积公式直接积分</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ctqf</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    h=(b-a)/n</span><br><span class=\"line\">    res=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        res+=f(a+k*h)+f(a+(k+<span class=\"number\">1</span>)*h)</span><br><span class=\"line\">    res=res*h/<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#计算T的值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cntT</span>(<span class=\"params\">m,k</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[m][k]==<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> T[m][k]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        vis[m][k] == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m==<span class=\"number\">0</span> <span class=\"keyword\">and</span> k==<span class=\"number\">0</span>):</span><br><span class=\"line\">            T[m][k]=(b-a)*(f(a)+f(b))/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span>(m==<span class=\"number\">0</span>):</span><br><span class=\"line\">            n=<span class=\"number\">1</span>&lt;&lt;(k-<span class=\"number\">1</span>)</span><br><span class=\"line\">            h=(b-a)/n</span><br><span class=\"line\">            sm=<span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                sm+=f(a+(<span class=\"number\">2</span>*i+<span class=\"number\">1</span>)*h/<span class=\"number\">2</span>)</span><br><span class=\"line\">            sm=sm*h/<span class=\"number\">2</span></span><br><span class=\"line\">            T[m][k]=cntT(m,k-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+sm</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            fourm=math.<span class=\"built_in\">pow</span>(<span class=\"number\">4</span>,m)</span><br><span class=\"line\">            T[m][k]=fourm*cntT(m-<span class=\"number\">1</span>,k+<span class=\"number\">1</span>)/(fourm-<span class=\"number\">1</span>)-cntT(m-<span class=\"number\">1</span>,k)/(fourm-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T[m][k]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用龙贝格积分求积</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Romberg</span>(<span class=\"params\">m</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cntT(m,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a,b =<span class=\"built_in\">map</span>(<span class=\"built_in\">float</span>,<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入积分区间a,b: &quot;</span>).split())</span><br><span class=\"line\">e=<span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入精度条件e: &quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1000</span>):</span><br><span class=\"line\">    n=<span class=\"number\">1</span>&lt;&lt;k</span><br><span class=\"line\">    eps=<span class=\"built_in\">abs</span>(ctqf(n)-Fitg(a,b))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eps&lt;e):</span><br><span class=\"line\">        h=(b-a)/n</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;复合梯形求积公式的计算结果为：%f&#x27;</span>%(ctqf(n)))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;划分次数为：%d&#x27;</span>%(k))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;步长为：%f&#x27;</span> % (h))</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">1000</span>):</span><br><span class=\"line\">    n=<span class=\"number\">1</span>&lt;&lt;k</span><br><span class=\"line\">    eps=<span class=\"built_in\">abs</span>(Romberg(k)-Romberg(k-<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eps&lt;e):</span><br><span class=\"line\">        h=(b-a)/n</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;龙贝格求积公式的计算结果为：%f&#x27;</span>%(Romberg(k)))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;划分次数为：%d&#x27;</span>%(k))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;步长为：%f&#x27;</span> % (h))</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"线性方程组的直接解法\">线性方程组的直接解法</h2>\n<p><strong>1. 编写列主元消元法的通用程序。</strong><br>\n<font color=red>输入</font>：矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 和向量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>。<br>\n<font color=red>输出</font>：消元后的增广矩阵及方程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax=b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 的根值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>。<br>\n<font color=red>要求1</font>：选取进行测试，打印出上述程序的输出。<br>\n<font color=red>要求2</font>：随机生成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 阶（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>&gt;=20，具体值自定）方阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n*1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 维非零向量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，求解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>。</p>\n<p><strong>2. 编写使用LU分解法求解线性方程组的通用程序。</strong><br>\n<font color=red>输入</font>：矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 和向量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>。<br>\n<font color=red>输出</font>：对矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 进行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">LU</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">LU</span></span></span></span> 分解后的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，以及方程组的根值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>。<br>\n<font color=red>要求1</font>：选取进行测试，打印输出结果。<br>\n<font color=red>要求2</font>：随机生成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 阶（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>&gt;=20，具体值自定）方阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n*1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 维非零向量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，求解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> inA[maxn][maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> A[maxn][maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> L[maxn][maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> U[maxn][maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> ans[maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> ansy[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Pivot</span><span class=\"params\">()</span></span>;<span class=\"comment\">//列主元消元法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">copyA</span><span class=\"params\">()</span></span>;<span class=\"comment\">//将输入矩阵复制给A</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printA</span><span class=\"params\">()</span></span>;<span class=\"comment\">//打印矩阵A</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printb</span><span class=\"params\">()</span></span>;<span class=\"comment\">//打印向量b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exc</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>;<span class=\"comment\">//交换行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Minus</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">double</span> mult)</span></span>;<span class=\"comment\">//第j行减第i行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printans</span><span class=\"params\">()</span></span>;<span class=\"comment\">//打印答案</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LU</span><span class=\"params\">()</span></span>;<span class=\"comment\">//LU分解法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iscorrect</span><span class=\"params\">()</span></span>;<span class=\"comment\">//回代判断答案是否正确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">gerandom</span><span class=\"params\">(<span class=\"type\">double</span> a,<span class=\"type\">double</span> b)</span></span>;<span class=\"comment\">//生成a到bdouble类型的随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">     cout&lt;&lt;<span class=\"string\">&quot;please input T :&quot;</span>;</span><br><span class=\"line\">     cin&gt;&gt;T;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;please input n :&quot;</span>;</span><br><span class=\"line\">         cin &gt;&gt; n;</span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;enter 1 if you want to use your own input or 2 if you want your input to be random&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">         <span class=\"type\">int</span> cho;</span><br><span class=\"line\">         cin&gt;&gt;cho;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (cho == <span class=\"number\">1</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             cout &lt;&lt; <span class=\"string\">&quot;please input matrix A :&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     cin &gt;&gt; inA[i][j];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             cout &lt;&lt; <span class=\"string\">&quot;please input vector b :&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 cin &gt;&gt; inA[i][n + <span class=\"number\">1</span>];</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> a,b;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;please input the range of the random number :&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                    inA[i][j]=<span class=\"built_in\">gerandom</span>(a,b);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                inA[i][n + <span class=\"number\">1</span>]=<span class=\"built_in\">gerandom</span>(a,b);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         cout &lt;&lt; <span class=\"string\">&quot;enter 1-Pivot or 2-LU:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">         cin&gt;&gt;cho;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(cho==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">Pivot</span>();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">LU</span>();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">printans</span>();</span><br><span class=\"line\">         <span class=\"built_in\">iscorrect</span>();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            cout&lt;&lt;inA[i][j]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">copyA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n<span class=\"number\">+1</span>;j++)&#123;</span><br><span class=\"line\">            A[i][j]=inA[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exc</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=n<span class=\"number\">+1</span>;k++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(A[i][k],A[j][k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Minus</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">double</span> mult)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=n<span class=\"number\">+1</span>;k++)&#123;</span><br><span class=\"line\">        A[j][k]-=A[i][k]*mult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printans</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;ans[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Pivot</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">copyA</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t=<span class=\"number\">1</span>;t&lt;=n<span class=\"number\">-1</span>;t++)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> nman=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxi=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> tp=<span class=\"built_in\">abs</span>(A[i][t]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tp&gt;=nman)&#123;</span><br><span class=\"line\">                maxi=i;</span><br><span class=\"line\">                nman=tp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">exc</span>(t,maxi);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=t<span class=\"number\">+1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> multi=A[i][t]/A[t][t];</span><br><span class=\"line\">            <span class=\"built_in\">Minus</span>(t,i,multi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t=n;t&gt;=<span class=\"number\">1</span>;t--)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> right=A[t][n<span class=\"number\">+1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=n;j&gt;t;j--)&#123;</span><br><span class=\"line\">            right-=A[t][j]*ans[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[t]=right/A[t][t];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iscorrect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tag=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> myans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            myans+=inA[i][j]*ans[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(myans-inA[i][n<span class=\"number\">+1</span>])&gt;=<span class=\"number\">1e-4</span>)&#123;</span><br><span class=\"line\">            tag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tag)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;answer is correct!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;answer is wrong!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LU</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">copyA</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        U[<span class=\"number\">1</span>][i]=A[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">        L[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        L[i][<span class=\"number\">1</span>]=A[i][<span class=\"number\">1</span>]/U[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> r=<span class=\"number\">2</span>;r&lt;=n;r++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=r;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> tplu=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=r<span class=\"number\">-1</span>;k++)&#123;</span><br><span class=\"line\">                tplu+=L[r][k]*U[k][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            U[r][i]=A[r][i]-tplu;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r!=n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=r<span class=\"number\">+1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">double</span> tplu=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=r<span class=\"number\">-1</span>;k++)&#123;</span><br><span class=\"line\">                    tplu+=L[i][k]*U[k][r];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                L[i][r]=(A[i][r]-tplu)/U[r][r];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ansy[<span class=\"number\">1</span>]=A[<span class=\"number\">1</span>][n<span class=\"number\">+1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> tply=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=i<span class=\"number\">-1</span>;k++)&#123;</span><br><span class=\"line\">            tply+=L[i][k]*ansy[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ansy[i]=A[i][n<span class=\"number\">+1</span>]-tply;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans[n]=ansy[n]/U[n][n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">1</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> tpux=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i<span class=\"number\">+1</span>;k&lt;=n;k++)&#123;</span><br><span class=\"line\">            tpux+=U[i][k]*ans[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[i]=(ansy[i]-tpux)/U[i][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">gerandom</span><span class=\"params\">(<span class=\"type\">double</span> a,<span class=\"type\">double</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> random_device rd;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> mt19937 <span class=\"title\">gen</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\">    <span class=\"function\">uniform_real_distribution&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dis</span><span class=\"params\">(a, b)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dis</span>(gen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线性方程组的迭代解法\">线性方程组的迭代解法</h2>\n<p><strong>1. 编写高斯-塞德尔迭代和SOR迭代的通用程序。</strong><br>\n<font color=red>输入</font>：矩阵A和向量b，迭代初值x0，迭代最大步数K，误差控制。对于超松弛迭代，还需输入松弛因子。<br>\n<font color=red>输出</font>：迭代步数及方程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">Ax=b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 的根值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">x^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>。<br>\n<font color=red>要求</font>：<br>\n(1)选取进行测试，取初值x<sup>(0)</sup>=0，误差控制=10<sup>-8</sup>，打印出两种迭代方法的输出。<br>\n(2)取松弛因子 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mfrac><mi>i</mi><mn>50</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">=\\frac{i}{50}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2007em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8557em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">50</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>=1,2,…99,打印迭代步数，并给出一个最佳值。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> a[maxn][maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> b[maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> xk[maxn];</span><br><span class=\"line\"><span class=\"type\">double</span> xk1[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> K;</span><br><span class=\"line\"><span class=\"type\">double</span> w;</span><br><span class=\"line\"><span class=\"type\">double</span> eps;</span><br><span class=\"line\"><span class=\"type\">double</span> mf;</span><br><span class=\"line\"><span class=\"type\">double</span> nstep;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setxk0</span><span class=\"params\">()</span></span>;<span class=\"comment\">//初始化xk0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movk</span><span class=\"params\">()</span></span>;<span class=\"comment\">//将xk1赋值给xk</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cntloss</span><span class=\"params\">()</span></span>;<span class=\"comment\">//计算detx</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SOR</span><span class=\"params\">(<span class=\"type\">double</span> w)</span></span>;<span class=\"comment\">//超松弛迭代法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printx</span><span class=\"params\">()</span></span>;<span class=\"comment\">//打印x</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iscorrect</span><span class=\"params\">()</span></span>;<span class=\"comment\">//回代验证答案是否正确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;input max step K : &quot;</span>;</span><br><span class=\"line\">    cin&gt;&gt;K;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;input eps  : &quot;</span>;</span><br><span class=\"line\">    cin&gt;&gt;eps;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;input the size of A  : &quot;</span>;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;matrix A :&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;a[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;vector b :&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;enter 1 if you want to test one w&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;or 2 if you want to find the best w&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;enter : &quot;</span>;</span><br><span class=\"line\">    cin&gt;&gt;mf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mf==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;input Relaxation factor w  : &quot;</span>;</span><br><span class=\"line\">        cin&gt;&gt;w;</span><br><span class=\"line\">        <span class=\"built_in\">SOR</span>(w);</span><br><span class=\"line\">        <span class=\"built_in\">printx</span>();</span><br><span class=\"line\">        <span class=\"built_in\">iscorrect</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> bst=K<span class=\"number\">+1</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> bsw=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">99</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> ii = (<span class=\"type\">double</span>)i;</span><br><span class=\"line\">            <span class=\"type\">double</span> nw=ii/(<span class=\"type\">double</span>)<span class=\"number\">50</span>;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;now i is &quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"built_in\">SOR</span>(nw);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nstep&lt;bst)&#123;</span><br><span class=\"line\">                bst = nstep;</span><br><span class=\"line\">                bsw=nw;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;the best w is &quot;</span>&lt;&lt;bsw&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setxk0</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        xk[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">movk</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        xk[i]=xk1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cntloss</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> tp = <span class=\"built_in\">abs</span>(xk1[i]-xk[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tp&gt;res)&#123;</span><br><span class=\"line\">            res = tp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printx</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;xk1[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">iscorrect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            s+=a[i][j]*xk1[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(s-b[i])&gt;<span class=\"number\">1e-3</span>)&#123;</span><br><span class=\"line\">            flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;answer is correct!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;answer is wrong!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SOR</span><span class=\"params\">(<span class=\"type\">double</span> w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setxk0</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> step=<span class=\"number\">1</span>;step&lt;=K;step++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> s1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> s2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=i<span class=\"number\">-1</span>;j++)&#123;</span><br><span class=\"line\">                s1+=a[i][j]*xk1[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class=\"line\">                s2+=a[i][j]*xk[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            xk1[i]=xk[i]+w*(b[i]-s1-s2)/a[i][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">cntloss</span>()&lt;eps)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mf==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                nstep = step;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;the step is &quot;</span>&lt;&lt;step&lt;&lt;endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">movk</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"非线性方程（组）的数值解法\">非线性方程（组）的数值解法</h2>\n<p><strong>1. 编写不动点迭代、斯特芬森加速迭代和牛顿迭代的通用程序。</strong><br>\n<font color=red>要求</font>：<br>\n(1)设计一种不动点迭代格式，求解函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>2</mn><mo>−</mo><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">f(x)=x^2-3x+2-e^x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>10</mn><mi>x</mi><mo>−</mo><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">g(x)=x^3+2x^2+10x-20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">10</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span> 的根，要求该迭代格式收敛。然后再使用斯特芬森加速迭代，计算到 |x<sub>k</sub>-x<sub>k-1</sub>|&lt;10<sup>-8</sup> 为止。<br>\n(2)用牛顿迭代，同样计算到 |x<sub>k</sub>-x<sub>k-1</sub>|&lt;10<sup>-8</sup> 。输出迭代初值、迭代次数及各次迭代值，比较方法优劣。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>2. 本章计算实习题3。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["数值计算方法","实验记录","Python"]},{"title":"计算机网络实践记录","url":"/2024/09/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/","content":"<hr>\n<ul>\n<li>天津大学 2024 计算机网络 TCP 课程实践</li>\n<li>Lab Member：海棠未雨，梨花先雪</li>\n<li>最终成绩 +∞ 分捏 😋</li>\n</ul>\n<hr>\n<h1>文件结构说明</h1>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">tju<span class=\"emphasis\">_tcp ----------------- 项目根目录 </span></span><br><span class=\"line\"><span class=\"emphasis\">├─ build ---------------- 存放所有编译的中间文件</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ kernel.o</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ tju_</span>packet.o  </span><br><span class=\"line\">│  └─ tju<span class=\"emphasis\">_tcp.o</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ inc ------------------ 存放所有头文件</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ global.h ---------- 定义一些全局都会用到的变量和结构</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ kernel.h ---------- 模拟一部分linux内核行为 比如如何发送数据到下一层 根据五元组查找socket等</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ tju_</span>packet.h ------ 定义TCP所用到的数据包格式 提供各种数据包的操作(创建 获得字段等)</span><br><span class=\"line\">│  └─ tju<span class=\"emphasis\">_tcp.h --------- 需要实现的TCP的各种结构和功能的定义</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ src ------------------ 存放所有源代码文件</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ client.c ---------- 客户端主函数实现</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ server.c ---------- 服务端主函数实现</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ kernel.c ---------- 虚拟内核实现</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ tju_</span>packet.c ------ 可靠层包封装实现</span><br><span class=\"line\">│  └─ tju<span class=\"emphasis\">_tcp.c --------- 可靠层实现</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ Makefile ------------- 生成脚本</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ README.md ------------ 文件说明</span></span><br><span class=\"line\"><span class=\"emphasis\">└─ bin</span></span><br><span class=\"line\"><span class=\"emphasis\">   ├─ client</span></span><br><span class=\"line\"><span class=\"emphasis\">   └─ server</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1>系统环境信息</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">neofetch</span><br><span class=\"line\">--------------</span><br><span class=\"line\">OS: Ubuntu 20.04.2 LTS x86_64</span><br><span class=\"line\">Host: Oracle Corporation VirtualBox</span><br><span class=\"line\">Kernel: 5.4.0-80-generic</span><br><span class=\"line\">Uptime: 3 mins</span><br><span class=\"line\">Packages: 676 (dpkg), 4 (snap)</span><br><span class=\"line\">Shell: bash 5.0.17</span><br><span class=\"line\">Resolution: 800x600</span><br><span class=\"line\">Terminal: /dev/pts/0</span><br><span class=\"line\">CPU: 11th Gen Intel i7-11800H (2) @ 2.304GHz</span><br><span class=\"line\">GPU: VirtualBox Graphics Adapter</span><br><span class=\"line\">Memory: 294MiB / 981MiB</span><br></pre></td></tr></table></figure>\n<hr>\n<h1>具体实验记录</h1>\n<h2 id=\"连接管理\">连接管理</h2>\n<center>\n<img src=\"https://s2.loli.net/2024/10/11/t2LOxSBZgRkiblj.png\" width=\"60%\" />\n</center>\n<h3 id=\"三次握手建立连接\">三次握手建立连接</h3>\n<p><strong>1. tju_connect( )</strong><br>\n<code>tju_connect( )</code>函数是三次握手的开端。在该函数中，客户端的sock绑定好本地的ip和port后向服务器端发送SYN包，同时把当前的状态变化为SYN_SENT。成功建立连接后将sock放入ESTABLISHED的hash表中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_connect</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, tju_sock_addr target_addr)</span>&#123;</span><br><span class=\"line\">    sock-&gt;established_remote_addr = target_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    tju_sock_addr local_addr;</span><br><span class=\"line\">    local_addr.ip = inet_network(CLIENT_IP);</span><br><span class=\"line\">    local_addr.port = <span class=\"number\">5678</span>; <span class=\"comment\">// 连接方进行connect连接的时候 内核中是随机分配一个可用的端口</span></span><br><span class=\"line\">    sock-&gt;established_local_addr = local_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里也不能直接建立连接 需要经过三次握手</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际在linux中 connect调用后 会进入一个while循环</span></span><br><span class=\"line\">    <span class=\"comment\">// 循环跳出的条件是socket的状态变为ESTABLISHED 表面看上去就是 正在连接中 阻塞</span></span><br><span class=\"line\">    <span class=\"comment\">// 而状态的改变在别的地方进行 在我们这就是tju_handle_packet</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> seq = <span class=\"number\">0</span>;  <span class=\"comment\">// 序列号</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ack = <span class=\"number\">0</span>;  <span class=\"comment\">// 确认号</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> flag=SYN_FLAG_MASK; <span class=\"comment\">//flag标记为：连接状态进行到哪一步</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *SYN = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    sendToLayer3(SYN, DEFAULT_HEADER_LEN); <span class=\"comment\">//客户端向服务器端发送同步报文--第一次握手</span></span><br><span class=\"line\">    change_sock_state(sock, SYN_SENT);</span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;client发送SYN\\n&quot;);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Timeout_retransmission(sock, ESTABLISHED, SYN, DEFAULT_HEADER_LEN); <span class=\"comment\">//阻塞等待，直到sock被建立</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hashval = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">    established_socks[hashval] = sock;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. Timeout_retransmission( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Timeout_retransmission</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">int</span> exp_state, <span class=\"type\">char</span>* pkt, <span class=\"type\">int</span> pktlen)</span> &#123; <span class=\"comment\">//超时重传发包函数</span></span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;bg1\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"type\">long</span> timeout = <span class=\"number\">100000L</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">start_time</span>, <span class=\"title\">end_time</span>;</span></span><br><span class=\"line\">    gettimeofday(&amp;start_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sock-&gt;state != exp_state)&#123;</span><br><span class=\"line\">        gettimeofday(&amp;end_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> Time = <span class=\"number\">1000000L</span> * (end_time.tv_sec - start_time.tv_sec) + (end_time.tv_usec - start_time.tv_usec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Time &gt;= timeout) &#123; <span class=\"comment\">//超时重传</span></span><br><span class=\"line\">            gettimeofday(&amp;start_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            sendToLayer3(pkt, pktlen);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;ed1\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. change_sock_state( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change_sock_state</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">int</span> state)</span> &#123;  <span class=\"comment\">//添加：sock状态改变</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;state_lock)) != <span class=\"number\">0</span>) ; <span class=\"comment\">//改变sock状态前先加锁</span></span><br><span class=\"line\">    sock-&gt;state = state;  </span><br><span class=\"line\">    pthread_mutex_unlock(&amp;(sock-&gt;state_lock)); <span class=\"comment\">//解锁</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. tju_accept()</strong><br>\n<code>tju_accept( )</code>函数中添加了一个阻塞，使得只有当全连接hash表中存在这一个sock，服务器端才算连接完成，才能把新的sock加入到ESTABLISHED的hash表中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">tju_tcp_t</span> *<span class=\"title function_\">tju_accept</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *listen_sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (listen_sock-&gt;received_len &lt; DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    <span class=\"type\">char</span> *header = <span class=\"built_in\">malloc</span>(DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(header, listen_sock-&gt;received_buf, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(listen_sock-&gt;received_buf, <span class=\"number\">0</span>, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    listen_sock-&gt;received_buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    listen_sock-&gt;received_len = listen_sock-&gt;received_len - DEFAULT_HEADER_LEN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">tju_tcp_t</span>* new_conn = (<span class=\"type\">tju_tcp_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">tju_tcp_t</span>));</span><br><span class=\"line\">    pthread_mutex_init(&amp;(new_conn-&gt;state_lock), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(new_conn, listen_sock, <span class=\"keyword\">sizeof</span>(<span class=\"type\">tju_tcp_t</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    tju_sock_addr local_addr, remote_addr;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     这里涉及到TCP连接的建立</span></span><br><span class=\"line\"><span class=\"comment\">     正常来说应该是收到客户端发来的SYN报文</span></span><br><span class=\"line\"><span class=\"comment\">     从中拿到对端的IP和PORT</span></span><br><span class=\"line\"><span class=\"comment\">     换句话说 下面的处理流程其实不应该放在这里 应该在tju_handle_packet中</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    remote_addr.ip = inet_network(CLIENT_IP);  <span class=\"comment\">//具体的IP地址</span></span><br><span class=\"line\">    remote_addr.port = <span class=\"number\">5678</span>;  <span class=\"comment\">//端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    local_addr.ip = listen_sock-&gt;bind_addr.ip;  <span class=\"comment\">//具体的IP地址</span></span><br><span class=\"line\">    local_addr.port = listen_sock-&gt;bind_addr.port;  <span class=\"comment\">//端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    new_conn-&gt;established_local_addr = local_addr;</span><br><span class=\"line\">    new_conn-&gt;established_remote_addr = remote_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (listen_sock-&gt;state != ESTABLISHED) ;</span><br><span class=\"line\">    change_sock_state(new_conn, ESTABLISHED);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新的conn放到内核建立连接的socket哈希表中</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hashval = cal_hash(local_addr.ip, local_addr.port, remote_addr.ip, remote_addr.port);</span><br><span class=\"line\">    established_socks[hashval] = new_conn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_conn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. tju_handle_packet( )</strong><br>\n<code>tju_handle_packet( )</code>函数中需要解决对各种报文的解析。<code>onTCPPocket( )</code>函数如果从established_hash或listen_hash中找到了对应的socket，就会调用 <code>tju_handle_packet( )</code>函数对收到的数据包进行处理。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_handle_packet</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;state == LISTEN &amp;&amp; get_flags(pkt) == SYN_FLAG_MASK)&#123; <span class=\"comment\">//第二次握手</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;recv_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sock-&gt;received_buf == <span class=\"literal\">NULL</span>) sock-&gt;received_buf = <span class=\"built_in\">malloc</span>(DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> sock-&gt;received_buf = <span class=\"built_in\">realloc</span>(sock-&gt;received_buf, sock-&gt;received_len + DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sock-&gt;received_buf + sock-&gt;received_len, pkt, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        sock-&gt;received_len += DEFAULT_HEADER_LEN;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;recv_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">        tju_sock_addr remote;</span><br><span class=\"line\">        remote.ip = inet_network(CLIENT_IP);</span><br><span class=\"line\">        remote.port = get_src(pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">        sock-&gt;established_local_addr = sock-&gt;bind_addr;</span><br><span class=\"line\">        sock-&gt;established_remote_addr = remote;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> hashval = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port, remote.ip, remote.port);</span><br><span class=\"line\">        half_connection[hashval] = sock;  <span class=\"comment\">//收到SYN报文后放进LISTEN的半连接队列中</span></span><br><span class=\"line\">        established_socks[hashval] = sock; <span class=\"comment\">//还会将该新建的socket放到ehash中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>; <span class=\"comment\">//确认号是SYN报文序列号+1</span></span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = SYN_FLAG_MASK | ACK_FLAG_MASK; <span class=\"comment\">//状态记为SYN+ACK，这里采用位运算|</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *SYNACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(SYNACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, SYN_RECV);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == SYN_SENT &amp;&amp; get_flags(pkt) == (ACK_FLAG_MASK | SYN_FLAG_MASK))&#123; <span class=\"comment\">//第三次握手</span></span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;client收到SYCACK, 准备发送ACK\\n&quot;);</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;base = seq;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;nextseq = seq;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, get_src(pkt), seq,ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, ESTABLISHED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == SYN_SENT &amp;&amp; get_flags(pkt) == SYN_FLAG_MASK)&#123; <span class=\"comment\">//第三次握手（奇怪）</span></span><br><span class=\"line\">        <span class=\"comment\">// //printf(&quot;client收到SYCACK, 准备发送ACK\\n&quot;);</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;base = seq;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;nextseq = seq;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, get_src(pkt), seq,ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, ESTABLISHED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == (SYN_FLAG_MASK | ACK_FLAG_MASK))&#123;  <span class=\"comment\">//三次握手第三个包的重传</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == SYN_RECV &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// //printf(&quot;server收到ACK\\n&quot;);</span></span><br><span class=\"line\">        sock-&gt;window.wnd_recv-&gt;expect_seq = get_seq(pkt) + get_plen(pkt) - DEFAULT_HEADER_LEN;</span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        com_connection[hash] = sock;</span><br><span class=\"line\">        half_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        change_sock_state(sock, ESTABLISHED);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (get_plen(pkt) &gt; DEFAULT_HEADER_LEN) &#123; <span class=\"comment\">//ACK包携带信息</span></span><br><span class=\"line\">            pkt2buffer(sock, pkt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6. pkt2buffer( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">pkt2buffer</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;bg6\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> data_len = get_plen(pkt) - DEFAULT_HEADER_LEN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;recv_lock)) != <span class=\"number\">0</span>); <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;received_buf == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        sock-&gt;received_buf = <span class=\"built_in\">malloc</span>(data_len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sock-&gt;received_buf = <span class=\"built_in\">realloc</span>(sock-&gt;received_buf, sock-&gt;received_len + data_len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(sock-&gt;received_buf + sock-&gt;received_len, pkt + DEFAULT_HEADER_LEN, data_len);    </span><br><span class=\"line\">    sock-&gt;received_len += data_len;</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;(sock-&gt;recv_lock)); <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;ed6\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四次挥手关闭连接\">四次挥手关闭连接</h3>\n<p><strong>1. tju_close ( )</strong><br>\n四次挥手有两种情况，分别为先后关闭和同时关闭，两种方式首先都需要调用<code>tju_close( )</code>函数，因此，在<code>tju_close( )</code>函数中，需要构造一个 FIN+ACK 报文，seq和ack都是当前报文窗口的下一个数值，并把自身状态变为 FIN-WAIT1。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_close</span> <span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> flag = FIN_FLAG_MASK | ACK_FLAG_MASK;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">    <span class=\"type\">char</span>* FINACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    sendToLayer3(FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    change_sock_state(sock, FIN_WAIT_1);</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;nextseq++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sock-&gt;state != CLOSED) ;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;连接完全关闭\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. tju_handle_packet( )</strong><br>\n接下来分为两种情况，但处理过程均在<code>tju_handle_packet( )</code>中完成，<code>tju_handle_packet( )</code>作为对收到的包进行响应的函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_handle_packet</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == (FIN_FLAG_MASK | ACK_FLAG_MASK))&#123; <span class=\"comment\">// server收到第一次挥手，并进行第二次挥手和第三次挥手</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第二次挥手报文\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSE_WAIT);</span><br><span class=\"line\">        </span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = ACK_FLAG_MASK | FIN_FLAG_MASK;</span><br><span class=\"line\">        seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">        ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> *FINACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第三次挥手报文\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, LAST_ACK);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == FIN_FLAG_MASK)&#123; <span class=\"comment\">// server收到第一次挥手，并进行第二次挥手和第三次挥手</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, CLOSE_WAIT);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第二次挥手报文\\n&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = ACK_FLAG_MASK | FIN_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *FINACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第三次挥手报文\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, LAST_ACK);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == FIN_WAIT_1 &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123; <span class=\"comment\">// client收到第二次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, FIN_WAIT_2);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;收到第二次挥手报文\\n&quot;);</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == FIN_WAIT_2 &amp;&amp; (get_flags(pkt) == (ACK_FLAG_MASK | FIN_FLAG_MASK)))&#123; <span class=\"comment\">// client收到第三次挥手进行第四次挥手并关闭连接</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN,flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;收到第三次挥手报文, 并发出第四次挥手\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, TIME_WAIT);</span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port,    sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        <span class=\"comment\">//这里要等待2MSL</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSED);</span><br><span class=\"line\">        established_socks[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;关闭连接\\n&quot;);</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == LAST_ACK &amp;&amp; (get_flags(pkt) == ACK_FLAG_MASK))&#123; <span class=\"comment\">// server收到第四次挥手并关闭连接</span></span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        established_socks[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        half_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        com_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        change_sock_state(sock, CLOSED);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;关闭连接\\n&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == FIN_WAIT_1 &amp;&amp; (get_flags(pkt) == (FIN_FLAG_MASK | ACK_FLAG_MASK)))&#123; <span class=\"comment\">// 同时关闭收到第一次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSING);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span>* ACK = create_packet_buf(sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.port,seq,ack,DEFAULT_HEADER_LEN,DEFAULT_HEADER_LEN,flag,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK,DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">// //printf(&quot;同时关闭发出ACK\\n&quot;);</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sock-&gt;state == FIN_WAIT_1 &amp;&amp; get_flags(pkt) == FIN_FLAG_MASK)&#123; <span class=\"comment\">// 同时关闭收到第一次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSING);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span>* ACK = create_packet_buf(sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.port,seq,ack,DEFAULT_HEADER_LEN,DEFAULT_HEADER_LEN,flag,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == CLOSING &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123; <span class=\"comment\">// 同时关闭时收到第三次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, TIME_WAIT);</span><br><span class=\"line\">        <span class=\"comment\">//等待2MSL</span></span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        established_socks[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        half_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        com_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        change_sock_state(sock, CLOSED);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;同时关闭彻底关闭\\n&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可靠数据传输\">可靠数据传输</h2>\n<h3 id=\"发送缓冲区管理\">发送缓冲区管理</h3>\n<p><strong>1. <code>global.h</code> 中宏定义 TCP 发送窗口大小。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TCP_SENDWN_SIZE 1000 </span></span><br></pre></td></tr></table></figure>\n<p><strong>2. <code>tju_packet.h</code> 中为发送缓冲区创建1000个报文长度的循环队列，方便数据包超时重传。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TCP 报文的结构定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">tju_header_t</span> header;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">sent_time</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125; <span class=\"type\">tju_packet_t</span>;</span><br><span class=\"line\"><span class=\"type\">tju_packet_t</span>* pktlist[TCP_SENDWN_SIZE];</span><br></pre></td></tr></table></figure>\n<p><strong>3. tju_send( )</strong><br>\n上层调用 <code>tju_send( )</code> 时，我们在 <code>tju_send( )</code>函数内创建发送线程并把发送数据存入缓冲区中。<br>\n 这里我们先了解一下创建线程 <code>pthread_create( )</code>函数。</p>\n<blockquote>\n<p>int pthread_create(pthread_t* restrict tidp,const pthread_attr_t* restrict_attr,void* (<em>start_rtn)(void</em>),void *restrict arg);</p>\n<ul>\n<li>tidp：事先创建好的pthread_t类型的参数。成功时tidp指向的内存单元被设置为新创建线程的线程ID。</li>\n<li>attr：用于定制各种不同的线程属性。APUE的12.3节讨论了线程属性。通常直接设为NULL。</li>\n<li>start_rtn：新创建线程从此函数开始运行。无参数是arg设为NULL即可。</li>\n<li>arg：start_rtn函数的参数。无参数时设为NULL即可。有参数时输入参数的地址。当多于一个参数时应当使用结构体传入。</li>\n<li>返回值为 0（表示线程成功创建）。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> send_thread_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_send</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">const</span> <span class=\"type\">void</span> *buffer, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里当然不能直接简单地调用sendToLayer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!send_thread_flag)&#123;</span><br><span class=\"line\">        send_thread_flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">pthread_t</span> sendthreadid;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = pthread_create(&amp;sendthreadid, <span class=\"literal\">NULL</span>, send_pkt, (<span class=\"type\">void</span> *)sock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;send_lock)) != <span class=\"number\">0</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(sock-&gt;sending_buf + sock-&gt;index, (<span class=\"type\">char</span>*)buffer, len);</span><br><span class=\"line\">    sock-&gt;sending_len += len;</span><br><span class=\"line\">    sock-&gt;index += len;</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;(sock-&gt;send_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. send_pkt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">send_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;bg4\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//struct timeval start_time, now_time;</span></span><br><span class=\"line\">    <span class=\"comment\">//gettimeofday(&amp;start_time, NULL);</span></span><br><span class=\"line\">    <span class=\"comment\">//long deltatime = 0; //时间差</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123; <span class=\"comment\">//不断检查和发送数据包</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;nextseq &lt; sock-&gt;index)&#123; <span class=\"comment\">//检查发送窗口：检查当前发送序列号是否小于索引，确保有数据需要发送。</span></span><br><span class=\"line\">            <span class=\"comment\">//gettimeofday(&amp;now_time, NULL);</span></span><br><span class=\"line\">            <span class=\"comment\">//deltatime = now_time.tv_sec - start_time.tv_sec;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;send_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> unlen = sock-&gt;sending_len - (sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base); <span class=\"comment\">//计算当前未发送的数据长度。 </span></span><br><span class=\"line\">            <span class=\"type\">int</span> len = min(unlen, MAX_DLEN); <span class=\"comment\">//确定本次发送的长度，取未发送长度和最大数据长度中的最小值。 </span></span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;send_lock));</span><br><span class=\"line\">            <span class=\"type\">int</span> leftlen = sock-&gt;window.wnd_send-&gt;rwnd - (sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base);</span><br><span class=\"line\">            len =len&gt;leftlen?leftlen:len;            </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base + len &lt;= sock-&gt;window.wnd_send-&gt;rwnd) &#123; <span class=\"comment\">//检查窗口大小：检查当前已发送的长度加上本次发送长度是否在接收窗口范围内。 </span></span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> ack = seq + len; <span class=\"comment\">//不理解 </span></span><br><span class=\"line\">                <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">                <span class=\"type\">uint16_t</span> pkt_len = len + DEFAULT_HEADER_LEN;</span><br><span class=\"line\">                <span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(MAX_DLEN);</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(data, sock-&gt;sending_buf + sock-&gt;window.wnd_send-&gt;nextseq, len);</span><br><span class=\"line\">                <span class=\"type\">tju_packet_t</span> *datapacket = create_packet(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, pkt_len, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data, len);</span><br><span class=\"line\">                <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, pkt_len, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data, len);</span><br><span class=\"line\"></span><br><span class=\"line\">                sendToLayer3(ACK, pkt_len);</span><br><span class=\"line\">                </span><br><span class=\"line\">                sock-&gt;window.wnd_send-&gt;nextseq += len;</span><br><span class=\"line\">                pktlist[sock-&gt;packetr] = datapacket;</span><br><span class=\"line\">                gettimeofday(&amp;pktlist[sock-&gt;packetr]-&gt;sent_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                sock-&gt;packetr = (sock-&gt;packetr + <span class=\"number\">1</span>) % TCP_SENDWN_SIZE;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len == (<span class=\"type\">int</span>)(sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base))&#123;</span><br><span class=\"line\">                    gettimeofday(&amp;(sock-&gt;window.wnd_send-&gt;send_time), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">                    sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ed4\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"失序报文数组的管理\">失序报文数组的管理</h3>\n<p><strong>1. tju_handle_packet( )</strong><br>\n<code>tju_handle_packet( )</code>中添加建立连接后收到数据包的处理。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_handle_packet</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;</span><br><span class=\"line\">    `````` 建立连接 ``````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123; <span class=\"comment\">//收到数据包</span></span><br><span class=\"line\">        <span class=\"type\">char</span> hostname[<span class=\"number\">8</span>];</span><br><span class=\"line\">        gethostname(hostname, <span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(hostname, <span class=\"string\">&quot;server&quot;</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            serverrdt(sock, pkt);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            clientrdt(sock, pkt);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    `````` 关闭连接 ``````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. <code>tju_tcp_t</code> 结构体中创建空间用来存储失序报文并记录失序报文的个数。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TJU_TCP 结构体 保存TJU_TCP用到的各种数据</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> unorder[<span class=\"number\">100</span>][MAX_LEN]; <span class=\"comment\">//失序报文数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> unolen; <span class=\"comment\">//失序报文个数</span></span><br><span class=\"line\">&#125; <span class=\"type\">tju_tcp_t</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>3. serverrdt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">serverrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 服务器端处理数据包</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (get_seq(pkt) &lt; (sock-&gt;window.wnd_recv-&gt;expect_seq))&#123; <span class=\"comment\">//函数发送一个 ACK 响应已确认接收</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_seq(pkt) &gt; (sock-&gt;window.wnd_recv-&gt;expect_seq))&#123; <span class=\"comment\">//数据包乱序，函数将包暂存，并发送 ACK，同时更新接收窗口</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((sock-&gt;unolen) &gt; MAX_PKT_IN_WINDOW)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sock-&gt;unorder[sock-&gt;unolen], pkt, get_plen(pkt));</span><br><span class=\"line\">        sock-&gt;unolen++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123; <span class=\"comment\">//刚刚好</span></span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;nextseq=get_ack(pkt);</span><br><span class=\"line\">        sock-&gt;window.wnd_recv-&gt;expect_seq+=get_plen(pkt)-DEFAULT_HEADER_LEN;</span><br><span class=\"line\">        pkt2buffer(sock,pkt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;unolen == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">            <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">            <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag,TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> len = sock-&gt;unolen;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(get_seq(sock-&gt;unorder[i])&gt;get_seq(sock-&gt;unorder[j]))&#123;</span><br><span class=\"line\">                        my_swap(&amp;sock-&gt;unorder[i], &amp;sock-&gt;unorder[j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; index &lt; len; index++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(get_seq(sock-&gt;unorder[index]) == sock-&gt;window.wnd_recv-&gt;expect_seq)&#123;</span><br><span class=\"line\">                    sock-&gt;window.wnd_send-&gt;nextseq = get_ack(sock-&gt;unorder[index]);</span><br><span class=\"line\">                    sock-&gt;window.wnd_recv-&gt;expect_seq += get_plen(sock-&gt;unorder[index]) - DEFAULT_HEADER_LEN;</span><br><span class=\"line\">                    pkt2buffer(sock, sock-&gt;unorder[index]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_seq(sock-&gt;unorder[index]) &lt; (sock-&gt;window.wnd_recv-&gt;expect_seq)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = index; i &lt; len; i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(sock-&gt;unorder[i - index], sock-&gt;unorder[i], <span class=\"keyword\">sizeof</span>(sock-&gt;unorder[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sock-&gt;unolen -= index;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">            <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">            <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. my_swap( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_swap</span><span class=\"params\">(<span class=\"type\">char</span>** a, <span class=\"type\">char</span>** b)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* tem = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(MAX_LEN);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(tem, a, get_plen(b));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(a, b, get_plen(b));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(b, tem, get_plen(tem));</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(tem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现累计应答\">实现累计应答</h3>\n<center>\n<img src=\"https://s2.loli.net/2024/10/11/vKkuC1ibGfmo2sM.png\" width=\"60%\" />\n<p>Figure 1. 累计应答</p>\n</center>\n<p><strong>1. clientrdt( )</strong><br>\n<code>clientrdt( )</code>函数中添加累计应答处理。当发送方收到任意大于当前base的ack报文后，直接把当前base进行更新即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 客户端处理数据包</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;base == sock-&gt;window.wnd_send-&gt;nextseq) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (get_ack(pkt) &lt; sock-&gt;window.wnd_send-&gt;base) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;send_lock)) != <span class=\"number\">0</span>); <span class=\"comment\">//加锁</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sock-&gt;window.wnd_send-&gt;base &lt; get_ack(pkt) &amp;&amp; sock-&gt;window.wnd_send-&gt;base &lt; sock-&gt;window.wnd_send-&gt;nextseq )&#123;   </span><br><span class=\"line\">            <span class=\"type\">int</span> pkt_len = pktlist[sock-&gt;packetl]-&gt;header.plen;</span><br><span class=\"line\">            <span class=\"type\">int</span> datalen = pkt_len - DEFAULT_HEADER_LEN;</span><br><span class=\"line\">            sock-&gt;sending_len -= datalen;</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;base += datalen;</span><br><span class=\"line\">            sock-&gt;packetl = (sock-&gt;packetl + <span class=\"number\">1</span>) % TCP_SENDWN_SIZE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;send_lock)); <span class=\"comment\">//解锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时重传\">超时重传</h3>\n<p><strong>1. tju_send( )</strong><br>\n<code>tju_send( )</code> 中创建了一个新的线程判断是否要进行重传。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> resend_thread_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_send</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">const</span> <span class=\"type\">void</span> *buffer, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!resend_thread_flag)&#123;</span><br><span class=\"line\">        resend_thread_flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">pthread_t</span> resendthreadid;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = pthread_create(&amp;resendthreadid, <span class=\"literal\">NULL</span>,resend_pkt, (<span class=\"type\">void</span> *)sock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. resend_pkt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">resend_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">start_time</span>,<span class=\"title\">now_time</span>;</span></span><br><span class=\"line\">    gettimeofday(&amp;start_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"type\">long</span> deltatime = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;base &lt; sock-&gt;window.wnd_send-&gt;nextseq)&#123;</span><br><span class=\"line\">            gettimeofday(&amp;now_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            deltatime = now_time.tv_sec - start_time.tv_sec;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deltatime &gt; <span class=\"number\">100</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">//不理解</span></span><br><span class=\"line\">            <span class=\"type\">long</span> nowtimeval = <span class=\"number\">1000000</span> * (now_time.tv_sec - sock-&gt;window.wnd_send-&gt;send_time.tv_sec) +  (now_time.tv_usec - sock-&gt;window.wnd_send-&gt;send_time.tv_usec);</span><br><span class=\"line\">            <span class=\"type\">long</span> timeoutval = <span class=\"number\">1000000</span> * (sock-&gt;window.wnd_send-&gt;timeout.tv_sec) + (sock-&gt;window.wnd_send-&gt;timeout.tv_usec);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nowtimeval &gt; timeoutval)&#123; <span class=\"comment\">//超时重传</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(pktlist[sock-&gt;packetl] == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> seq = pktlist[sock-&gt;packetl]-&gt;header.seq_num;</span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> ack = pktlist[sock-&gt;packetl]-&gt;header.ack_num;</span><br><span class=\"line\">                <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">                <span class=\"type\">int</span> pkt_len = pktlist[sock-&gt;packetl]-&gt;header.plen;</span><br><span class=\"line\">                <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack,DEFAULT_HEADER_LEN, pkt_len, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, pktlist[sock-&gt;packetl]-&gt;data, pkt_len - DEFAULT_HEADER_LEN);</span><br><span class=\"line\">                sendToLayer3(ACK, pkt_len);</span><br><span class=\"line\">                gettimeofday(&amp;pktlist[sock-&gt;packetl]-&gt;sent_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                gettimeofday(&amp;sock-&gt;window.wnd_send-&gt;send_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. clientrdt( )</strong><br>\n<code>clientrdt( )</code> 函数中添加动态设置超时间隔的实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 客户端处理数据包</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//更新RTO</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">nowtime</span>;</span></span><br><span class=\"line\">        gettimeofday(&amp;nowtime, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> ntime = <span class=\"number\">1000000</span> * nowtime.tv_sec + nowtime.tv_usec;</span><br><span class=\"line\">        <span class=\"type\">long</span> samplertt = <span class=\"number\">1000000</span> * (nowtime.tv_sec-pktlist[sock-&gt;packetl]-&gt;sent_time.tv_sec)+nowtime.tv_usec-pktlist[sock-&gt;packetl]-&gt;sent_time.tv_usec;</span><br><span class=\"line\">        <span class=\"type\">long</span> estmatedrtt = sock-&gt;window.wnd_send-&gt;estmated_rtt;</span><br><span class=\"line\">        <span class=\"type\">long</span> devrtt = sock-&gt;window.wnd_send-&gt;dev_rtt;</span><br><span class=\"line\">        estmatedrtt = <span class=\"number\">1.0</span> * estmatedrtt * <span class=\"number\">7</span> / <span class=\"number\">8</span> + samplertt / <span class=\"number\">8</span>;</span><br><span class=\"line\">        devrtt = <span class=\"number\">1.0</span> * devrtt * <span class=\"number\">3</span> / <span class=\"number\">4</span> + (samplertt &gt; <span class=\"number\">1.0</span> * estmatedrtt ? (samplertt - estmatedrtt) : (estmatedrtt - samplertt)) / <span class=\"number\">4</span>;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;timeout.tv_usec = (estmatedrtt + <span class=\"number\">4</span> * devrtt) % <span class=\"number\">1000000</span>;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;timeout.tv_sec = (estmatedrtt + <span class=\"number\">4</span> * devrtt) / <span class=\"number\">1000000</span>;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;estmated_rtt = estmatedrtt;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;dev_rtt = devrtt;</span><br><span class=\"line\">        <span class=\"type\">double</span> dsamplertt=(<span class=\"type\">double</span>)samplertt/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> destmatedrtt=(<span class=\"type\">double</span>)estmatedrtt/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> ddevrtt=(<span class=\"type\">double</span>)devrtt/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> dtimegap=(<span class=\"type\">double</span>)(estmatedrtt + <span class=\"number\">4</span> * devrtt)/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速重传\">快速重传</h3>\n<center>\n<img src=\"https://s2.loli.net/2024/10/11/cj2PfZsz8abBVW9.png\" width=\"60%\" />\n<p>Figure 1. 快速重传</p>\n</center>\n<p><strong>1. clientrdt( )</strong><br>\n<code>clientrdt( )</code> 函数中添加快速重传的实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 客户端处理数据包</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(get_ack(pkt) == sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//冗余ACK</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;ack_cnt++;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;ack_cnt == <span class=\"number\">3</span>)&#123; <span class=\"comment\">//快速重传 </span></span><br><span class=\"line\">            ``````</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> seq = pktlist[sock-&gt;packetl]-&gt;header.seq_num;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> ack = pktlist[sock-&gt;packetl]-&gt;header.ack_num;</span><br><span class=\"line\">            <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">            <span class=\"type\">int</span> pkt_len = pktlist[sock-&gt;packetl]-&gt;header.plen;</span><br><span class=\"line\">            <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, pkt_len, ACK_FLAG_MASK, <span class=\"number\">0</span>, <span class=\"number\">0</span>, pktlist[sock-&gt;packetl]-&gt;data, pkt_len - DEFAULT_HEADER_LEN);</span><br><span class=\"line\">            sendToLayer3(ACK, pkt_len);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            gettimeofday(&amp;pktlist[sock-&gt;packetl]-&gt;sent_time, <span class=\"literal\">NULL</span>);            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"流量控制\">流量控制</h2>\n<h3 id=\"接收方计算接受缓冲区大小\">接收方计算接受缓冲区大小</h3>\n<p><strong>1. serverrdt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">serverrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;<span class=\"comment\">// 服务端处理数据包</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">    <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送方调整发送缓冲区大小\">发送方调整发送缓冲区大小</h3>\n<p><strong>1. clientrdt( )</strong><br>\n<code>clientrdt( )</code>函数确定window_size大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````get_advertised_window(pkt)``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. get_advertised_window( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint16_t</span> <span class=\"title function_\">get_advertised_window</span><span class=\"params\">(<span class=\"type\">char</span>* msg)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> offset = <span class=\"number\">17</span>;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> var;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;var, msg+offset, SIZE16);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ntohs(var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"0窗口探测\">0窗口探测</h3>\n<p><strong>1. send_pkt( )</strong><br>\n<code>send_pkt( )</code>发送数据的线程中加入一个判断条件。<br>\n0窗口探测用于在ADVERTISED WINDOW为0的情况下，发送大小为1的数据报文以获得实时的窗口返回值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">send_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((sock-&gt;window.wnd_send-&gt;nextseq &gt; sock-&gt;window.wnd_send-&gt;base)&amp;&amp;sock-&gt;window.wnd_send-&gt;rwnd == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        len = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"拥塞控制\">拥塞控制</h2>\n<h3 id=\"慢启动\">慢启动</h3>\n<p><strong>1. 套接字的初始化使得发送方从其他状态进入慢启动状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">tju_tcp_t</span>* <span class=\"title function_\">tju_socket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;congestion_status = SLOW_START;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. <code>resend_pkt( )</code>函数超时事件使得发送方从其他状态进入慢启动状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nowtimeval &gt; timeoutval)&#123;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;congestion_status = SLOW_START;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在慢启动状态下，发送方每当接收到正确的 ACK 报文，就会将其拥塞窗口增大 1 个 MSS（MAX_DLEN）。虽然是不断的自增 MSS，但是由于拥塞窗口的增大（进而导致发送窗口的增大），每次自增的次数为 1-&gt;2-&gt;4-&gt;8 直至达到ssthresh，所以拥塞窗口整体上呈现指数增长的趋势。<br>\n<strong>3. clientrdt( )</strong><br>\n<code>clientrdt( )</code> 函数中发送方每当接收到正确的 ACK 报文，就会将其拥塞窗口增大 1 个 MSS。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123;   </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;congestion_status == SLOW_START)&#123; <span class=\"comment\">//慢启动</span></span><br><span class=\"line\">        ``````    </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">// new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd += MSS;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">            ``````</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. resend_pkt( )</strong><br>\n<code>resend_pkt( )</code> 函数中处理超时重传导致慢启动参数变化。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">resend_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowtimeval &gt; timeoutval)&#123;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;ssthresh = sock-&gt;window.wnd_send-&gt;cwnd / <span class=\"number\">2</span>; <span class=\"comment\">//拥塞阈值变成拥塞窗口大小的一半</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;ssthresh &lt; MAX_DLEN) sock-&gt;window.wnd_send-&gt;ssthresh = MSS; <span class=\"comment\">//调整</span></span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;cwnd = MSS; <span class=\"comment\">//拥塞窗口变成1MSS</span></span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;congestion_status = SLOW_START; <span class=\"comment\">//拥塞状态不变</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拥塞避免\">拥塞避免</h3>\n<p><strong>1. 拥塞窗口超过 ssthresh 进入拥塞避免状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123; </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;congestion_status == SLOW_START)&#123; <span class=\"comment\">//慢启动</span></span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;cwnd &gt;= sock-&gt;window.wnd_send-&gt;ssthresh)&#123; <span class=\"comment\">//cwnd达到ssthresh，转为拥塞避免状态</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = CONGESTION_AVOIDANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 快速恢复阶段收到正确的 ACK 使得发送方从其他状态进入拥塞避免状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123; </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;congestion_status == FAST_RECOVERY)&#123; <span class=\"comment\">//快速恢复</span></span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd = sock-&gt;window.wnd_send-&gt;ssthresh;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">          </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = CONGESTION_AVOIDANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 在拥塞避免状态下，发送方每当收到一个正确的 ACK 报文，拥塞窗口就会增大（1/cwnd）个 MSS。拥塞窗口整体上呈现线性增长的趋势。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123;   </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;congestion_status == CONGESTION_AVOIDANCE) &#123; <span class=\"comment\">//拥塞避免</span></span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd += MSS * ((<span class=\"type\">double</span>)MSS / (<span class=\"type\">double</span>)sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">            </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速恢复\">快速恢复</h3>\n<p><strong>1. <code>clientrdt( )</code> 发送方收到 3 个冗余 ACK 时，进入快速恢复状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;ack_cnt == <span class=\"number\">3</span>)&#123;  <span class=\"comment\">//快速重传</span></span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;ssthresh = sock-&gt;window.wnd_send-&gt;cwnd / <span class=\"number\">2</span>;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;cwnd = sock-&gt;window.wnd_send-&gt;ssthresh + <span class=\"number\">3</span> * MSS;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;congestion_status = FAST_RECOVERY; <span class=\"comment\">//快速恢复</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 在快速恢复状态下，如果还是收到冗余 ACK，那么依然在此状态，cwnd+=MSS；当收到正确 ACK 时，则进入拥塞避免状态 ，cwnd=ssthresh；当超时时，回到慢启动，cwnd=1MSS。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123; </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````    </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;congestion_status == FAST_RECOVERY)&#123; <span class=\"comment\">//快速恢复</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(get_ack(pkt) == sock-&gt;window.wnd_send-&gt;base)&#123;<span class=\"comment\">//dup ack</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt++;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd += MSS;</span><br><span class=\"line\">                        </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = FAST_RECOVERY;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd = sock-&gt;window.wnd_send-&gt;ssthresh;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));  </span><br><span class=\"line\">         </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = CONGESTION_AVOIDANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["计算机网络"]},{"title":"ICPC算法模版","url":"/2024/11/29/ICPC%E7%AE%97%E6%B3%95%E6%A8%A1%E7%89%88/","content":"<h1>Part 1. 数据结构</h1>\n<h2 id=\"1-线段树（Segment-Trees\">1.线段树（Segment Trees)</h2>\n<p>关键词：定长序列操作，区间修改与查询。</p>\n<p><strong>ACLibrary对懒标记线段树适配的定义，不涉及区间懒标记的普通线段树没有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>的限制：</strong></p>\n<p>It is the data structure for the pair of a monoid <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>&lt;</mo><mi>S</mi><mo separator=\"true\">,</mo><mo>⋅</mo><mo>&gt;</mo><mo>:</mo><mi>S</mi><mo>⋅</mo><mi>S</mi><mo>→</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>e</mi><mo>∈</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(&lt;S, \\cdot&gt;: S \\cdot S \\to S, e \\in S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> and a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S \\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>​ mappings that satisfies the following properties.</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> contains the identity map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">d</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{id}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">id</span></span></span></span></span>, where the identity map is the map that satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">d</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{id}(x) = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">id</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">x \\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is closed under composition, i.e., <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>g</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ g \\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> holds for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">f, g \\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>​.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x \\cdot y) = f(x) \\cdot f(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> holds for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">f \\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">x, y \\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</li>\n</ol>\n<p>Given an array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, it processes the following queries in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<ol>\n<li>Acting the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">f\\in F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> (cf. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>) on all the elements of an interval</li>\n<li>Calculating the product of the elements of an interval</li>\n</ol>\n<p><strong>中文翻译：</strong></p>\n<p>懒标记线段树是适配于满足以下条件的<em><strong>幺半群</strong></em><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>&lt;</mo><mi>S</mi><mo separator=\"true\">,</mo><mo>⋅</mo><mo>&gt;</mo><mo>:</mo><mi>S</mi><mo>⋅</mo><mi>S</mi><mo>→</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>e</mi><mo>∈</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(&lt;S, \\cdot&gt;: S \\cdot S \\to S, e \\in S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>和属于<em><strong>线性空间</strong></em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">V:S\\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>的子空间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>:</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>有单位映射<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mtext> </mtext><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f\\in F,s.t.\\ \\forall x\\in S, f(x)=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mspace\"> </span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></li>\n<li>代数系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>F</mi><mo separator=\"true\">,</mo><mo>∘</mo><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;F,\\circ&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∘</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>封闭，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∘</mo></mrow><annotation encoding=\"application/x-tex\">\\circ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∘</span></span></span></span>表函数复合，不满足交换律，复合顺序从右到左，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo>∘</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f\\circ g)(x)=f(g(x))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span></span></span></span>​</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>必须是线性空间，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>f</mi><mo>∈</mo><mi>F</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">\\forall f \\in F,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span></span></span></span> $\\forall x, y \\in S, $  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>⋅</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x \\cdot y) = f(x) \\cdot f(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>​.</li>\n</ol>\n<p>给定一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>类型的数组，要求在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mtext> </mtext><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log\\ N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>的时间内完成以下类型操作：</p>\n<ol>\n<li>\n<p>对一个或者一段区间的值应用线性映射<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>​，并改为对应结果。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mi>S</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub><mo>:</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\forall x_i\\in S,\\ i\\in[l,r), \\ x_i:=f(x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\">∀</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n<li>\n<p>求一个或者一段区间的值对幺半群乘法 （<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding=\"application/x-tex\">\\cdot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">⋅</span></span></span></span>） 运算的结果。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mi>S</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large ans=\\prod_{i=l}^r x_i \\in S\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5167em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\">an</span><span class=\"mord mathnormal sizing reset-size6 size7\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.4992em;vertical-align:-1.5348em;\"></span><span class=\"mop op-limits sizing reset-size6 size7\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.637em;\"><span style=\"top:-2.021em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.45em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.279em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.82em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></p>\n</li>\n</ol>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-1-普通线段树（静态开点区间加，永久化懒标记，当心爆标记问题，码量小）\">1.1 普通线段树（静态开点区间加，永久化懒标记，当心爆标记问题，码量小）</h3>\n<p><strong>切记单点修改的if-else必须写全！！！</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> lazy;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[rt].sum += val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pos, val, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pos, val, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> val, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[rt].sum += val * (<span class=\"built_in\">min</span>(r, cr) - <span class=\"built_in\">max</span>(l, cl) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].lazy += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, r, val, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, r, val, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[rt].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + tree[rt].lazy * (<span class=\"built_in\">min</span>(r, cr) - <span class=\"built_in\">max</span>(l, cl) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(i, x, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r, d;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(l, r, d, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">query</span>(l, r, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-2-普通线段树-静态开点区间加，标记永久化\">1.2 普通线段树(静态开点区间加，标记永久化)</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> lazy;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[rt].sum = tree[rt &lt;&lt; <span class=\"number\">1</span>].sum + tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[rt].lazy)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span>].lazy += tree[rt].lazy;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazy += tree[rt].lazy;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span>].sum += tree[rt].lazy * (mid - cl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum += tree[rt].lazy * (cr - mid);</span><br><span class=\"line\">        tree[rt].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt] = &#123;a[cl], <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].sum += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pos, val, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">update</span>(pos, val, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> val, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].sum += val * (cr - cl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        tree[rt].lazy += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(rt, cl, cr);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, r, val, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, r, val, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[rt].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(rt, cl, cr);</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(i, x, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r, d;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(l, r, d, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">query</span>(l, r, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-3-普通线段树（静态区间加、区间乘，非永久化）\">1.3 普通线段树（静态区间加、区间乘，非永久化）</h3>\n<p>贴出来记得懒标记顺序思考问题。注意，懒标记下传的时候是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mi>r</mi><mi>t</mi></mrow></msub><mtext> </mtext><mo>∘</mo><mtext> </mtext><msub><mi>f</mi><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">f_{rt}\\ \\circ \\ f_{sons}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">so</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的复合函数顺序。根据Segtrees.h思想思考。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;icpc-model/Modint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Modint;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> mint = MLong&lt;<span class=\"number\">0</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    mint sum;</span><br><span class=\"line\">    mint lazyadd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mint lazymul = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">mint a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[rt].sum = tree[rt &lt;&lt; <span class=\"number\">1</span>].sum + tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 儿子节点已有ax+b,传下来c(ax+b)+d=cax+cb+d);</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[rt].lazyadd != <span class=\"number\">0</span> || tree[rt].lazymul != <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span>].lazyadd *= tree[rt].lazymul;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span>].lazyadd += tree[rt].lazyadd;</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazyadd *= tree[rt].lazymul;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazyadd += tree[rt].lazyadd;</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span>].lazymul *= tree[rt].lazymul;</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lazymul *= tree[rt].lazymul;</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span>].sum = tree[rt &lt;&lt; <span class=\"number\">1</span>].sum * tree[rt].lazymul + tree[rt].lazyadd * (mid - cl + <span class=\"number\">1</span>);</span><br><span class=\"line\">        tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum = tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum * tree[rt].lazymul + tree[rt].lazyadd * (cr - mid);</span><br><span class=\"line\">        tree[rt].lazyadd = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tree[rt].lazymul = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].sum = a[cl];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> add, <span class=\"type\">int</span> mul, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].sum *= mul;</span><br><span class=\"line\">        tree[rt].sum += add * (cr - cl + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt].lazyadd *= mul;</span><br><span class=\"line\">        tree[rt].lazyadd += add;</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt].lazymul *= mul;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(rt, cl, cr);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, r, add, mul, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, r, add, mul, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">mint <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[rt].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(rt, cl, cr);</span><br><span class=\"line\">    mint res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    mint::<span class=\"built_in\">setMod</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r, d;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(l, r, <span class=\"number\">0</span>, d, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">            <span class=\"comment\">/*for (int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                cout &lt;&lt; query(i, i, 1, 1, n) &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; endl;*/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r, d;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(l, r, d, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">            <span class=\"comment\">/*for (int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                cout &lt;&lt; query(i, i, 1, 1, n) &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; endl;*/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">query</span>(l, r, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-4-Segtree-h-lazy-segtree\">1.4 Segtree.h/lazy_segtree</h3>\n<p>ACLibrary线段树，非递归模式，线段树下标从0开始。下文所提及区间默认左闭右开。</p>\n<p>函数列表</p>\n<p><code>bit_ceil</code> : 取比参数大的最近的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>\n<p><code>countr_zero</code> : 取参数的二进制结尾有多少个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p><code>pushup</code> : 字面含义</p>\n<p><code>upd</code> : 修改完整线段树节点所代表区间</p>\n<p><code>pushdown</code> ： 字面含义</p>\n<p><code>explicit lazy_segtree(const vector&lt;S&gt; &amp;v)</code> : 构造函数</p>\n<p><code>void set(int p, S x)</code> : 单点修改为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>（<em><strong>单点改为</strong></em>）</p>\n<p><code>S get(int p)</code> : 单点查询</p>\n<p><code>S query(int l, int r)</code> : 查询区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[l,r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span>进行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">op</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span></span></span></span>的结果</p>\n<p><code>void modify(int p, F f)</code> : 单点应用修改（<em><strong>单点加</strong></em>）</p>\n<p><code>void modify(int l, int r, F f)</code> : 区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[l,r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span>应用修改 (<em><strong>区间加</strong></em>)</p>\n<p><code>template &lt;bool (*g)(S)&gt; int max_right(int l)</code> : 线段树二分查询从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>开始的最右端点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mstyle mathcolor=\"red\"><mi>r</mi><mo>−</mo><mn>1</mn></mstyle><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">g(op[l,l+1,\\cdots,\\textcolor{red}{r-1}])=true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">1</span><span class=\"mclose\">])</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span>.</p>\n<p><code>template &lt;bool (*g)(S)&gt; int min_left(int r)</code> : 线段树二分查询到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>的最左端点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>o</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mstyle mathcolor=\"red\"><mi>r</mi><mo>−</mo><mn>1</mn></mstyle><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">g(op[l,l+1,\\cdots,\\textcolor{red}{r-1}])=true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">1</span><span class=\"mclose\">])</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Segtrees</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bit_ceil</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &lt; n)</span><br><span class=\"line\">            x *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countr_zero</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __builtin_ctz(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">S</span>,<span class=\"built_in\">S</span> (*op)(S, S),<span class=\"built_in\">S</span> (*e)(),<span class=\"keyword\">class</span> <span class=\"title class_\">F</span>,<span class=\"built_in\">S</span> (*mp)(F, S),<span class=\"built_in\">F</span> (*comp)(F, F),<span class=\"built_in\">F</span> (*id)()&gt;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">lazy_segtree</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"type\">int</span> _n, size, log;</span><br><span class=\"line\">        vector&lt;S&gt; d;</span><br><span class=\"line\">        vector&lt;F&gt; lz;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123; d[k] = <span class=\"built_in\">op</span>(d[k &lt;&lt; <span class=\"number\">1</span>], d[k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]); &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"type\">int</span> k, F f)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            d[k] = <span class=\"built_in\">mp</span>(f, d[k]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &lt; size)</span><br><span class=\"line\">                lz[k] = <span class=\"built_in\">comp</span>(f, lz[k]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(k &lt;&lt; <span class=\"number\">1</span>, lz[k]);</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(k &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, lz[k]);</span><br><span class=\"line\">            lz[k] = <span class=\"built_in\">id</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">lazy_segtree</span>() : <span class=\"built_in\">lazy_segtree</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">lazy_segtree</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> : lazy_segtree(vector&lt;S&gt;(n, e())) &#123;</span>&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">lazy_segtree</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;S&gt; &amp;v)</span> : _n(int(v.size()))</span></span><br><span class=\"line\"><span class=\"function\">        &#123;</span></span><br><span class=\"line\">            size = <span class=\"built_in\">bit_ceil</span>((_n));</span><br><span class=\"line\">            log = <span class=\"built_in\">countr_zero</span>(size);</span><br><span class=\"line\">            d = <span class=\"built_in\">vector</span>&lt;S&gt;(<span class=\"number\">2</span> * size, <span class=\"built_in\">e</span>());</span><br><span class=\"line\">            lz = <span class=\"built_in\">vector</span>&lt;F&gt;(size, <span class=\"built_in\">id</span>());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; _n; i++)</span><br><span class=\"line\">                d[size + i] = v[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">pushup</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> p, S x)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= p &amp;&amp; p &lt; _n);</span><br><span class=\"line\">            p += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">                <span class=\"built_in\">pushdown</span>(p &gt;&gt; i);</span><br><span class=\"line\">            d[p] = x;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= log; i++)</span><br><span class=\"line\">                <span class=\"built_in\">pushup</span>(p &gt;&gt; i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">S <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= p &amp;&amp; p &lt; _n);</span><br><span class=\"line\">            p += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">                <span class=\"built_in\">pushdown</span>(p &gt;&gt; i);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*查询区间[l,r)的结果,l=r时返回幺元*/</span></span><br><span class=\"line\">        <span class=\"function\">S <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= l &amp;&amp; l &lt;= r &amp;&amp; r &lt;= _n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            l += size;</span><br><span class=\"line\">            r += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((l &gt;&gt; i) &lt;&lt; i) != l)</span><br><span class=\"line\">                    <span class=\"built_in\">pushdown</span>(l &gt;&gt; i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((r &gt;&gt; i) &lt;&lt; i) != r)</span><br><span class=\"line\">                    <span class=\"built_in\">pushdown</span>((r - <span class=\"number\">1</span>) &gt;&gt; i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            S sml = <span class=\"built_in\">e</span>(), smr = <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (l &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    sml = <span class=\"built_in\">op</span>(sml, d[l++]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    smr = <span class=\"built_in\">op</span>(d[--r], smr);</span><br><span class=\"line\">                l &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">op</span>(sml, smr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">S <span class=\"title\">all_query</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> d[<span class=\"number\">1</span>]; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> p, F f)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= p &amp;&amp; p &lt; _n);</span><br><span class=\"line\">            p += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">                <span class=\"built_in\">pushdown</span>(p &gt;&gt; i);</span><br><span class=\"line\">            d[p] = <span class=\"built_in\">mp</span>(f, d[p]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= log; i++)</span><br><span class=\"line\">                <span class=\"built_in\">pushup</span>(p &gt;&gt; i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, F f)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= l &amp;&amp; l &lt;= r &amp;&amp; r &lt;= _n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            l += size;</span><br><span class=\"line\">            r += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((l &gt;&gt; i) &lt;&lt; i) != l)</span><br><span class=\"line\">                    <span class=\"built_in\">pushdown</span>(l &gt;&gt; i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((r &gt;&gt; i) &lt;&lt; i) != r)</span><br><span class=\"line\">                    <span class=\"built_in\">pushdown</span>((r - <span class=\"number\">1</span>) &gt;&gt; i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> l2 = l, r2 = r;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (l &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">upd</span>(l++, f);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"built_in\">upd</span>(--r, f);</span><br><span class=\"line\">                l &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            l = l2;</span><br><span class=\"line\">            r = r2;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= log; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((l &gt;&gt; i) &lt;&lt; i) != l)</span><br><span class=\"line\">                    <span class=\"built_in\">pushup</span>(l &gt;&gt; i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((r &gt;&gt; i) &lt;&lt; i) != r)</span><br><span class=\"line\">                    <span class=\"built_in\">pushup</span>((r - <span class=\"number\">1</span>) &gt;&gt; i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @brief 线段树二分，查询区间[l,n)满足g的最右端点r</span></span><br><span class=\"line\"><span class=\"comment\">         * @tparam G 查询函数g，参数类型S</span></span><br><span class=\"line\"><span class=\"comment\">         * @param l 区间左端点</span></span><br><span class=\"line\"><span class=\"comment\">         * @return 区间[l,n)满足g( op([l,l+1,···,r) )的最右端点r</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"built_in\">bool</span> (*g)(S)&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max_right</span><span class=\"params\">(<span class=\"type\">int</span> l)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">max_right</span>(l, [](S x)</span><br><span class=\"line\">                             &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">g</span>(x); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">G</span>&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max_right</span><span class=\"params\">(<span class=\"type\">int</span> l, G g)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= l &amp;&amp; l &lt;= _n);</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"built_in\">g</span>(<span class=\"built_in\">e</span>()));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == _n)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _n;</span><br><span class=\"line\">            l += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">                <span class=\"built_in\">pushdown</span>(l &gt;&gt; i);</span><br><span class=\"line\">            S sm = <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (l % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    l &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">g</span>(<span class=\"built_in\">op</span>(sm, d[l])))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (l &lt; size)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">pushdown</span>(l);</span><br><span class=\"line\">                        l = (<span class=\"number\">2</span> * l);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">g</span>(<span class=\"built_in\">op</span>(sm, d[l])))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sm = <span class=\"built_in\">op</span>(sm, d[l]);</span><br><span class=\"line\">                            l++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> l - size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sm = <span class=\"built_in\">op</span>(sm, d[l]);</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((l &amp; -l) != l);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"built_in\">bool</span> (*g)(S)&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">min_left</span><span class=\"params\">(<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">min_left</span>(r, [](S x)</span><br><span class=\"line\">                            &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">g</span>(x); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">G</span>&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">min_left</span><span class=\"params\">(<span class=\"type\">int</span> r, G g)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= r &amp;&amp; r &lt;= _n);</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"built_in\">g</span>(<span class=\"built_in\">e</span>()));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            r += size;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = log; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">                <span class=\"built_in\">pushdown</span>((r - <span class=\"number\">1</span>) &gt;&gt; i);</span><br><span class=\"line\">            S sm = <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r &gt; <span class=\"number\">1</span> &amp;&amp; (r % <span class=\"number\">2</span>))</span><br><span class=\"line\">                    r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">g</span>(<span class=\"built_in\">op</span>(d[r], sm)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (r &lt; size)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">pushdown</span>(r);</span><br><span class=\"line\">                        r = (<span class=\"number\">2</span> * r + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">g</span>(<span class=\"built_in\">op</span>(d[r], sm)))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sm = <span class=\"built_in\">op</span>(d[r], sm);</span><br><span class=\"line\">                            r--;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> r + <span class=\"number\">1</span> - size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sm = <span class=\"built_in\">op</span>(d[r], sm);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((r &amp; -r) != r);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-5-Segtree-h-segtree\">1.5 Segtree.h/segtree</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Segtrees</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">S</span>, <span class=\"built_in\">S</span> (*op)(S, S), <span class=\"built_in\">S</span> (*e)()&gt;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">segtree</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">segtree</span>() : <span class=\"built_in\">segtree</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">segtree</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> : segtree(vector&lt;S&gt;(n, e())) &#123;</span>&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">segtree</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;S&gt; &amp;v)</span> : _n(v.size())</span></span><br><span class=\"line\"><span class=\"function\">        &#123;</span></span><br><span class=\"line\">            size = <span class=\"built_in\">bit_ceil</span>(_n);</span><br><span class=\"line\">            log = <span class=\"built_in\">countr_zero</span>(size);</span><br><span class=\"line\">            d = <span class=\"built_in\">vector</span>&lt;S&gt;(<span class=\"number\">2</span> * size, <span class=\"built_in\">e</span>());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; _n; i++)</span><br><span class=\"line\">                d[size + i] = v[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">pushup</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> p, S x)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= p &amp;&amp; p &lt; _n);</span><br><span class=\"line\">            p += size;</span><br><span class=\"line\">            d[p] = x;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= log; i++)</span><br><span class=\"line\">                <span class=\"built_in\">pushup</span>(p &gt;&gt; i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">S <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= p &amp;&amp; p &lt; _n);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d[p + size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">S <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= l &amp;&amp; l &lt;= r &amp;&amp; r &lt;= _n);</span><br><span class=\"line\">            S sml = <span class=\"built_in\">e</span>(), smr = <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            l += size;</span><br><span class=\"line\">            r += size;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (l &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    sml = <span class=\"built_in\">op</span>(sml, d[l++]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    smr = <span class=\"built_in\">op</span>(d[--r], smr);</span><br><span class=\"line\">                l &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">op</span>(sml, smr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">S <span class=\"title\">all_query</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> d[<span class=\"number\">1</span>]; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"built_in\">bool</span> (*f)(S)&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max_right</span><span class=\"params\">(<span class=\"type\">int</span> l)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">max_right</span>(l, [](S x)</span><br><span class=\"line\">                             &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">f</span>(x); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">F</span>&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max_right</span><span class=\"params\">(<span class=\"type\">int</span> l, F f)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= l &amp;&amp; l &lt;= _n);</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"built_in\">f</span>(<span class=\"built_in\">e</span>()));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == _n)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _n;</span><br><span class=\"line\">            l += size;</span><br><span class=\"line\">            S sm = <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (l % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    l &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">f</span>(<span class=\"built_in\">op</span>(sm, d[l])))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (l &lt; size)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        l = (<span class=\"number\">2</span> * l);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">f</span>(<span class=\"built_in\">op</span>(sm, d[l])))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sm = <span class=\"built_in\">op</span>(sm, d[l]);</span><br><span class=\"line\">                            l++;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> l - size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sm = <span class=\"built_in\">op</span>(sm, d[l]);</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((l &amp; -l) != l);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"built_in\">bool</span> (*f)(S)&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">min_left</span><span class=\"params\">(<span class=\"type\">int</span> r)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">min_left</span>(r, [](S x)</span><br><span class=\"line\">                            &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">f</span>(x); &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">F</span>&gt;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">min_left</span><span class=\"params\">(<span class=\"type\">int</span> r, F f)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= r &amp;&amp; r &lt;= _n);</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(<span class=\"built_in\">f</span>(<span class=\"built_in\">e</span>()));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            r += size;</span><br><span class=\"line\">            S sm = <span class=\"built_in\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (r &gt; <span class=\"number\">1</span> &amp;&amp; (r % <span class=\"number\">2</span>))</span><br><span class=\"line\">                    r &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">f</span>(<span class=\"built_in\">op</span>(d[r], sm)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (r &lt; size)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        r = (<span class=\"number\">2</span> * r + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">f</span>(<span class=\"built_in\">op</span>(d[r], sm)))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sm = <span class=\"built_in\">op</span>(d[r], sm);</span><br><span class=\"line\">                            r--;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> r + <span class=\"number\">1</span> - size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sm = <span class=\"built_in\">op</span>(d[r], sm);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((r &amp; -r) != r);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"type\">int</span> _n, size, log;</span><br><span class=\"line\">        vector&lt;S&gt; d;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123; d[k] = <span class=\"built_in\">op</span>(d[<span class=\"number\">2</span> * k], d[<span class=\"number\">2</span> * k + <span class=\"number\">1</span>]); &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-6-线段树合并\">1.6 线段树合并</h3>\n<p>动态开点线段树合并，常出现于树上问题，父亲节点继承子节点信息。树上差分结合线段树合并维护路径上信息。</p>\n<p>示例是非永久化标记的写法。核心就这一个，具体可参考主席树写法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> rt1, <span class=\"type\">int</span> rt2, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rt1 | rt2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt1].maxnum += tree[rt2].maxnum;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rt1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    tree[rt1].l = <span class=\"built_in\">merge</span>(tree[rt1].l, tree[rt2].l, cl, mid);</span><br><span class=\"line\">    tree[rt1].r = <span class=\"built_in\">merge</span>(tree[rt1].r, tree[rt2].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>裸模板见下面线段树分裂中，有线段树合并部分。</p>\n<p>自己风格的主席树是用线段树合并写的，思路更清晰。</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-7-线段树分裂\">1.7 线段树分裂</h3>\n<p>八辈子碰不上一个。</p>\n<p>给出一个可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>（编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>），它支持以下操作：</p>\n<p><code>0 p x y</code>：将可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 中大于等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 且小于等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的值移动到一个新的可重集中（新可重集编号为从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 开始的正整数，是上一次产生的新可重集的编号+1）。</p>\n<p><code>1 p t</code>：将可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 中的数放入可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>，且清空可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>（数据保证在此后的操作中不会出现可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>）。</p>\n<p><code>2 p x q</code>：在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 这个可重集中加入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个数字 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>。</p>\n<p><code>3 p x y</code>：查询可重集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 中大于等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 且小于等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的值的个数。</p>\n<p><code>4 p k</code>：查询在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 这个可重集中第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>​ 小的数，不存在时输出 <code>-1</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线段树分裂</span></span><br><span class=\"line\"><span class=\"comment\">// 线段树合并逆向操作</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IOS ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);</span></span><br><span class=\"line\"><span class=\"comment\">// #define DEBUG 1</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">3e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, tot = <span class=\"number\">0</span>, root[maxn], a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r, sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> cl, cr;</span><br><span class=\"line\">&#125; tree[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ls(rt) tree[rt].l</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rs(rt) tree[rt].r</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rcl(rt) tree[rt].cl</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rcr(rt) tree[rt].cr</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sum(rt) tree[rt].sum</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(rt) = <span class=\"built_in\">sum</span>(<span class=\"built_in\">ls</span>(rt)) + <span class=\"built_in\">sum</span>(<span class=\"built_in\">rs</span>(rt));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> num, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span> <span class=\"comment\">// 单点修改权值线段树</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt = ++tot;</span><br><span class=\"line\">        <span class=\"built_in\">rcl</span>(rt) = cl, <span class=\"built_in\">rcr</span>(rt) = cr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(rt) += num;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(<span class=\"built_in\">ls</span>(rt), num, pos, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">update</span>(<span class=\"built_in\">rs</span>(rt), num, pos, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> k, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span> <span class=\"comment\">// 查询区间第k小，线段树上二分</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cl;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">sum</span>(<span class=\"built_in\">ls</span>(rt)) &gt;= k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">querykth</span>(<span class=\"built_in\">ls</span>(rt), k, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">querykth</span>(<span class=\"built_in\">rs</span>(rt), k - <span class=\"built_in\">sum</span>(<span class=\"built_in\">ls</span>(rt)), mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryinterval</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span> <span class=\"comment\">// 查询大于等于x小于等于y的元素个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(rt);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">queryinterval</span>(<span class=\"built_in\">ls</span>(rt), l, r, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">queryinterval</span>(<span class=\"built_in\">rs</span>(rt), l, r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">segmerge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">void</span>(rt1 = rt1 + rt2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">void</span>(<span class=\"built_in\">sum</span>(rt1) += <span class=\"built_in\">sum</span>(rt2));</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">segmerge</span>(<span class=\"built_in\">ls</span>(rt1), <span class=\"built_in\">ls</span>(rt2), cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">segmerge</span>(<span class=\"built_in\">rs</span>(rt1), <span class=\"built_in\">rs</span>(rt2), mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">segsplit</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt2 = rt1;</span><br><span class=\"line\">        rt1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt2 = ++tot;</span><br><span class=\"line\">        <span class=\"built_in\">rcl</span>(rt2) = cl, <span class=\"built_in\">rcr</span>(rt2) = cr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">segsplit</span>(<span class=\"built_in\">ls</span>(rt1), <span class=\"built_in\">ls</span>(rt2), l, r, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">segsplit</span>(<span class=\"built_in\">rs</span>(rt1), <span class=\"built_in\">rs</span>(rt2), l, r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt1);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(root[<span class=\"number\">1</span>], a[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, x, y, z;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (op)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">            <span class=\"built_in\">segsplit</span>(root[x], root[cnt], y, z);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            <span class=\"built_in\">segmerge</span>(root[x], root[y]);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(root[x], y, z);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">queryinterval</span>(root[x], y, z) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">querykth</span>(root[x], y) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-8-扫描线\">1.8 扫描线</h3>\n<h4 id=\"1-8-1-求矩形面积的并\">1.8.1 求矩形面积的并</h4>\n<p>扫描线问题 <em><strong>切记切记</strong></em> 维护好<em><strong>什么时候扫过，扫过的部分怎么算，已经扫完的部分如何删除的边界问题</strong></em>，也是重点DEBUG部分.</p>\n<p>求矩形面积的并每次查询的是整个区间内线段的长度。</p>\n<p><em><strong>Codeforces</strong></em>上有一道维护线段的加入和删除，区间查询某个区间是否有线段覆盖的题，<em><strong>注意，如果涉及到此问题</strong></em>，<strong>仅</strong>扫描线思想中<strong>标记不下传只维护当前线段树结点所表示的完整区间是否有线段</strong>的类线段树分治思想<em><strong>还需要额外判定以下内容：</strong></em></p>\n<p><em><strong>如果目标区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>已经被某条长线段完整覆盖，直接返回<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">true</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span>​​即可。</strong></em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 扫描线模板</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">segtrees</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    i64 sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> tags = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">4e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">segtrees tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\">i64 points[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[rt].tags)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].sum = points[cr + <span class=\"number\">1</span>] - points[cl];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[rt].sum = tree[rt &lt;&lt; <span class=\"number\">1</span>].sum + tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modifytags</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> d, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].tags += d;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(rt, cl, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">modifytags</span>(l, r, d, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">modifytags</span>(l, r, d, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(rt, cl, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1, y1, x2, y2;</span><br><span class=\"line\">&#125; rem[maxn];</span><br><span class=\"line\">vector&lt;tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; op;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> S = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1, y1, x2, y2;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x1 &gt; x2)</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(x1, x2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y1 &gt; y2)</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(y1, y2);</span><br><span class=\"line\">        rem[i] = &#123;x1, y1, x2, y2&#125;;</span><br><span class=\"line\">        points[++cnt] = x1;</span><br><span class=\"line\">        points[++cnt] = x2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(points + <span class=\"number\">1</span>, points + <span class=\"number\">1</span> + cnt);</span><br><span class=\"line\">    S = <span class=\"built_in\">unique</span>(points + <span class=\"number\">1</span>, points + <span class=\"number\">1</span> + cnt) - points - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1 = <span class=\"built_in\">lower_bound</span>(points + <span class=\"number\">1</span>, points + <span class=\"number\">1</span> + S, rem[i].x1) - points;</span><br><span class=\"line\">        <span class=\"type\">int</span> x2 = <span class=\"built_in\">lower_bound</span>(points + <span class=\"number\">1</span>, points + <span class=\"number\">1</span> + S, rem[i].x2) - points;</span><br><span class=\"line\">        op.<span class=\"built_in\">push_back</span>(&#123;rem[i].y1, x1, x2 - <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        op.<span class=\"built_in\">push_back</span>(&#123;rem[i].y2, x1, x2 - <span class=\"number\">1</span>, <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(op.<span class=\"built_in\">begin</span>(), op.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    i64 ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    i64 last = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [y, x1, x2, d] : op)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += (y - last) * tree[<span class=\"number\">1</span>].sum;</span><br><span class=\"line\">        <span class=\"built_in\">modifytags</span>(x1, x2, d, <span class=\"number\">1</span>, <span class=\"number\">1</span>, S);</span><br><span class=\"line\">        last = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-8-2-维护线段的并\">1.8.2 维护线段的并</h4>\n<p>其实有点废话，本质上不是扫描线，但是确实是通过维护线段区间的并判断此时有多少个合法情况，来源于牛客多校的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">Interval Selection</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">lS</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span></span></span></span>:</p>\n<p>有一个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的数组，当且仅当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>l</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mo>…</mo><msub><mi>a</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_l,a_{l+1},\\dots a_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 中的每个元素在当前区间内恰好出现 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 次时，数组中的子数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> 才是好数组。</p>\n<p>例如，对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a=[1,1,2,3,2,3,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>，区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>6</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[3,6]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">]</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>6</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,6]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">]</span></span></span></span>等都是好的。但是，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span>不符合条件，因为元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>只出现了一次；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>7</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,7]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">7</span><span class=\"mclose\">]</span></span></span></span>不符合条件，因为元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>出现了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>次。</p>\n<p>请找出可以选择的好区间的个数。</p>\n<p>通过线段并维护不合法区间数量即可，线段交过于难以维护。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IOS                      \\</span></span><br><span class=\"line\"><span class=\"meta\">    ios::sync_with_stdio(false); \\</span></span><br><span class=\"line\"><span class=\"meta\">    cin.tie(0);                  \\</span></span><br><span class=\"line\"><span class=\"meta\">    cout.tie(0);</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn], b[maxn];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l;</span><br><span class=\"line\">    <span class=\"type\">int</span> r;</span><br><span class=\"line\">    <span class=\"type\">int</span> cover;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">&#125; tree[maxn &lt;&lt; <span class=\"number\">2LL</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ls(rt) tree[rt &lt;&lt; 1LL]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rs(rt) tree[rt &lt;&lt; 1LL | 1]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> cover(rt) tree[rt].cover</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sum(rt) tree[rt].sum</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> getl(rt) tree[rt].l</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> getr(rt) tree[rt].r</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">cover</span>(rt))</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(rt) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">getl</span>(rt) == <span class=\"built_in\">getr</span>(rt))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(rt) = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(rt) = <span class=\"built_in\">sum</span>(rt &lt;&lt; <span class=\"number\">1LL</span>) + <span class=\"built_in\">sum</span>(rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> d, <span class=\"type\">int</span> rt = <span class=\"number\">1</span>, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cover</span>(rt) += d;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(l, r, d, rt &lt;&lt; <span class=\"number\">1LL</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(l, r, d, rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querysum</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt = <span class=\"number\">1</span>, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">cover</span>(rt))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">querysum</span>(l, r, rt &lt;&lt; <span class=\"number\">1LL</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">querysum</span>(l, r, rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> rt = <span class=\"number\">1</span>, <span class=\"type\">int</span> l = <span class=\"number\">1</span>, <span class=\"type\">int</span> r = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">getl</span>(rt) = l;</span><br><span class=\"line\">    <span class=\"built_in\">getr</span>(rt) = r;</span><br><span class=\"line\">    <span class=\"built_in\">cover</span>(rt) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sum</span>(rt) = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1LL</span>, l, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> k;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; rem[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        b[i] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> m = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rem[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + m + <span class=\"number\">1</span>, a[i]) - b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rem[a[i]].<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rem[a[i]].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rem[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        <span class=\"type\">int</span> t = rem[a[i]].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = rem[a[i]][t - <span class=\"number\">1</span>] + <span class=\"number\">1</span>, r = rem[a[i]][t];</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(l, r, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t &gt;= k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = rem[a[i]][t - k] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            r = rem[a[i]][t - k + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(l, r, <span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>, l - <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            ans += <span class=\"built_in\">querysum</span>(l, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-9-主席树（静态区间第k小、小于等于第k小的和、小于等于前k小有多少个数）\">1.9 主席树（静态区间第k小、小于等于第k小的和、小于等于前k小有多少个数）</h3>\n<p>记住主席树的根本思想在于维护前缀和。</p>\n<p>另外，主席树复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>K</mi><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(Knlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，常数较大，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>5</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">n\\le 5e5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span></span></span></span>时如果确定必须用到主席树，算法复杂度必须严格纯<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>可能会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>T</mi><mi>L</mi><mi>E</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}TLE</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord mathnormal\" style=\"color:red;\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:red;\">E</span></span></span></span>​</p>\n<p><em><strong>附议：其实主席树根本就不需要离散化，动态开点的属性确保了树深度最多 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">logV</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>，一共 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>级别的数字确保了最多<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogV)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span>的空间复杂度，一定不会超，就是常数稍微大一点而已。这意味着主席树可以完全做到平替 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>01</mn><mi>T</mi><mi>r</mi><mi>i</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">01Trie</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">01</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">e</span></span></span></span>求异或最值问题。</strong></em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    i64 sum;</span><br><span class=\"line\">    i64 cnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">i64 bs[maxn]; <span class=\"comment\">// 离散化数组，下标离散化，内存为原数字</span></span><br><span class=\"line\">i64 a[maxn];</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> root[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        root[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    tree[tot] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[rt].cnt++;</span><br><span class=\"line\">    tree[rt].sum += bs[pos];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tree[rt].l, pos, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tree[rt].r, pos, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt1 |= rt2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[rt1].cnt += tree[rt2].cnt;</span><br><span class=\"line\">    tree[rt1].sum += tree[rt2].sum;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(tree[rt1].l, tree[rt2].l, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(tree[rt1].r, tree[rt2].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">tuple&lt;i64, i64, <span class=\"type\">int</span>&gt; <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> rt1, <span class=\"type\">int</span> rt2, <span class=\"type\">int</span> k, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;bs[cl], tree[rt2].sum - tree[rt1].sum, tree[rt2].cnt - tree[rt1].cnt&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> nowcnt = tree[tree[rt2].l].cnt - tree[tree[rt1].l].cnt;</span><br><span class=\"line\">    i64 nowsum = tree[tree[rt2].l].sum - tree[tree[rt1].l].sum;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowcnt &gt;= k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">querykth</span>(tree[rt1].l, tree[rt2].l, k, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> [kthrl, rsum, rcnt] = <span class=\"built_in\">querykth</span>(tree[rt1].r, tree[rt2].r, k - nowcnt, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;kthrl, nowsum + rsum, nowcnt + rcnt&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> sz = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<p>附：关于主席树的内存回收问题</p>\n<p>需要打标记，一个想删除的点可以被删除当且仅当任何版本都没有再使用这个点。尤其注意<code>merge</code>函数的处理问题。理论上涉及主席树老版本删除删除的题目，不应当在内存上进行卡制无内存回收无法通过的数据。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tot + <span class=\"number\">1</span> &lt; inf)</span><br><span class=\"line\">        tot++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tot = qs.<span class=\"built_in\">front</span>(), qs.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    viscnt[tot]++;</span><br><span class=\"line\">    tree[tot] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del_tree</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">del_tree</span>(tree[rt].l);</span><br><span class=\"line\">    <span class=\"built_in\">del_tree</span>(tree[rt].r);</span><br><span class=\"line\">    viscnt[rt]--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!viscnt[rt])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        qs.<span class=\"built_in\">push</span>(rt);</span><br><span class=\"line\">        tree[rt] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-10-主席树维护区间本质不同的元素个数（HH的项链）\">1.10 主席树维护区间本质不同的元素个数（HH的项链）</h3>\n<p>给定数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>，每次询问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>中有多少个不同元素的值出现？</p>\n<p>一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">trival</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>的做法是数每个元素最后一次出现的那一个。主席树下标开位置，记录该位置是否有颜色。</p>\n<p>记录<em><strong>颜色<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>最后一次出现的位置为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">pre_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></strong></em>，当前为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>位置，颜色为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo>=</mo><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">pos=pre_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>位置的线段树节点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>表示该位置不再计算，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">pos=i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>位置节点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">1</span></span></span></span>表示该节点计算颜色，更新<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>k</mi></msub><mo>=</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">pre_k=i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>。询问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>时查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">root[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>版本主席树。</p>\n<p>第一种做法有点像树状数组离线扫描线，不再写。</p>\n<p><em><strong>第二个更Trival的主席树做法</strong></em>：</p>\n<p>数每个元素数最左侧出现的那一个。思考，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>中位置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>上的元素如果做出贡献，那么记<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">pre_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<em><strong>位置 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>上的颜色在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>前最后一次出现的位置</strong></em>，第一次出现时记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">pre_i=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，则必然有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>i</mi></msub><mo>&lt;</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">pre_i&lt;l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>.</p>\n<p>对位置开权值树桶，维护<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">pre</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span></span></span></span>数组中值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">v=pre[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>出现了多少次。查询区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，则主席树查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">root[l-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">root[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>的差中，小于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>的值的和。注意，权树下标从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>开始，因保证<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">pre_i=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>表示位置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>​​上的颜色在整个序列中第一次出现。</p>\n<p>第二种方法更方便于维护一些被求和的东西。</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-11-主席树二维数点（HEOI2017-SuperBig常数，不推荐，建议离线树状数组扫描线，这里主要贴出来主席树构建时有区间update标记永久化）\">1.11 主席树二维数点（HEOI2017, SuperBig常数，不推荐，建议离线树状数组扫描线，这里主要贴出来主席树构建时有区间update标记永久化）</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Segtree_presistent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    vector&lt;node&gt; t;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; root;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>, n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> _n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        n = _n;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        root.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        t.<span class=\"built_in\">assign</span>(<span class=\"number\">32</span> * n + <span class=\"number\">10</span>, <span class=\"built_in\">node</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> d, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = ++cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t[rt].sum += <span class=\"number\">1ll</span> * d * (<span class=\"built_in\">min</span>(r, cr) - <span class=\"built_in\">max</span>(l, cl) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[rt].lazy += d;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1ll</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(t[rt].l, l, r, d, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(t[rt].r, l, r, d, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t[rt].sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1ll</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">            res += <span class=\"built_in\">query</span>(t[rt].l, l, r, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">            res += <span class=\"built_in\">query</span>(t[rt].r, l, r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res + <span class=\"number\">1ll</span> * (<span class=\"built_in\">min</span>(r, cr) - <span class=\"built_in\">max</span>(l, cl) + <span class=\"number\">1</span>) * t[rt].lazy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt1 = rt1 + rt2;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t[rt1].sum += t[rt2].sum;</span><br><span class=\"line\">        t[rt1].lazy += t[rt2].lazy;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1ll</span>;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(t[rt1].l, t[rt2].l, cl, mid);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(t[rt1].r, t[rt2].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Segtree_presistent seg;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">interval</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> w;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    vector&lt;vector&lt;interval&gt;&gt; G;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> _n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        n = _n;</span><br><span class=\"line\">        G.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;interval&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;l, r, w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Edge G;</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> l[maxn], r[maxn];</span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, p, q;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        l[i] = <span class=\"number\">0</span>, r[i] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; a[s.<span class=\"built_in\">top</span>()] &lt; a[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        l[i] = s.<span class=\"built_in\">empty</span>() ? <span class=\"number\">0ll</span> : s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; a[s.<span class=\"built_in\">top</span>()] &lt; a[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r[i] = s.<span class=\"built_in\">empty</span>() ? <span class=\"number\">1ll</span> * n + <span class=\"number\">1</span> : s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seg.<span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    G.<span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            G.<span class=\"built_in\">add_edge</span>(i, i + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>, p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l[i] &amp;&amp; r[i] &lt;= n)</span><br><span class=\"line\">            G.<span class=\"built_in\">add_edge</span>(l[i], r[i], r[i], p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l[i] &amp;&amp; i + <span class=\"number\">1</span> &lt;= r[i] - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            G.<span class=\"built_in\">add_edge</span>(l[i], i + <span class=\"number\">1</span>, r[i] - <span class=\"number\">1</span>, q);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r[i] &lt;= n &amp;&amp; l[i] + <span class=\"number\">1</span> &lt;= i - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            G.<span class=\"built_in\">add_edge</span>(r[i], l[i] + <span class=\"number\">1</span>, i - <span class=\"number\">1</span>, q);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [l, r, w] : G.G[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            seg.<span class=\"built_in\">modify</span>(seg.root[i], l, r, w, <span class=\"number\">1</span>, seg.n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        seg.<span class=\"built_in\">merge</span>(seg.root[i], seg.root[i - <span class=\"number\">1</span>], <span class=\"number\">1</span>, seg.n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        cout &lt;&lt; seg.<span class=\"built_in\">query</span>(seg.root[r], l, r, <span class=\"number\">1</span>, seg.n) - seg.<span class=\"built_in\">query</span>(seg.root[l - <span class=\"number\">1</span>], l, r, <span class=\"number\">1</span>, seg.n) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-12-带修主席树-树套树（动态区间第k小，单点修改）\">1.12 带修主席树/树套树（动态区间第k小，单点修改）</h3>\n<h4 id=\"1-12-1-动态区间第k小\">1.12.1 动态区间第k小</h4>\n<p>这个看怎么理解了，严格意义上根本不算主席树，属于树状数组套权值线段树。但是如果按前缀和理解主席树，<code>merge</code>函数视作对各个独立根的树求前缀和，树状数组就像是之前暴力预处理前缀和变成了将树直接绑在树状数组上，用树状数组求前缀和，也算说得过去。</p>\n<p>理论上区间修改也可以？</p>\n<p>注意潜在的空间爆炸问题。</p>\n<p>(显然可以，具体实现参考1.11区间加，1.2区间乘，相同逻辑)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> root[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> sz;</span><br><span class=\"line\"><span class=\"type\">int</span> bs[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> q;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x &amp; -x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    tree[tot] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0ll</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree[rt].sum += val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tree[rt].l, pos, val, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tree[rt].r, pos, val, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> realrt, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = realrt; i &lt;= n; i += <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(root[i], a[realrt], val, <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt1s, vector&lt;<span class=\"type\">int</span>&gt; &amp;rt2s, <span class=\"type\">int</span> k, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cl;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sums = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : rt2s)</span><br><span class=\"line\">        sums += tree[tree[j].l].sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : rt1s)</span><br><span class=\"line\">        sums -= tree[tree[j].l].sum;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sums &gt;= k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : rt2s)</span><br><span class=\"line\">            j = tree[j].l;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : rt1s)</span><br><span class=\"line\">            j = tree[j].l;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt1s, rt2s, k, cl, mid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : rt2s)</span><br><span class=\"line\">            j = tree[j].r;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : rt1s)</span><br><span class=\"line\">            j = tree[j].r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt1s, rt2s, k - sums, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querykth</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; rt1, rt2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = r; i; i -= <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt<span class=\"number\">2.</span><span class=\"built_in\">push_back</span>(root[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = l - <span class=\"number\">1</span>; i; i -= <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt<span class=\"number\">1.</span><span class=\"built_in\">push_back</span>(root[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt1, rt2, k, <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">qs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r, k;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">cs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pos, val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        bs[++cnt] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;tuple&lt;<span class=\"type\">char</span>, qs, cs&gt;&gt; <span class=\"built_in\">v</span>(q + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        cin &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;Q&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r, k;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class=\"line\">            v[i] = &#123;c, &#123;l, r, k&#125;, &#123;&#125;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos, val;</span><br><span class=\"line\">            cin &gt;&gt; pos &gt;&gt; val;</span><br><span class=\"line\">            bs[++cnt] = val;</span><br><span class=\"line\">            v[i] = &#123;c, &#123;&#125;, &#123;pos, val&#125;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(bs + <span class=\"number\">1</span>, bs + <span class=\"number\">1</span> + cnt);</span><br><span class=\"line\">    sz = <span class=\"built_in\">unique</span>(bs + <span class=\"number\">1</span>, bs + <span class=\"number\">1</span> + cnt) - bs - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">lower_bound</span>(bs + <span class=\"number\">1</span>, bs + <span class=\"number\">1</span> + sz, a[i]) - bs;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [ch, qss, css] = v[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;Q&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; bs[<span class=\"built_in\">querykth</span>(qss.l, qss.r, qss.k)] &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(css.pos, <span class=\"number\">-1</span>);</span><br><span class=\"line\">            a[css.pos] = <span class=\"built_in\">lower_bound</span>(bs + <span class=\"number\">1</span>, bs + <span class=\"number\">1</span> + sz, css.val) - bs;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(css.pos, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-12-2-静态二维矩形第k小\">1.12.2 静态二维矩形第k小</h4>\n<p>空间复杂度极高。看数据范围是否选择范围分治。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 int</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> sz = <span class=\"number\">1009</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        rt = ++tot;</span><br><span class=\"line\">    tree[rt].cnt++;</span><br><span class=\"line\">    tree[rt].sum += pos;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        tree[rt].l = <span class=\"built_in\">update</span>(tree[rt].l, pos, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tree[rt].r = <span class=\"built_in\">update</span>(tree[rt].r, pos, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querysum</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[rt].sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">querysum</span>(tree[rt].l, l, r, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        res += <span class=\"built_in\">querysum</span>(tree[rt].r, l, r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Fenwick</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    vector&lt;vector&lt;i64&gt;&gt; c;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; -x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Fenwick</span>(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m) : <span class=\"built_in\">n</span>(n), <span class=\"built_in\">m</span>(m), <span class=\"built_in\">c</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;i64&gt;(m + <span class=\"number\">1</span>, <span class=\"number\">0</span>)) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Fenwick</span>() : <span class=\"built_in\">n</span>(<span class=\"number\">0</span>), <span class=\"built_in\">m</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;m = m;</span><br><span class=\"line\">        c.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;i64&gt;(m + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, i64 v)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x; i &lt;= n; i += <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y; j &lt;= m; j += <span class=\"built_in\">lowbit</span>(j))</span><br><span class=\"line\">                c[i][j] = <span class=\"built_in\">update</span>(c[i][j], v, <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x; i; i -= <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y; j; j -= <span class=\"built_in\">lowbit</span>(j))</span><br><span class=\"line\">                res.<span class=\"built_in\">push_back</span>(c[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querysum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += tree[j].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querycnt</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += tree[j].cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryrcnt</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += tree[tree[j].r].cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryrsum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += tree[tree[j].r].sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">didl</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j = tree[j].l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">didr</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j = tree[j].r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryans</span><span class=\"params\">(<span class=\"type\">int</span> h, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             vector&lt;<span class=\"type\">int</span>&gt; &amp;rt1, vector&lt;<span class=\"type\">int</span>&gt; &amp;rt2, vector&lt;<span class=\"type\">int</span>&gt; &amp;rt3, vector&lt;<span class=\"type\">int</span>&gt; &amp;rt4, <span class=\"type\">int</span> cnts)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sums = <span class=\"built_in\">querysum</span>(rt1) + <span class=\"built_in\">querysum</span>(rt4) - <span class=\"built_in\">querysum</span>(rt2) - <span class=\"built_in\">querysum</span>(rt3);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sums &gt;= h)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> nowcnt = <span class=\"built_in\">querycnt</span>(rt1) + <span class=\"built_in\">querycnt</span>(rt4) - <span class=\"built_in\">querycnt</span>(rt2) - <span class=\"built_in\">querycnt</span>(rt3);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nowcnt &amp;&amp; sums - cl &gt;= h)</span><br><span class=\"line\">                nowcnt--, sums -= cl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cnts + nowcnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"built_in\">queryrsum</span>(rt1) + <span class=\"built_in\">queryrsum</span>(rt4) - <span class=\"built_in\">queryrsum</span>(rt2) - <span class=\"built_in\">queryrsum</span>(rt3);</span><br><span class=\"line\">    <span class=\"type\">int</span> newcnt = <span class=\"built_in\">queryrcnt</span>(rt1) + <span class=\"built_in\">queryrcnt</span>(rt4) - <span class=\"built_in\">queryrcnt</span>(rt2) - <span class=\"built_in\">queryrcnt</span>(rt3);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt;= h)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">didr</span>(rt1), <span class=\"built_in\">didr</span>(rt2), <span class=\"built_in\">didr</span>(rt3), <span class=\"built_in\">didr</span>(rt4);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">queryans</span>(h, mid + <span class=\"number\">1</span>, cr, rt1, rt2, rt3, rt4, cnts);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">didl</span>(rt1), <span class=\"built_in\">didl</span>(rt2), <span class=\"built_in\">didl</span>(rt3), <span class=\"built_in\">didl</span>(rt4);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">queryans</span>(h - sum, cl, mid, rt1, rt2, rt3, rt4, cnts + newcnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Fenwick fw;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryfinal</span><span class=\"params\">(<span class=\"type\">int</span> x1, <span class=\"type\">int</span> x2, <span class=\"type\">int</span> y1, <span class=\"type\">int</span> y2, <span class=\"type\">int</span> h)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; rt1, rt2, rt3, rt4;</span><br><span class=\"line\">    rt1 = fw.<span class=\"built_in\">query</span>(x1 - <span class=\"number\">1</span>, y1 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    rt2 = fw.<span class=\"built_in\">query</span>(x2, y1 - <span class=\"number\">1</span>);</span><br><span class=\"line\">    rt3 = fw.<span class=\"built_in\">query</span>(x1 - <span class=\"number\">1</span>, y2);</span><br><span class=\"line\">    rt4 = fw.<span class=\"built_in\">query</span>(x2, y2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">queryans</span>(h, <span class=\"number\">1</span>, sz, rt1, rt2, rt3, rt4, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    fw.<span class=\"built_in\">init</span>(n + <span class=\"number\">10</span>, m + <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            fw.<span class=\"built_in\">add</span>(i, j, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x1, x2, y1, y2, h;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; h;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">queryfinal</span>(x1, x2, y1, y2, h);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Poor QLW&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-13-主席树可持久化数组\">1.13 主席树可持久化数组</h3>\n<p>维护这样的一个长度为 $ N $ 的数组，支持如下几种操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 对于操作1，格式为$ v_i \\ 1 \\ &#123;loc&#125;_i \\ &#123;value&#125;_i $，即为在版本$ v_i $的基础上，将 $ a_&#123;&#123;loc&#125;_i&#125; $ 修改为 $ &#123;value&#125;_i $。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 对于操作2，格式为$ v_i \\ 2 \\ &#123;loc&#125;_i $，即访问版本$ v_i $中的 $ a_&#123;&#123;loc&#125;_i&#125; $的值，注意：**生成一样版本的对象应为 $v_i$**。</span><br></pre></td></tr></table></figure>\n<p>此外，每进行一次操作（<strong>对于操作2，即为生成一个完全一样的版本，不作任何改动</strong>），就会生成一个新的版本。版本编号即为当前操作的编号（从1开始编号，版本0表示初始状态数组）</p>\n<p><em><strong>注意和主席树不一样的地方，merge函数不赋值（因为是把剩下未变动的部分直接merge过来），修改时先改再merge，查询时先merge再改</strong></em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> sz;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    tree[tot] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rt1 |= rt2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// tree[rt1].num = tree[rt2].num;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(tree[rt1].l, tree[rt2].l, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(tree[rt1].r, tree[rt2].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        rt = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].num = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tree[rt].l, pos, val, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tree[rt].r, pos, val, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[rt].num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(tree[rt].l, pos, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(tree[rt].r, pos, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printtree</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = sz)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; tree[rt].num &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printtree</span>(tree[rt].l, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">printtree</span>(tree[rt].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> root[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> ver = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    sz = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        cin &gt;&gt; val;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(root[<span class=\"number\">0</span>], i, val, <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ver++;</span><br><span class=\"line\">        <span class=\"type\">int</span> v, op, pos, val;</span><br><span class=\"line\">        cin &gt;&gt; v &gt;&gt; op &gt;&gt; pos;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; val;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(root[ver], pos, val, <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(root[ver], root[v], <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(root[ver], root[v], <span class=\"number\">1</span>, sz);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">query</span>(root[ver], pos, <span class=\"number\">1</span>, sz) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-14-主席树可持久化并查集\">1.14 主席树可持久化并查集</h3>\n<p>给定 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个集合，第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 个集合内初始状态下只有一个数，为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>。</p>\n<p>有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 次操作。操作分为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 种：</p>\n<ul>\n<li><code>1 a b</code> 合并 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a,b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 所在集合；</li>\n<li><code>2 k</code> 回到第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 次操作（执行三种操作中的任意一种都记为一次操作）之后的状态；</li>\n<li><code>3 a b</code> 询问 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a,b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 是否属于同一集合，如果是则输出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，否则输出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n\\le 10^5,m\\le 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>只需注意一个点，路径压缩并查集复杂度是均摊的，恶劣情况下单次合并会是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>​的复杂度。所以要上按秩合并（启发式合并）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">presistent_array</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sz;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    node tree[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tot++;</span><br><span class=\"line\">        tree[tot] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt1 |= rt2;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// tree[rt1].num = tree[rt2].num;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(tree[rt1].l, tree[rt2].l, cl, mid);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(tree[rt1].r, tree[rt2].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            rt = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt].num = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(tree[rt].l, pos, val, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">update</span>(tree[rt].r, pos, val, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tree[rt].num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(tree[rt].l, pos, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(tree[rt].r, pos, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printtree</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sz; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">query</span>(rt, i, <span class=\"number\">1</span>, sz) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> root[maxn];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">array&lt;<span class=\"type\">int</span>, 2&gt; vers[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> ver = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> verfa = <span class=\"number\">0</span>, versiz = <span class=\"number\">0</span>;</span><br><span class=\"line\">presistent_array fa, siz; <span class=\"comment\">// 开两个数组，直接就是可持久化数组封起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getfather</span><span class=\"params\">(<span class=\"type\">int</span> fart, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> getf = fa.<span class=\"built_in\">query</span>(fart, x, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == getf)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">getfather</span>(fart, getf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">same</span><span class=\"params\">(<span class=\"type\">int</span> fart, <span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">getfather</span>(fart, u) == <span class=\"built_in\">getfather</span>(fart, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    fa.sz = siz.sz = n;</span><br><span class=\"line\">    vers[<span class=\"number\">0</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa.<span class=\"built_in\">update</span>(fa.root[vers[<span class=\"number\">0</span>][<span class=\"number\">0</span>]], i, i, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        siz.<span class=\"built_in\">update</span>(siz.root[vers[<span class=\"number\">0</span>][<span class=\"number\">1</span>]], i, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fa.printtree(fa.root[0]);</span></span><br><span class=\"line\">    <span class=\"comment\">// siz.printtree(siz.root[0]);</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ver++;</span><br><span class=\"line\">        vers[ver][<span class=\"number\">0</span>] = vers[ver][<span class=\"number\">1</span>] = ver;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, k;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; k;</span><br><span class=\"line\">            fa.<span class=\"built_in\">merge</span>(fa.root[vers[ver][<span class=\"number\">0</span>]], fa.root[vers[k][<span class=\"number\">0</span>]], <span class=\"number\">1</span>, n); <span class=\"comment\">// 版本回滚</span></span><br><span class=\"line\">            siz.<span class=\"built_in\">merge</span>(siz.root[vers[ver][<span class=\"number\">1</span>]], siz.root[vers[k][<span class=\"number\">1</span>]], <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">            fa.<span class=\"built_in\">merge</span>(fa.root[vers[ver][<span class=\"number\">0</span>]], fa.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">0</span>]], <span class=\"number\">1</span>, n); <span class=\"comment\">// 版本复制</span></span><br><span class=\"line\">            siz.<span class=\"built_in\">merge</span>(siz.root[vers[ver][<span class=\"number\">1</span>]], siz.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">1</span>]], <span class=\"number\">1</span>, n);</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">same</span>(fa.root[vers[ver][<span class=\"number\">0</span>]], u, v) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">            u = <span class=\"built_in\">getfather</span>(fa.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">0</span>]], u);</span><br><span class=\"line\">            v = <span class=\"built_in\">getfather</span>(fa.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">0</span>]], v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (u != v)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> szu = siz.<span class=\"built_in\">query</span>(siz.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">1</span>]], u, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">                <span class=\"type\">int</span> szv = siz.<span class=\"built_in\">query</span>(siz.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">1</span>]], v, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (szu &lt; szv)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(szu, szv);</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fa.<span class=\"built_in\">update</span>(fa.root[vers[ver][<span class=\"number\">0</span>]], v, u, <span class=\"number\">1</span>, n);           <span class=\"comment\">// fa[v]=u,小向大合并</span></span><br><span class=\"line\">                siz.<span class=\"built_in\">update</span>(siz.root[vers[ver][<span class=\"number\">1</span>]], u, szu + szv, <span class=\"number\">1</span>, n); <span class=\"comment\">// siz[u]+=sizv</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fa.<span class=\"built_in\">merge</span>(fa.root[vers[ver][<span class=\"number\">0</span>]], fa.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">0</span>]], <span class=\"number\">1</span>, n); <span class=\"comment\">// 先改再复制</span></span><br><span class=\"line\">            siz.<span class=\"built_in\">merge</span>(siz.root[vers[ver][<span class=\"number\">1</span>]], siz.root[vers[ver - <span class=\"number\">1</span>][<span class=\"number\">1</span>]], <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// fa.printtree(fa.root[vers[ver][0]]);</span></span><br><span class=\"line\">        <span class=\"comment\">// siz.printtree(siz.root[vers[ver][1]]);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-15-Li-Chao-Tree\">1.15 Li-Chao Tree</h3>\n<p>要求在平面直角坐标系下维护两个操作：</p>\n<ol>\n<li>在平面上加入一条线段。记第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 条被插入的线段的标号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>。</li>\n<li>给定一个数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，询问与直线 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">x = k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 相交的线段中，交点纵坐标最大的线段的编号。</li>\n</ol>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，保证 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq n \\leq 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>≤</mo><mn>39989</mn></mrow><annotation encoding=\"application/x-tex\">1 \\leq k, x_0, x_1 \\leq 39989</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">39989</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>y</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq y_0, y_1 \\leq 10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>​。</p>\n<p>李超树可以优秀的维护平面内添加线性函数线段以及查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mrow><msub><mi>f</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">max{f_i(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>，可用于斜率优化<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>​等。不支持加入线段后删除，如有必要，考虑<em><strong>线段树分治+李超树实现</strong></em>。</p>\n<p>李超树的核心为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>p</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">upd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span></span></span></span>函数，更新线段树<em><strong>完整节点</strong></em>区间内的信息。</p>\n<p>具体来说，设当前区间的中点为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">mid</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span></span></span></span>，我们拿新线段<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>在中点处的值与原最优线段<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>在中点处的值作比较。</p>\n<p>如果新线段<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>更优，则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>交换。那么现在考虑在中点处<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>不如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>优的情况：</p>\n<ol>\n<li>若在左端点处<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>更优，那么<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>必然在左半区间中产生了交点，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>只有在左区间才可能优于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>，递归到左儿子中进行下传；</li>\n<li>若在右端点处<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>更优，那么<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>必然在右半区间中产生了交点，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>只有在右区间才可能优于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>，递归到右儿子中进行下传；</li>\n<li>若在左右端点处<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>都更优，那么<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>不可能成为答案，不需要继续下传。</li>\n</ol>\n<p>除了这两种情况之外，还有一种情况是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>刚好交于中点，在程序实现时可以归入中点处<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>不如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>优的的情况，结果会往<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>更优的一个端点进行递归下传。</p>\n<p>最后将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>作为当前区间的懒标记。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> d64 long double</span></span><br><span class=\"line\"><span class=\"comment\">// #define MOD1 39989</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MOD1 39989</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MOD2 1000000000</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// int l, r;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> bestcnt;</span><br><span class=\"line\">&#125; tree[maxn &lt;&lt; <span class=\"number\">2LL</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">segments</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// int l, r;</span></span><br><span class=\"line\">    d64 k, b;</span><br><span class=\"line\">&#125; segs[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(d64 x, d64 y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x - y &gt; <span class=\"number\">1e-9</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y - x &gt; <span class=\"number\">1e-9</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">d64 <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> segs[id].k * x + segs[id].b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x0, <span class=\"type\">int</span> y0, <span class=\"type\">int</span> x1, <span class=\"type\">int</span> y1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x0 == x1)</span><br><span class=\"line\">        segs[cnt].k = <span class=\"number\">0</span>, segs[cnt].b = <span class=\"built_in\">max</span>(y0, y1);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        segs[cnt].k = <span class=\"number\">1.0</span> * (y1 - y0) / (x1 - x0), segs[cnt].b = y0 - segs[cnt].k * x0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"type\">int</span> now, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;v = tree[rt].bestcnt;</span><br><span class=\"line\">    <span class=\"type\">int</span> bmid = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">calc</span>(now, mid), <span class=\"built_in\">calc</span>(v, mid));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bmid == <span class=\"number\">1</span> || (!bmid &amp;&amp; now &lt; v))</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(now, v);</span><br><span class=\"line\">    <span class=\"type\">int</span> bl = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">calc</span>(now, cl), <span class=\"built_in\">calc</span>(v, cl)), br = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">calc</span>(now, cr), <span class=\"built_in\">calc</span>(v, cr));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bl == <span class=\"number\">1</span> || (!bl &amp;&amp; now &lt; v))</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(now, rt &lt;&lt; <span class=\"number\">1LL</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (br == <span class=\"number\">1</span> || (!br &amp;&amp; now &lt; v))</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(now, rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1LL</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> now, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(now, rt, cl, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(now, l, r, rt &lt;&lt; <span class=\"number\">1LL</span>, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(now, l, r, rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1LL</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">double</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">max</span><span class=\"params\">(pair&lt;<span class=\"type\">double</span>, <span class=\"type\">int</span>&gt; a, pair&lt;<span class=\"type\">double</span>, <span class=\"type\">int</span>&gt; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">cmp</span>(a.first, b.first) == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">cmp</span>(a.first, b.first) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.second &lt; b.second ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">double</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> d, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cr &lt; d || cl &gt; d)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> res = <span class=\"built_in\">calc</span>(tree[rt].bestcnt, d);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;res, tree[rt].bestcnt&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(&#123;res, tree[rt].bestcnt&#125;, <span class=\"built_in\">max</span>(<span class=\"built_in\">query</span>(d, rt &lt;&lt; <span class=\"number\">1LL</span>, cl, mid), <span class=\"built_in\">query</span>(d, rt &lt;&lt; <span class=\"number\">1LL</span> | <span class=\"number\">1LL</span>, mid + <span class=\"number\">1</span>, cr)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> opt;</span><br><span class=\"line\">        cin &gt;&gt; opt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r, a, b;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; a &gt;&gt; r &gt;&gt; b;</span><br><span class=\"line\">            l = (l + lastans - <span class=\"number\">1</span>) % MOD1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            r = (r + lastans - <span class=\"number\">1</span>) % MOD1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            a = (a + lastans - <span class=\"number\">1</span>) % MOD2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            b = (b + lastans - <span class=\"number\">1</span>) % MOD2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &gt; r)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(l, r), <span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(l, a, r, b);</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(cnt, l, r, <span class=\"number\">1</span>, <span class=\"number\">1</span>, MOD1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            x = (x + lastans - <span class=\"number\">1</span>) % MOD1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            pair&lt;<span class=\"type\">double</span>, <span class=\"type\">int</span>&gt; ans = <span class=\"built_in\">query</span>(x, <span class=\"number\">1</span>, <span class=\"number\">1</span>, MOD1);</span><br><span class=\"line\">            cout &lt;&lt; ans.second &lt;&lt; endl;</span><br><span class=\"line\">            lastans = ans.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-16-类Li-Chao-Tree-递归区间合并\">1.16 类Li-Chao Tree  /  递归区间合并</h3>\n<p>思维，和李超树没有关系，在于两个区间合并<code>pushup</code>的时候比较困难，需要像李超树的<code>upd</code>一样递归处理的情况。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup1</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[rt].maxn = <span class=\"built_in\">max</span>(tree[rt &lt;&lt; <span class=\"number\">1</span>].maxn, tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].maxn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pushup2</span><span class=\"params\">(d32 tar, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[rt].maxn &lt;= tar)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[cl] &gt; tar)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[rt].len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a[cl] &gt; tar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[rt &lt;&lt; <span class=\"number\">1</span>].maxn &lt;= tar)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">pushup2</span>(tar, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pushup2</span>(tar, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid) + tree[rt].len - tree[rt &lt;&lt; <span class=\"number\">1</span>].len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pushup1</span>(rt);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    tree[rt].len = tree[rt &lt;&lt; <span class=\"number\">1</span>].len + <span class=\"built_in\">pushup2</span>(tree[rt &lt;&lt; <span class=\"number\">1</span>].maxn, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-17-线段树分治\">1.17 线段树分治</h3>\n<p>假如你需要维护一些信息，这些信息会在某一个时间段内出现，要求在离线的前提下回答某一个时刻的信息并，则可以考虑使用线段树分治的技巧。</p>\n<p>实际上线段树分治常有以下用途：</p>\n<ol>\n<li>用原本不支持删除但是支持撤销的数据结构来模拟删除操作。如朴素的并查集无法高效支持删边操作。</li>\n<li>不同属性的数据分别计算。如需要求出除了某一种颜色外，其他颜色数据的答案。</li>\n</ol>\n<p>首先我们建立一个线段树来维护时刻，每一个节点维护一个 <code>vector</code> 来存储位于这一段时刻的信息。</p>\n<p>插入一个信息到线段树中和普通线段树的区间修改是类似的。</p>\n<p>然后我们考虑如何处理每一个时间段的信息并。考虑从根节点开始分治，维护当前的信息并，然后每到一个节点的时候将这个节点的所有信息进行合并。回溯时撤销这一部分的贡献。最后到达叶子节点时的信息并就是对应的答案。</p>\n<p>如果更改信息的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(T(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>，可以通过设置一个栈保留更改，以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(T(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>的时间复杂度撤销。撤销不维持均摊复杂度。</p>\n<p>整个分治流程的总时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn(T(n)+M(n)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)))</span></span></span></span>的，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(M(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>为合并信息的时间复杂度，空间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>​。</p>\n<p>并查集不嫌麻烦最好写可持久化，不用栈，速度还偏快一点,缺点是码量确实高，而且一旦抄错了不好DEBUG。<em><strong>如果写普通并查集，必须写按秩合并，路径压缩因为均摊复杂度不被支持</strong></em>。撤销时，直接通过栈所记录的<code>merge</code>前的信息直接复原即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ls (i &lt;&lt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rs (i &lt;&lt; 1 | 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;Object&gt; tree[N &lt;&lt; <span class=\"number\">2</span>];  <span class=\"comment\">// 线段树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> ql, <span class=\"type\">int</span> qr, Object obj, <span class=\"type\">int</span> i, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;  <span class=\"comment\">// 插入</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class=\"line\">    tree[i].<span class=\"built_in\">push_back</span>(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ql &lt;= mid) <span class=\"built_in\">update</span>(ql, qr, obj, ls, l, mid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (qr &gt; mid) <span class=\"built_in\">update</span>(ql, qr, obj, rs, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;Object&gt; sta;  <span class=\"comment\">// 用于撤销的栈</span></span><br><span class=\"line\">Object now;         <span class=\"comment\">// 当前的信息并</span></span><br><span class=\"line\">Object ans[N];      <span class=\"comment\">// 答案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> lvl = sta.<span class=\"built_in\">size</span>();  <span class=\"comment\">// 记录一下应当撤销到第几个</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (Object x : tree[i]) sta.<span class=\"built_in\">push</span>(now), now = <span class=\"built_in\">Merge</span>(now, x);  <span class=\"comment\">// 合并信息</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">    ans[i] = now;  <span class=\"comment\">// 记录一下答案</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">solve</span>(ls, l, mid), <span class=\"built_in\">solve</span>(rs, mid + <span class=\"number\">1</span>, r);  <span class=\"comment\">// 分治</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (sta.<span class=\"built_in\">size</span>() != lvl) &#123;                  <span class=\"comment\">// 撤销信息</span></span><br><span class=\"line\">    now = sta.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    sta.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-18-线段树维护最大子段和\">1.18 线段树维护最大子段和</h3>\n<p>线段树结点维护区间最值，区间前缀和最值，区间后缀和最值，区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">op</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span></span></span></span>​​的时候比较一下两个区间的区间最大子段和以及前段后缀+后段前缀的和即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">segtree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i64 sum, pre, suf, maxans;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    node tree[maxn &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">    i64 a[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> lson = rt &lt;&lt; <span class=\"number\">1</span>, rson = rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\">        i64 interval = tree[lson].suf + tree[rson].pre;</span><br><span class=\"line\">        tree[rt].sum = tree[lson].sum + tree[rson].sum;</span><br><span class=\"line\">        tree[rt].pre = <span class=\"built_in\">max</span>(tree[lson].pre, tree[lson].sum + tree[rson].pre);</span><br><span class=\"line\">        tree[rt].suf = <span class=\"built_in\">max</span>(tree[rson].suf, tree[rson].sum + tree[lson].suf);</span><br><span class=\"line\">        tree[rt].maxans = <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(tree[lson].maxans, tree[rson].maxans), interval);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt].sum = tree[rt].pre = tree[rt].suf = tree[rt].maxans = a[cl];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt].sum = tree[rt].pre = tree[rt].suf = tree[rt].maxans = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(pos, val, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(pos, val, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">node <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tree[rt];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &lt;= mid)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &gt; mid)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        node lson = <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span>, cl, mid);</span><br><span class=\"line\">        node rson = <span class=\"built_in\">query</span>(l, r, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        node ret;</span><br><span class=\"line\">        i64 interval = lson.suf + rson.pre;</span><br><span class=\"line\">        ret.sum = lson.sum + rson.sum;</span><br><span class=\"line\">        ret.pre = <span class=\"built_in\">max</span>(lson.pre, lson.sum + rson.pre);</span><br><span class=\"line\">        ret.suf = <span class=\"built_in\">max</span>(rson.suf, rson.sum + lson.suf);</span><br><span class=\"line\">        ret.maxans = <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(lson.maxans, rson.maxans), interval);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">segtree seg;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; seg.a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seg.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, x, y;</span><br><span class=\"line\">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; y)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">            cout &lt;&lt; seg.<span class=\"built_in\">query</span>(x, y, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n).maxans &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            seg.<span class=\"built_in\">modify</span>(x, y, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-19-权值树维护区间有多少个不同的数\">1.19 权值树维护区间有多少个不同的数</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">HH</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">HH</span></span></span></span>的项链，碰到相同的数就把前面那个出现的位置删掉（权值树-1），后面新出现的位置加上（权值树+1）</p>\n<p>这玩意儿没求前缀和，不能算主席树。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &lt; <span class=\"string\">&#x27;0&#x27;</span> || ch &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + ch - <span class=\"string\">&#x27;0&#x27;</span>, ch = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>), x = -x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        <span class=\"built_in\">write</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Persistant_segtree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    vector&lt;node&gt; tree;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Persistant_segtree</span>(<span class=\"type\">int</span> n) : <span class=\"built_in\">n</span>(n), <span class=\"built_in\">tot</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree.<span class=\"built_in\">assign</span>((n &lt;&lt; <span class=\"number\">5</span>) + <span class=\"number\">9</span>, <span class=\"built_in\">node</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Persistant_segtree</span>() : <span class=\"built_in\">n</span>(<span class=\"number\">0</span>), <span class=\"built_in\">tot</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tree = <span class=\"built_in\">vector</span>&lt;node&gt;((n &lt;&lt; <span class=\"number\">5</span>) + <span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> rt2, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt1)</span><br><span class=\"line\">            rt1 = ++tot;</span><br><span class=\"line\">        tree[rt1].sum = tree[rt2].sum + val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(tree[rt1].l, tree[rt2].l, pos, val, cl, mid), tree[rt1].r = tree[rt2].r;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">update</span>(tree[rt1].r, tree[rt2].r, pos, val, mid + <span class=\"number\">1</span>, cr), tree[rt1].l = tree[rt2].l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= cl &amp;&amp; cr &lt;= r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tree[rt].sum;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &lt;= mid)</span><br><span class=\"line\">            res += <span class=\"built_in\">query</span>(tree[rt].l, l, r, cl, mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &gt; mid)</span><br><span class=\"line\">            res += <span class=\"built_in\">query</span>(tree[rt].r, l, r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Persistant_segtree pst;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn], lastpos[maxn], root[maxn];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    pst.<span class=\"built_in\">init</span>(maxn);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastpos[a[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pst.<span class=\"built_in\">update</span>(root[i], root[i - <span class=\"number\">1</span>], lastpos[a[i]], <span class=\"number\">-1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">            pst.<span class=\"built_in\">update</span>(root[i], root[i], i, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">            lastpos[a[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pst.<span class=\"built_in\">update</span>(root[i], root[i - <span class=\"number\">1</span>], i, <span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">            lastpos[a[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        l = <span class=\"built_in\">read</span>(), r = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"built_in\">write</span>(pst.<span class=\"built_in\">query</span>(root[r], l, r, <span class=\"number\">1</span>, n));</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(endl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-20-线段树优化建图\">1.20  线段树优化建图</h3>\n<p>通过线段树区间的性质实现线段树区间连边建图。需要注意的是，从区间连出需要走出树，向区间连入需要走入树，必须保证建立两棵树，出树向根有向边<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mi>o</mi><mi>n</mi><mi>s</mi><mo>→</mo><mi>f</mi><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(sons\\to fa)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">so</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>，入树从根向下有向边<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mi>a</mi><mo>→</mo><mi>s</mi><mi>o</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(fa\\to sons)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">so</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>，不可以串行。叶子结点两棵树倒是可以共享，不共享的话叶子结点要做好无向边联通，详情见示例。</p>\n<img src=\"https://oi-wiki.org/ds/images/segt6.svg\" alt=\"出树\" style=\"zoom:50%;\" />\n<img src=\"https://oi-wiki.org/ds/images/segt5.svg\" alt=\"入树\" style=\"zoom:50%;\" />\n<p>有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>个点、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>次操作。每一种操作为以下三种类型中的一种:</p>\n<ol>\n<li>连一条<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>→</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">u→v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>的有向边,权值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>。</li>\n<li>对于所有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i∈[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>连一条<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>→</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">u→i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>的有向边,权值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">ω</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>。</li>\n<li>对于所有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i∈[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>连一条<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>→</mo><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">i→u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>的有向边,权值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">ω</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>。</li>\n</ol>\n<p>求从点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>到其他点的最短路。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator=\"true\">,</mo><mn>1</mn><mo>≤</mo><mi>w</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1≤n,q≤10^5,1≤w≤10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>​。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线段树优化建图</span></span><br><span class=\"line\"><span class=\"comment\">// 区间对区间连边，区间对单点连边，单点对区间连边</span></span><br><span class=\"line\"><span class=\"comment\">// 显然的，需要动态开点线段树，建立的虚点参与跑最短路</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">1e18</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> tottree = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> root1 = <span class=\"number\">0</span>, root2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">4e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> head[maxn &lt;&lt; <span class=\"number\">3LL</span>], to[maxn &lt;&lt; <span class=\"number\">3LL</span>], nxt[maxn &lt;&lt; <span class=\"number\">3LL</span>], w[maxn &lt;&lt; <span class=\"number\">3LL</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rtnum1[maxn], rtnum2[maxn];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"type\">int</span> cl, cr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">3LL</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    to[++cnt] = v;</span><br><span class=\"line\">    ::w[cnt] = w;</span><br><span class=\"line\">    nxt[cnt] = head[u];</span><br><span class=\"line\">    head[u] = cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build1</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span> <span class=\"comment\">// 出树，区间连出</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        rt = ++tottree;</span><br><span class=\"line\">    tree[rt].cl = cl;</span><br><span class=\"line\">    tree[rt].cr = cr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rtnum1[cl] = rt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build1</span>(tree[rt].l, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build1</span>(tree[rt].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">add_edge</span>(tree[rt].l, rt, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add_edge</span>(tree[rt].r, rt, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build2</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span> <span class=\"comment\">// 入树，区间连入</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        rt = ++tottree;</span><br><span class=\"line\">    tree[rt].cl = cl;</span><br><span class=\"line\">    tree[rt].cr = cr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rtnum2[cl] = rt;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(rt, rtnum1[cl], <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build2</span>(tree[rt].l, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build2</span>(tree[rt].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">add_edge</span>(rt, tree[rt].l, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">add_edge</span>(rt, tree[rt].r, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update1</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> u, <span class=\"type\">int</span> vl, <span class=\"type\">int</span> vr, <span class=\"type\">int</span> w, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vl &lt;= cl &amp;&amp; cr &lt;= vr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(rtnum1[u], rt, w);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vl &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update1</span>(tree[rt].l, u, vl, vr, w, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vr &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">update1</span>(tree[rt].r, u, vl, vr, w, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update2</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> v, <span class=\"type\">int</span> ul, <span class=\"type\">int</span> ur, <span class=\"type\">int</span> w, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ul &lt;= cl &amp;&amp; cr &lt;= ur)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(rt, rtnum2[v], w);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ul &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">update2</span>(tree[rt].l, v, ul, ur, w, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ur &gt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">update2</span>(tree[rt].r, v, ul, ur, w, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dist[maxn &lt;&lt; <span class=\"number\">3LL</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[maxn &lt;&lt; <span class=\"number\">3LL</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">updist</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> cl = <span class=\"number\">1</span>, <span class=\"type\">int</span> cr = n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    dist[tree[rt].l] = <span class=\"built_in\">min</span>(dist[rt], dist[tree[rt].l]);</span><br><span class=\"line\">    dist[tree[rt].r] = <span class=\"built_in\">min</span>(dist[rt], dist[tree[rt].r]);</span><br><span class=\"line\">    <span class=\"built_in\">updist</span>(tree[rt].l, cl, mid);</span><br><span class=\"line\">    <span class=\"built_in\">updist</span>(tree[rt].r, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"type\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// memset(dist, 0x3f3f3f3f, sizeof(int) * (tottree + 10));</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tottree + <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">        dist[i] = INF, vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">qu</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> dis, pos;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> qu &amp;x) <span class=\"type\">const</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.dis &lt; dis;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    priority_queue&lt;qu&gt; q;</span><br><span class=\"line\">    dist[rtnum1[s]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, rtnum1[s]&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [disu, u] = q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = nxt[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = to[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[v] &gt; dist[u] + w[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dist[v] = dist[u] + w[i];</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;dist[v], v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// updist(root);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) * (tottree + <span class=\"number\">10</span>));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>, tottree = <span class=\"number\">0</span>;</span><br><span class=\"line\">    root1 = <span class=\"number\">0</span>, root2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> q, s;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"built_in\">build1</span>(root1);</span><br><span class=\"line\">    <span class=\"built_in\">build2</span>(root2);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w, l, r;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (op)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">            <span class=\"built_in\">add_edge</span>(rtnum1[u], rtnum2[v], w);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            cin &gt;&gt; u &gt;&gt; l &gt;&gt; r &gt;&gt; w;</span><br><span class=\"line\">            <span class=\"built_in\">update1</span>(root2, u, l, r, w);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            cin &gt;&gt; v &gt;&gt; l &gt;&gt; r &gt;&gt; w;</span><br><span class=\"line\">            <span class=\"built_in\">update2</span>(root1, v, l, r, w);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == s)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;0 &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dist[rtnum2[i]] == INF)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;-1 &quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; dist[rtnum2[i]] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-21-吉司机线段树\">*1.21 吉司机线段树</h3>\n<p>线段树维护区间最值操作与区间历史最值的模板。</p>\n<p>给出一个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的数列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>，同时定义一个辅助数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> 开始与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 完全相同。接下来进行了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 次操作，操作有五种类型，按以下格式给出：</p>\n<ul>\n<li><code>1 l r k</code>：对于所有的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i\\in[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 加上 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 可以为负数）。</li>\n<li><code>2 l r v</code>：对于所有的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i\\in[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 变成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\min(A_i,v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">min</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li><code>3 l r</code>：求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=l}^{r}A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</li>\n<li><code>4 l r</code>：对于所有的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i\\in[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的最大值。</li>\n<li><code>5 l r</code>：对于所有的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i\\in[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的最大值。</li>\n</ul>\n<p>在每一次操作后，我们都进行一次更新，让 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub><mo>←</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>B</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B_i\\gets\\max(B_i,A_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>保证 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\leq n,m\\leq 5\\times 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo>≤</mo><msub><mi>A</mi><mi>i</mi></msub><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">-5\\times10^8\\leq A_i\\leq 5\\times10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9501em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span>,</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>p</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">op\\in[1,5]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">]</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq l\\leq r \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>2000</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">-2000\\leq k\\leq 2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2000</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2000</span></span></span></span>,</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo>≤</mo><mi>v</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding=\"application/x-tex\">-5\\times10^8\\leq v\\leq 5\\times10^8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9501em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span>​​。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">21</span>],*p1=buf,*p2=buf,obuf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">21</span>],*o=obuf;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> g()(p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> s=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> c=<span class=\"built_in\">g</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;!<span class=\"built_in\">isdigit</span>(c);c=<span class=\"built_in\">g</span>())</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>)f=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;<span class=\"built_in\">isdigit</span>(c);c=<span class=\"built_in\">g</span>())</span><br><span class=\"line\">        s=s*<span class=\"number\">10</span>+c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s*f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(ll x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">char</span> buf[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> len=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">0</span>)<span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>),x=-x;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> buf[++len]=x%<span class=\"number\">10</span>,x/=<span class=\"number\">10</span>;<span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len&gt;=<span class=\"number\">0</span>)<span class=\"built_in\">putchar</span>(buf[len--]+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,op,l,r,k,v;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">segment_tree</span>&#123;</span><br><span class=\"line\">    ll sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,maxa,cnt,se,maxb;</span><br><span class=\"line\">    <span class=\"type\">int</span> add1,add2,add3,add4;</span><br><span class=\"line\">&#125;s[<span class=\"number\">2000005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s[p].sum=s[p*<span class=\"number\">2</span>].sum+s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].sum;</span><br><span class=\"line\">    s[p].maxa=<span class=\"built_in\">max</span>(s[p*<span class=\"number\">2</span>].maxa,s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxa);</span><br><span class=\"line\">    s[p].maxb=<span class=\"built_in\">max</span>(s[p*<span class=\"number\">2</span>].maxb,s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxb);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[p*<span class=\"number\">2</span>].maxa==s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxa)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p].se=<span class=\"built_in\">max</span>(s[p*<span class=\"number\">2</span>].se,s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].se);</span><br><span class=\"line\">        s[p].cnt=s[p*<span class=\"number\">2</span>].cnt+s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[p*<span class=\"number\">2</span>].maxa&gt;s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxa)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p].se=<span class=\"built_in\">max</span>(s[p*<span class=\"number\">2</span>].se,s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxa);</span><br><span class=\"line\">        s[p].cnt=s[p*<span class=\"number\">2</span>].cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p].se=<span class=\"built_in\">max</span>(s[p*<span class=\"number\">2</span>].maxa,s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].se);</span><br><span class=\"line\">        s[p].cnt=s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s[p].l=l,s[p].r=r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s[p].sum=s[p].maxa=s[p].maxb=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        s[p].cnt=<span class=\"number\">1</span>,s[p].se=<span class=\"number\">-2e9</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,mid,p*<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid<span class=\"number\">+1</span>,r,p*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">push_up</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">int</span> k1,<span class=\"type\">int</span> k2,<span class=\"type\">int</span> k3,<span class=\"type\">int</span> k4,<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    s[p].sum+=<span class=\"number\">1ll</span>*k1*s[p].cnt<span class=\"number\">+1ll</span>*k2*(s[p].r-s[p].l<span class=\"number\">+1</span>-s[p].cnt);</span><br><span class=\"line\">    s[p].maxb=<span class=\"built_in\">max</span>(s[p].maxb,s[p].maxa+k3);</span><br><span class=\"line\">    s[p].maxa+=k1;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[p].se!=<span class=\"number\">-2e9</span>)s[p].se+=k2;</span><br><span class=\"line\">    s[p].add3=<span class=\"built_in\">max</span>(s[p].add3,s[p].add1+k3);</span><br><span class=\"line\">    s[p].add4=<span class=\"built_in\">max</span>(s[p].add4,s[p].add2+k4);</span><br><span class=\"line\">    s[p].add1+=k1,s[p].add2+=k2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxn=<span class=\"built_in\">max</span>(s[p*<span class=\"number\">2</span>].maxa,s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxa);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[p*<span class=\"number\">2</span>].maxa==maxn)</span><br><span class=\"line\">        <span class=\"built_in\">change</span>(s[p].add1,s[p].add2,s[p].add3,s[p].add4,p*<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">change</span>(s[p].add2,s[p].add2,s[p].add4,s[p].add4,p*<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[p*<span class=\"number\">2</span><span class=\"number\">+1</span>].maxa==maxn)</span><br><span class=\"line\">        <span class=\"built_in\">change</span>(s[p].add1,s[p].add2,s[p].add3,s[p].add4,p*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">change</span>(s[p].add2,s[p].add2,s[p].add4,s[p].add4,p*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">    s[p].add1=s[p].add2=s[p].add3=s[p].add4=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update_add</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;s[p].r||r&lt;s[p].l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=s[p].l&amp;&amp;s[p].r&lt;=r)</span><br><span class=\"line\">    &#123;\t</span><br><span class=\"line\">        s[p].sum+=<span class=\"number\">1ll</span>*k*s[p].cnt<span class=\"number\">+1ll</span>*k*(s[p].r-s[p].l<span class=\"number\">+1</span>-s[p].cnt);</span><br><span class=\"line\">        s[p].maxa+=k;</span><br><span class=\"line\">        s[p].maxb=<span class=\"built_in\">max</span>(s[p].maxb,s[p].maxa);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[p].se!=<span class=\"number\">-2e9</span>)s[p].se+=k;</span><br><span class=\"line\">        s[p].add1+=k,s[p].add2+=k;</span><br><span class=\"line\">        s[p].add3=<span class=\"built_in\">max</span>(s[p].add3,s[p].add1);</span><br><span class=\"line\">        s[p].add4=<span class=\"built_in\">max</span>(s[p].add4,s[p].add2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">push_down</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">update_add</span>(p*<span class=\"number\">2</span>),<span class=\"built_in\">update_add</span>(p*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">push_up</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update_min</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;s[p].r||r&lt;s[p].l||v&gt;=s[p].maxa)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=s[p].l&amp;&amp;s[p].r&lt;=r&amp;&amp;s[p].se&lt;v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k=s[p].maxa-v;</span><br><span class=\"line\">        s[p].sum-=<span class=\"number\">1ll</span>*s[p].cnt*k;</span><br><span class=\"line\">        s[p].maxa=v,s[p].add1-=k;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">push_down</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">update_min</span>(p*<span class=\"number\">2</span>),<span class=\"built_in\">update_min</span>(p*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">push_up</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query_sum</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;s[p].r||r&lt;s[p].l)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=s[p].l&amp;&amp;s[p].r&lt;=r)<span class=\"keyword\">return</span> s[p].sum;</span><br><span class=\"line\">    <span class=\"built_in\">push_down</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query_sum</span>(p*<span class=\"number\">2</span>)+<span class=\"built_in\">query_sum</span>(p*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query_maxa</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;s[p].r||r&lt;s[p].l)<span class=\"keyword\">return</span> <span class=\"number\">-2e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=s[p].l&amp;&amp;s[p].r&lt;=r)<span class=\"keyword\">return</span> s[p].maxa;</span><br><span class=\"line\">    <span class=\"built_in\">push_down</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">query_maxa</span>(p*<span class=\"number\">2</span>),<span class=\"built_in\">query_maxa</span>(p*<span class=\"number\">2</span><span class=\"number\">+1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query_maxb</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;s[p].r||r&lt;s[p].l)<span class=\"keyword\">return</span> <span class=\"number\">-2e9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&lt;=s[p].l&amp;&amp;s[p].r&lt;=r)<span class=\"keyword\">return</span> s[p].maxb;</span><br><span class=\"line\">    <span class=\"built_in\">push_down</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">query_maxb</span>(p*<span class=\"number\">2</span>),<span class=\"built_in\">query_maxb</span>(p*<span class=\"number\">2</span><span class=\"number\">+1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    n=<span class=\"built_in\">read</span>(),m=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        op=<span class=\"built_in\">read</span>(),l=<span class=\"built_in\">read</span>(),r=<span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op==<span class=\"number\">1</span>)k=<span class=\"built_in\">read</span>(),<span class=\"built_in\">update_add</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"number\">2</span>)v=<span class=\"built_in\">read</span>(),<span class=\"built_in\">update_min</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"number\">3</span>)<span class=\"built_in\">write</span>(<span class=\"built_in\">query_sum</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op==<span class=\"number\">4</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">query_maxa</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,<span class=\"built_in\">query_maxb</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-22-树上数据结构警示（树上线段树）\">*1.22 树上数据结构警示（树上线段树）</h3>\n<p>一般而言，树上数据结构主要是树上权值树以及树上动态开点线段树。这里提及两个<strong>需要注意的点</strong></p>\n<ol>\n<li>\n<p>主席树/线段树合并写法的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">merge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span></span></span></span>函数在向父节点合并的时候会有拷贝节点（主席树原理），**如果有多个儿子节点，这种行为会导致父节点信息合并完全之后，子节点的主席树信息被污染。**如果要这么做，涉及到子树信息查询，需要合并dfs的同时进行离线处理，保证污染之后不再查询。</p>\n<p>解决方法是树链剖分，尤其是子树信息维护，更是树剖为重中之重。</p>\n<p>树上差分不会因为这个受影响的原因在于，树上差分的信息合并是父节点向子节点合并，子节点继承父节点的信息以记录<strong>从自己直到根</strong>路径上的所有数信息，子节点只有一个父节点可以继承，意味着父节点的信息不会被污染。</p>\n<p>（ABC239E 树上子树第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>​大因为这个问题导致WA）</p>\n</li>\n<li>\n<p>树上合并，<strong>一定检查有没有写</strong><code>cl==cr</code>里面的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}return</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">re</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></p>\n</li>\n</ol>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"2-堆-Heap\">2.堆(Heap)</h2>\n<p>关键词：有序序列，只关心最值</p>\n<h3 id=\"2-1-可并堆（左偏树）\">2.1 可并堆（左偏树）</h3>\n<p>定义左偏树中左儿子结点的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mi>l</mi></msub></mrow><annotation encoding=\"application/x-tex\">dist_l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>一定大于等于右儿子节点的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">dist_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>定义某节点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><msub><mi>t</mi><mi>u</mi></msub></mrow><annotation encoding=\"application/x-tex\">dist_u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为其到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>​​所在子树中最近的外节点（没有左儿子或者右儿子）的距离。</p>\n<p>一开始有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个小根堆，每个堆包含且仅包含一个数。接下来需要支持两种操作：</p>\n<ol>\n<li>\n<p><code>1 x y</code>：将第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个数和第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 个数所在的小根堆合并（若第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 或第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 个数已经被删除或第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 和第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 个数在同一个堆内，则无视此操作）。</p>\n</li>\n<li>\n<p><code>2 x</code>：输出第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个数所在的堆最小数，并将这个最小数删除（若有多个最小数，优先删除先输入的；若第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个数已经被删除，则输出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>​ 并无视删除操作）。</p>\n</li>\n</ol>\n<p><em><strong>注意，这个题需要查某个数在哪个堆，需要并查集，而且因为路径压缩的不成样子，但凡涉及到弹出堆顶，必须连被删除元素一起调整而不是将删除元素简简单单的 fa 归0就可以。</strong></em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">heap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> dis, l, r, fa, val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">heap tr[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getfather</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tr[x].fa == x ? x : tr[x].fa = <span class=\"built_in\">getfather</span>(tr[x].fa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x || !y)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x | y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[x].val &gt; tr[y].val)</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    tr[x].r = <span class=\"built_in\">merge</span>(tr[x].r, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[tr[x].l].dis &lt; tr[tr[x].r].dis)</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(tr[x].l, tr[x].r);</span><br><span class=\"line\">    tr[x].dis = tr[tr[x].r].dis + <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr[tr[x].l].fa = tr[tr[x].r].fa = tr[x].fa = x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[x].val = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    tr[tr[x].l].fa = tr[x].l;</span><br><span class=\"line\">    tr[tr[x].r].fa = tr[x].r;</span><br><span class=\"line\">    tr[x].fa = <span class=\"built_in\">merge</span>(tr[x].l, tr[x].r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        tr[i].fa = i, cin &gt;&gt; tr[i].val;</span><br><span class=\"line\">    <span class=\"type\">int</span> t, x, y;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; t &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; y;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tr[x].val == <span class=\"number\">-1</span> || tr[y].val == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> l = <span class=\"built_in\">getfather</span>(x), r = <span class=\"built_in\">getfather</span>(y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l != r)</span><br><span class=\"line\">                tr[l].fa = tr[r].fa = <span class=\"built_in\">merge</span>(l, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tr[x].val == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                cout &lt;&lt; tr[<span class=\"built_in\">getfather</span>(x)].val &lt;&lt; endl, <span class=\"built_in\">pop</span>(<span class=\"built_in\">getfather</span>(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-2-带懒标记左偏树\">2.2 带懒标记左偏树</h3>\n<p>像动态开点线段树一样，合并时注意标记下传问题</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> dis, val; <span class=\"type\">int</span> ch[<span class=\"number\">2</span>]; <span class=\"type\">int</span> fa; <span class=\"type\">int</span> lazyadd = <span class=\"number\">0</span>, lazymul = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> id; <span class=\"type\">int</span> cnt; <span class=\"type\">int</span> lazyc = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">rs</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].ch[tree[tree[rt].ch[<span class=\"number\">0</span>]].dis &gt; tree[tree[rt].ch[<span class=\"number\">1</span>]].dis];<span class=\"comment\">/*注意rs写法*/</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">ls</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].ch[<span class=\"number\">1</span> ^ (tree[tree[rt].ch[<span class=\"number\">0</span>]].dis &gt; tree[tree[rt].ch[<span class=\"number\">1</span>]].dis)];<span class=\"comment\">/*更注意ls写法*/</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">dis</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].dis;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">val</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].val;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">fa</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].fa;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">lazyadd</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].lazyadd;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">lazymul</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].lazymul;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">lazyc</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].lazyc;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">vcnt</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].cnt;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> &amp;<span class=\"title\">id</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> </span>&#123;<span class=\"keyword\">return</span> tree[rt].id;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">lazyadd</span>(rt) != <span class=\"number\">0</span> || <span class=\"built_in\">lazymul</span>(rt) != <span class=\"number\">1</span> || <span class=\"built_in\">lazyc</span>(rt) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">ls</span>(rt))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">val</span>(<span class=\"built_in\">ls</span>(rt)) = <span class=\"built_in\">val</span>(<span class=\"built_in\">ls</span>(rt)) * <span class=\"built_in\">lazymul</span>(rt) + <span class=\"built_in\">lazyadd</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">vcnt</span>(<span class=\"built_in\">ls</span>(rt)) += <span class=\"built_in\">lazyc</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">lazymul</span>(<span class=\"built_in\">ls</span>(rt)) *= <span class=\"built_in\">lazymul</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">lazyadd</span>(<span class=\"built_in\">ls</span>(rt)) = <span class=\"built_in\">lazyadd</span>(<span class=\"built_in\">ls</span>(rt)) * <span class=\"built_in\">lazymul</span>(rt) + <span class=\"built_in\">lazyadd</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">lazyc</span>(<span class=\"built_in\">ls</span>(rt)) += <span class=\"built_in\">lazyc</span>(rt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">rs</span>(rt))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">val</span>(<span class=\"built_in\">rs</span>(rt)) = <span class=\"built_in\">val</span>(<span class=\"built_in\">rs</span>(rt)) * <span class=\"built_in\">lazymul</span>(rt) + <span class=\"built_in\">lazyadd</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">vcnt</span>(<span class=\"built_in\">rs</span>(rt)) += <span class=\"built_in\">lazyc</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">lazymul</span>(<span class=\"built_in\">rs</span>(rt)) *= <span class=\"built_in\">lazymul</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">lazyadd</span>(<span class=\"built_in\">rs</span>(rt)) = <span class=\"built_in\">lazyadd</span>(<span class=\"built_in\">rs</span>(rt)) * <span class=\"built_in\">lazymul</span>(rt) + <span class=\"built_in\">lazyadd</span>(rt);</span><br><span class=\"line\">            <span class=\"built_in\">lazyc</span>(<span class=\"built_in\">rs</span>(rt)) += <span class=\"built_in\">lazyc</span>(rt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">lazyadd</span>(rt) = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">lazymul</span>(rt) = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">lazyc</span>(rt) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> rt1, <span class=\"type\">int</span> rt2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rt1 | rt2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">val</span>(rt1) &gt; <span class=\"built_in\">val</span>(rt2))</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(rt1, rt2);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(rt1);</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;r = <span class=\"built_in\">rs</span>(rt1);</span><br><span class=\"line\">    r = <span class=\"built_in\">merge</span>(r, rt2);</span><br><span class=\"line\">    <span class=\"built_in\">fa</span>(r) = rt1;</span><br><span class=\"line\">    <span class=\"built_in\">dis</span>(rt1) = <span class=\"built_in\">dis</span>(<span class=\"built_in\">rs</span>(rt1)) + <span class=\"number\">1</span>; <span class=\"comment\">// 严禁使用pushup于此，pushup只用于删除任意非根节点时使用，删除根节点要pop</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rt1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"type\">int</span> rt1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(rt1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">merge</span>(<span class=\"built_in\">ls</span>(rt1), <span class=\"built_in\">rs</span>(rt1));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"type\">int</span> rt1, <span class=\"type\">int</span> val, <span class=\"type\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[++tot].val = val;</span><br><span class=\"line\">    tree[tot].id = id;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">merge</span>(rt1, tot);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-3-支持删除任意节点可并堆\">*2.3 支持删除任意节点可并堆</h3>\n<p>没有专门的题，有涉及到可并堆删对应节点的理论上主席树都可以做，而且复杂度是一样的，优先写自己顺手的。</p>\n<p>这里是OI-wiki的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> y = <span class=\"built_in\">merge</span>(<span class=\"built_in\">ls</span>(x), <span class=\"built_in\">rs</span>(x));</span><br><span class=\"line\">  <span class=\"built_in\">fa</span>(y) = <span class=\"built_in\">fa</span>(x);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">ls</span>(<span class=\"built_in\">fa</span>(x)) == x)</span><br><span class=\"line\">    <span class=\"built_in\">ls</span>(<span class=\"built_in\">fa</span>(x)) = y;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">rs</span>(<span class=\"built_in\">fa</span>(x)) == x)</span><br><span class=\"line\">    <span class=\"built_in\">rs</span>(<span class=\"built_in\">fa</span>(x)) = y;</span><br><span class=\"line\">  <span class=\"built_in\">pushup</span>(<span class=\"built_in\">fa</span>(y));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-GNU-GCC-pb-ds库\">*2.4 GNU/GCC pb_ds库</h3>\n<p><code>pb_ds</code>库提供了五种可并堆，默认大根堆，<code>greater</code>标签使用和普通<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">STL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">ST</span><span class=\"mord mathnormal\">L</span></span></span></span>一致。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> __gnu_pbds;</span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>&gt;q;<span class=\"comment\">//因为放置和std重复，故需要带上命名空间</span></span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>,greater&lt;<span class=\"type\">int</span>&gt;,pairing_heap_tag&gt; q;<span class=\"comment\">//最快</span></span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>,greater&lt;<span class=\"type\">int</span>&gt;,binary_heap_tag&gt; q;</span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>,greater&lt;<span class=\"type\">int</span>&gt;,binomial_heap_tag&gt; q;</span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>,greater&lt;<span class=\"type\">int</span>&gt;,rc_binomial_heap_tag&gt; q;</span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>,greater&lt;<span class=\"type\">int</span>&gt;,thin_heap_tag&gt; q;</span><br><span class=\"line\">__gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>,greater&lt;<span class=\"type\">int</span>&gt; &gt; q;</span><br></pre></td></tr></table></figure>\n<p><code>pairing_heap_tag</code> : <code>push</code>和<code>join</code>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>,其余为均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p><code>binary_heap_tag</code>:只支持<code>push</code>和<code>pop</code>,均为均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p><code>binomial_heap_tag</code>:<code>push</code>为均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>,其余为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p><code>rc_binomial_heap_tag</code>: <code>push</code>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>,其余为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p><code>thin_heap_tag</code>: <code>push</code>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>,不支持<code>join</code>,其余为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>;但是如果只有<code>increase_key</code>,那么<code>modify</code>为均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>​。“不支持”不是不能用,而是用起来很慢</p>\n<p>操作表：</p>\n<ul>\n<li>\n<p><code>size()</code>用法同std</p>\n</li>\n<li>\n<p><code>empty()</code>用法同std</p>\n</li>\n<li>\n<p><code>push(const_reference r_val)</code>注意<code>push</code>返回<code>point_iterator</code>，被<code>push</code>元素入堆后位置</p>\n</li>\n<li>\n<p><code>top()</code>没区别…</p>\n</li>\n<li>\n<p><code>pop()</code>弹出堆顶</p>\n</li>\n<li>\n<p><code>point_iterator</code>对应某元素的迭代器</p>\n</li>\n<li>\n<p><code>erase(point_iterator it)</code>删除对应点</p>\n</li>\n<li>\n<p><code>modify(point_iterator it,const_reference r_new_val)</code>修改对应点的值</p>\n<p>这是优化<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">ijk</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span></span></span></span>神方法,均摊复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>​</p>\n<p>优化<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">ijk</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span></span></span></span>的思路就是在前面提到的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">std</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">d</span></span></span></span>优先队列优化的基础上,维护一个<code>point_iterator</code>数组,<code>push</code>的时候存下<code>push</code>时返回的迭代器,更新<code>dis</code>是判断是否存在此迭代器,若存在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><code>modify</code>,不存在均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><code>push</code></p>\n</li>\n<li>\n<p><code>clear()</code>基本没什么用,还不如重新定义一个…</p>\n</li>\n<li>\n<p><code>join(priority_queue &amp;other)</code>可并堆啊,还是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的,注意合并后<code>other</code>会被清空</p>\n</li>\n<li>\n<p>其他迭代器同std</p>\n</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> mergeable_priority_queue = __gnu_pbds::priority_queue&lt;<span class=\"type\">int</span>, less&lt;<span class=\"type\">int</span>&gt;, __gnu_pbds::pairing_heap_tag&gt;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; connects[maxn];</span><br><span class=\"line\">mergeable_priority_queue qs[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> sum[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> L[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : connects[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">        qs[u].<span class=\"built_in\">join</span>(qs[v]);</span><br><span class=\"line\">        sum[u] += sum[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!qs[u].<span class=\"built_in\">empty</span>() &amp;&amp; sum[u] &gt; m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum[u] -= qs[u].<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        qs[u].<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"built_in\">max</span>(ans, (<span class=\"type\">int</span>)(qs[u].<span class=\"built_in\">size</span>()) * L[u]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> fa, c, l;</span><br><span class=\"line\">        cin &gt;&gt; fa &gt;&gt; c &gt;&gt; l;</span><br><span class=\"line\">        qs[i].<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">        sum[i] += c, L[i] = l;</span><br><span class=\"line\">        connects[fa].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        connects[i].<span class=\"built_in\">push_back</span>(fa);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"3-ST表（Sparse-Table）\">3.ST表（Sparse Table）</h2>\n<p>关键词：静态区间，可重复贡献</p>\n<p>稀疏表，倍增，可以解决可重复贡献问题：</p>\n<p>代数系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>S</mi><mo separator=\"true\">,</mo><mo>⋅</mo><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;S,\\cdot &gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>满足以下条件：</p>\n<ol>\n<li>该代数系统为半群。</li>\n<li>对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\forall x\\in S,x\\cdot x=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>​（可重复贡献）</li>\n</ol>\n<p>除 RMQ 以外，还有其它的「可重复贡献问题」。例如「区间按位与」、「区间按位或」、「区间 GCD」，ST 表都能高效地解决。</p>\n<p>如果碰到恶心的卡内存的，考虑ST表存对应答案在原数组的下标，节省空间。</p>\n<h3 id=\"3-1-静态区间最值，一维ST表\">3.1 静态区间最值，一维ST表</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ST表，静态区间最大值</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getlog</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        ans++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> st[maxn][<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"type\">int</span> logn = <span class=\"built_in\">getlog</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; st[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= logn; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i + (<span class=\"number\">1</span> &lt;&lt; j) - <span class=\"number\">1</span> &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            st[i][j] = <span class=\"built_in\">max</span>(st[i][j - <span class=\"number\">1</span>], st[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        <span class=\"type\">int</span> dis = r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"built_in\">getlog</span>(dis);</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">max</span>(st[l][k], st[r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k]) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-2-静态区间最值，二维ST表\">3.2 静态区间最值，二维ST表</h3>\n<p>类比一维<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">ST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">ST</span></span></span></span> 表，我们定义数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>p</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">st[i][j][k][p]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">]</span></span></span></span>表示从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span>往下<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>个元素，往右<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span>个元素的最值。</p>\n<p>建表的话，同样类比一维<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">ST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">ST</span></span></span></span>表，外层两个循环<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> , 然后内层取最值就行了。要注意的是，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>要从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>​开始循环，因为一行或者一列的情况也要维护。</p>\n<p>复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2log^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build_st</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> &amp;&amp; j == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n - (<span class=\"number\">1</span> &lt;&lt; i) + <span class=\"number\">1</span>; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">1</span>; p &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; p++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        st[k][p][i][j] = <span class=\"built_in\">min</span>(st[k][p][i][j - <span class=\"number\">1</span>], st[k][p + (<span class=\"number\">1</span> &lt;&lt; j - <span class=\"number\">1</span>)][i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        st[k][p][i][j] = <span class=\"built_in\">min</span>(st[k][p][i - <span class=\"number\">1</span>][j], st[k + (<span class=\"number\">1</span> &lt;&lt; i - <span class=\"number\">1</span>)][p][i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> r1, <span class=\"type\">int</span> c1, <span class=\"type\">int</span> r2, <span class=\"type\">int</span> c2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k1 = <span class=\"built_in\">log2</span>(r2 - r1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> k2 = <span class=\"built_in\">log2</span>(c2 - c1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(st[r1][c1][k1][k2], <span class=\"built_in\">min</span>(st[r2 - (<span class=\"number\">1</span> &lt;&lt; k1) + <span class=\"number\">1</span>][c1][k1][k2], <span class=\"built_in\">min</span>(st[r1][c2 - (<span class=\"number\">1</span> &lt;&lt; k2) + <span class=\"number\">1</span>][k1][k2], st[r2 - (<span class=\"number\">1</span> &lt;&lt; k1) + <span class=\"number\">1</span>][c2 - (<span class=\"number\">1</span> &lt;&lt; k2) + <span class=\"number\">1</span>][k1][k2])));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-3-倍增ST表求解LCA问题\">3.3 倍增ST表求解LCA问题</h3>\n<p>倍增优化求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">LCA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">dfs</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">df</span><span class=\"mord mathnormal\">s</span></span></span></span>预处理祖先信息，然后查询时先跳到同一高度，再一起暴力向上跳。暴力向上跳必须从大向小枚举。预处理<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，单次查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; connects[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[maxn][<span class=\"number\">21</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> dep[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fas)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dep[u] = dep[fas] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    fa[u][<span class=\"number\">0</span>] = fas;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">20</span>; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[u][j] = fa[fa[u][j - <span class=\"number\">1</span>]][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : connects[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fas)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[u] &lt; dep[v])</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = dep[u] - dep[v];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">20</span>; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tmp &gt;&gt; j) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            u = fa[u][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">20</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">    &#123;\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fa[u][j] != fa[v][j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            u = fa[u][j], v = fa[v][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, rt;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; rt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        connects[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        connects[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(rt, rt);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">lca</span>(u, v) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-4-欧拉序ST表求LCA问题\">3.4 欧拉序ST表求LCA问题</h3>\n<p>问题转化成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">dfs</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">df</span><span class=\"mord mathnormal\">s</span></span></span></span>遍历路径记录下结点的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">dfn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">df</span><span class=\"mord mathnormal\">n</span></span></span></span>序号上<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>M</mi><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">RMQ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">RMQ</span></span></span></span>问题，两个节点的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>c</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">lca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span></span></span></span>一定是欧拉序遍历下序号区间内深度最浅的结点。可以做到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>预处理，单次询问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; connects[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> st[maxn &lt;&lt; <span class=\"number\">1</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> dep[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> pos[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> logs[maxn &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    connects[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">    connects[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[++cnt][<span class=\"number\">0</span>] = u;</span><br><span class=\"line\">    dep[u] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    pos[u] = cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : connects[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">        st[++cnt][<span class=\"number\">0</span>] = u;<span class=\"comment\">//欧拉序记录</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build_st</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">25</span>; j++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i + (<span class=\"number\">1</span> &lt;&lt; j) - <span class=\"number\">1</span> &lt;= cnt; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l = st[i][j - <span class=\"number\">1</span>], r = st[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>];<span class=\"comment\">//st维护结点序号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dep[l] &lt; dep[r])</span><br><span class=\"line\">                st[i][j] = l;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                st[i][j] = r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    logs[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        logs[i] = logs[i / <span class=\"number\">2</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lcas</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = pos[u], r = pos[v];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt; r)</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(l, r);</span><br><span class=\"line\">    <span class=\"type\">int</span> k = logs[r - l + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> ansl = st[l][k];</span><br><span class=\"line\">    <span class=\"type\">int</span> ansr = st[r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[ansl] &lt; dep[ansr])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ansl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ansr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, rt;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; rt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(u, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(rt, rt);</span><br><span class=\"line\">    <span class=\"built_in\">build_st</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">lcas</span>(u, v) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"4-并查集-Disjoint-Sets\">4.并查集(Disjoint Sets)</h2>\n<p>关键词：同属性分类</p>\n<h3 id=\"4-1-带权并查集\">4.1 带权并查集</h3>\n<p>维护路径权值信息，常见用路径压缩均摊复杂度。merge时搞不清就画向量图表示，一下就懂。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getfather</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fa = father[x];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x != father[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        father[x] = <span class=\"built_in\">getfather</span>(father[x]);</span><br><span class=\"line\">        val[x] += val[fa];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> father[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fx = <span class=\"built_in\">getfather</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> fy = <span class=\"built_in\">getfather</span>(y);</span><br><span class=\"line\">    father[fx] = fy;</span><br><span class=\"line\">    val[fx] = value + val[y] - val[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-种类并查集\">4.2 种类并查集</h3>\n<p>一个点拆成多个点维护对立矛盾等信息。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> father[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> ran[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getfather</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == father[x])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> father[x] = <span class=\"built_in\">getfather</span>(father[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fx = <span class=\"built_in\">getfather</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> fy = <span class=\"built_in\">getfather</span>(y);</span><br><span class=\"line\">    father[fx]=fy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">eat</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(x, n + y);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(n + x, <span class=\"number\">2</span> * n + y);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(<span class=\"number\">2</span> * n + x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">same</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(n + x, n + y);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(<span class=\"number\">2</span> * n + x, <span class=\"number\">2</span> * n + y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">checkeat</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">getfather</span>(x) == <span class=\"built_in\">getfather</span>(y + n) || <span class=\"built_in\">getfather</span>(x) == <span class=\"built_in\">getfather</span>(y + <span class=\"number\">2</span> * n); <span class=\"comment\">// 查询捕食和被捕食关系</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">checksame</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">getfather</span>(x) == <span class=\"built_in\">getfather</span>(y)) || x == y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span> * n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        father[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-可持久化并查集\">4.3 可持久化并查集</h3>\n<p>见1.14</p>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"5-树状数组-Fenwick-Trees\">5.树状数组(Fenwick Trees)</h2>\n<p>关键词：二进制枚举，前缀和</p>\n<p>树状数组维护类似前缀和的东西。核心操作为lowbit。</p>\n<h3 id=\"5-1-二维树状数组（模板，子矩形所有元素和）\">5.1 二维树状数组（模板，子矩形所有元素和）</h3>\n<p>一维的树状数组都会写。下面的是二维的。维护矩形前缀和</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高位树状数组，没啥大区别，开多个</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 int</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Fenwick</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    vector&lt;vector&lt;i64&gt;&gt; c;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x &amp; -x; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Fenwick</span>(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m) : <span class=\"built_in\">n</span>(n), <span class=\"built_in\">m</span>(m), <span class=\"built_in\">c</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;i64&gt;(m + <span class=\"number\">1</span>, <span class=\"number\">0</span>)) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Fenwick</span>() : <span class=\"built_in\">n</span>(<span class=\"number\">0</span>), <span class=\"built_in\">m</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;m = m;</span><br><span class=\"line\">        c.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;i64&gt;(m + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, i64 v)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x; i &lt;= n; i += <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y; j &lt;= m; j += <span class=\"built_in\">lowbit</span>(j))</span><br><span class=\"line\">                c[i][j] += v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        i64 res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x; i; i -= <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = y; j; j -= <span class=\"built_in\">lowbit</span>(j))</span><br><span class=\"line\">                res += c[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-离线二维数点\">5.2 离线二维数点</h3>\n<p>求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>内小于等于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>的点有多少个。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 离线二维数点，扫描线离线版本</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 int</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Fenwick</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> _n;</span><br><span class=\"line\">    vector&lt;i64&gt; c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _n = n;</span><br><span class=\"line\">        c = <span class=\"built_in\">vector</span>&lt;i64&gt;(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, i64 d)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; x &lt;= _n; x += (x &amp; -x))</span><br><span class=\"line\">            c[x] += d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        i64 res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; x; x -= (x &amp; -x))</span><br><span class=\"line\">            res += c[x];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Fenwick fw;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; mp[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxs = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i], maxs = <span class=\"built_in\">max</span>(maxs, a[i]);</span><br><span class=\"line\">    vector&lt;tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">query</span>(q + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(q + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, x;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class=\"line\">        query[i] = &#123;l, r, x&#125;;</span><br><span class=\"line\">        mp[r].<span class=\"built_in\">push_back</span>(&#123;i, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        mp[l - <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(&#123;i, <span class=\"number\">-1</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fw.<span class=\"built_in\">init</span>(maxs + <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fw.<span class=\"built_in\">add</span>(a[i], <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : mp[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[j.first] += j.second * fw.<span class=\"built_in\">query</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(query[j.first]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++)</span><br><span class=\"line\">        cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"6-平衡树（Bindary-Search-AVL-Tree）\">6.平衡树（Bindary Search AVL Tree）</h2>\n<p>关键词：有序序列，动态插入与删除。</p>\n<h3 id=\"6-1-普通平衡树\">6.1 普通平衡树</h3>\n<p>说实话，裸平衡树用的真不多，能用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">multiset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">lt</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span></span></span></span>等<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">STL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">ST</span><span class=\"mord mathnormal\">L</span></span></span></span>​​实现的东西为啥要自己写。</p>\n<p>更新：需要知道排名就别尼玛想你的multiset了，赶紧给我滚去写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">Treap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>!</p>\n<p><em><strong>平衡树可提供以下操作：</strong></em></p>\n<ol>\n<li>插入一个数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>。</li>\n<li>删除一个数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>（若有多个相同的数，应只删除一个）。</li>\n<li>定义<strong>排名</strong>为比当前数小的数的个数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">1</span></span></span></span>。查询 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的排名。</li>\n<li>查询数据结构中排名为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的数。</li>\n<li>求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的前驱（前驱定义为小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，且最大的数）。</li>\n<li>求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的后继（后继定义为大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，且最小的数）。</li>\n</ol>\n<p>对于操作 3,5,6，<strong>不保证</strong>当前数据结构中存在数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\le n \\le 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<h4 id=\"6-1-1-替罪羊树（ScapeGoat-Tree）\">6.1.1 替罪羊树（ScapeGoat Tree）</h4>\n<p>替罪羊树是一个很暴力的思想，每次插入一个数动态检查插入后某些节点是否需要暴力进行平衡重构。一般选择平衡因子<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>=</mo><mn>0.7</mn><mo>−</mo><mn>0.8</mn></mrow><annotation encoding=\"application/x-tex\">\\alpha=0.7-0.8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0.7</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.8</span></span></span></span>。如果某个子树的左儿子所管辖子树大小占比例超过平衡因子就重构。重构就是中序遍历暴力重构即可。</p>\n<p>复杂度均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，树高均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>下面示例中，重复点算作新开点，点总数不得超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">1e5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span></span></span></span>级别。平衡树构建时，默认左儿子权值必须严格小于自身，即相同权值结点必定是全部挂载于右儿子上。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ls, rs, w; <span class=\"comment\">// 左儿子，有儿子，节点权值</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> exist;    <span class=\"comment\">// 该节点所代表元素是否存在</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sizx;      <span class=\"comment\">// 该节点下属子树大小</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fact;      <span class=\"comment\">// 该节点下属子树中尚存在元素个数</span></span><br><span class=\"line\">&#125; tr[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt, root;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> now)</span> <span class=\"comment\">// 维护节点信息</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[now].sizx = tr[tr[now].ls].sizx + tr[tr[now].rs].sizx + <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr[now].fact = tr[tr[now].ls].fact + tr[tr[now].rs].fact + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> &amp;now, <span class=\"type\">int</span> w)</span> <span class=\"comment\">// 开新点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    now = ++cnt;</span><br><span class=\"line\">    tr[now].w = w, tr[now].sizx = tr[now].fact = <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr[now].exist = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"type\">int</span> now)</span> <span class=\"comment\">// 判断是否平衡</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">max</span>(tr[tr[now].ls].sizx, tr[tr[now].rs].sizx) &gt; tr[now].sizx * <span class=\"number\">0.75</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tr[now].sizx - tr[now].fact) &gt; tr[now].sizx * <span class=\"number\">0.3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mds</span><span class=\"params\">(<span class=\"type\">int</span> now)</span> <span class=\"comment\">// 中序遍历</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!now)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">mds</span>(tr[now].ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[now].exist)</span><br><span class=\"line\">        vec.<span class=\"built_in\">push_back</span>(now);</span><br><span class=\"line\">    <span class=\"built_in\">mds</span>(tr[now].rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cre</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> &amp;now)</span> <span class=\"comment\">// 构造标准平衡树</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L == R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        now = vec[L];</span><br><span class=\"line\">        tr[now].ls = tr[now].rs = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tr[now].sizx = tr[now].fact = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (L + R) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L &lt; mid &amp;&amp; tr[vec[mid]].w == tr[vec[mid - <span class=\"number\">1</span>]].w)</span><br><span class=\"line\">        mid--;</span><br><span class=\"line\">    now = vec[mid];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L &lt; mid)</span><br><span class=\"line\">        <span class=\"built_in\">cre</span>(L, mid - <span class=\"number\">1</span>, tr[now].ls);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tr[now].ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cre</span>(mid + <span class=\"number\">1</span>, R, tr[now].rs);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(now);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> now, <span class=\"type\">int</span> en)</span> <span class=\"comment\">// 维护父辈节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!now)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[now].w &gt; tr[en].w)</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tr[now].ls, en);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tr[now].rs, en);</span><br><span class=\"line\">    tr[now].sizx = tr[tr[now].ls].sizx + tr[tr[now].rs].sizx + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"type\">int</span> &amp;now)</span> <span class=\"comment\">// 重构树</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vec.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">mds</span>(now);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vec.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        now = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cre</span>(<span class=\"number\">0</span>, vec.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, now);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> &amp;now, <span class=\"type\">int</span> en)</span> <span class=\"comment\">// 检查，并重构子树</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now == en)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(now))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rebuild</span>(now);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(root, now);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[en].w &lt; tr[now].w)</span><br><span class=\"line\">        <span class=\"built_in\">check</span>(tr[now].ls, en);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">check</span>(tr[now].rs, en);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inser</span><span class=\"params\">(<span class=\"type\">int</span> &amp;now, <span class=\"type\">int</span> w)</span> <span class=\"comment\">// 插入</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!now)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">newnode</span>(now, w);</span><br><span class=\"line\">        <span class=\"built_in\">check</span>(root, now);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr[now].sizx++, tr[now].fact++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (w &lt; tr[now].w)</span><br><span class=\"line\">        <span class=\"built_in\">inser</span>(tr[now].ls, w);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">inser</span>(tr[now].rs, w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> now, <span class=\"type\">int</span> w)</span> <span class=\"comment\">// 删除</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[now].exist &amp;&amp; tr[now].w == w)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tr[now].exist = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        tr[now].fact--;</span><br><span class=\"line\">        <span class=\"built_in\">check</span>(root, now);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr[now].fact--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (w &lt; tr[now].w)</span><br><span class=\"line\">        <span class=\"built_in\">del</span>(tr[now].ls, w);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">del</span>(tr[now].rs, w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getrank</span><span class=\"params\">(<span class=\"type\">int</span> w)</span> <span class=\"comment\">// 求w的排名</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> now = root, rank = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (now)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w &lt;= tr[now].w)</span><br><span class=\"line\">            now = tr[now].ls;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rank += tr[now].exist + tr[tr[now].ls].fact, now = tr[now].rs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rank;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getnum</span><span class=\"params\">(<span class=\"type\">int</span> rank)</span> <span class=\"comment\">// 求排名为rank的树数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> now = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (now)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[now].exist &amp;&amp; tr[tr[now].ls].fact + tr[now].exist == rank)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rank &lt;= tr[tr[now].ls].fact)</span><br><span class=\"line\">            now = tr[now].ls;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rank -= tr[now].exist + tr[tr[now].ls].fact, now = tr[now].rs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tr[now].w;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, x;</span><br><span class=\"line\">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (op)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">inser</span>(root, x);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(root, x);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">getrank</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">getnum</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">getnum</span>(<span class=\"built_in\">getrank</span>(x) - <span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">getnum</span>(<span class=\"built_in\">getrank</span>(x + <span class=\"number\">1</span>)) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-1-2-树堆（Treap）\">6.1.2 树堆（Treap）</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>p</mi><mo>=</mo><mi>T</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo>+</mo><mi>H</mi><mi>e</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">Treap=Tree+Heap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">ree</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">He</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>，是一种弱平衡性质的平衡树，<em><strong>均摊</strong></em>树深度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>每一个树节点多赋值一个<em><strong>随机</strong></em>权值，使得该树<em><strong>既满足平衡树性质</strong></em>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>a</mi><msub><mi>l</mi><mrow><mi>l</mi><mi>s</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>&lt;</mo><mi>v</mi><mi>a</mi><msub><mi>l</mi><mrow><mi>r</mi><mi>t</mi></mrow></msub><mo>&lt;</mo><mi>v</mi><mi>a</mi><msub><mi>l</mi><mrow><mi>r</mi><mi>s</mi><mi>o</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">val_{lson}&lt;val_{rt}&lt; val_{rson}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">so</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">rso</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>），<em><strong>又满足堆的性质</strong></em>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mrow><mi>l</mi><mi>s</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>&lt;</mo><msub><mi>w</mi><mrow><mi>r</mi><mi>t</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>w</mi><mrow><mi>r</mi><mi>t</mi></mrow></msub><mo>&gt;</mo><msub><mi>w</mi><mrow><mi>r</mi><mi>s</mi><mi>o</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">w_{lson}&lt;w_{rt},w_{rt}&gt;w_{rson}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">so</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">rso</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>​）</p>\n<p>复杂度正确性由随机数保证。</p>\n<p>关于更多的Treap，详见<em><strong>6.2 笛卡尔树</strong></em></p>\n<p><em><strong>此处的示例因题目保证前驱后继必定存在故没有特判，如果前驱后继不存在对应函数必定卡死，解决方案参见6.3.1可持久化Treap中的解决方式。</strong></em></p>\n<h5 id=\"6-1-2-1-有旋Treap\">6.1.2.1 有旋Treap</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> seed;</span><br><span class=\"line\">random_device rd;</span><br><span class=\"line\">mt19937 ran;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val, rnd, lc, rc, size, num;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    node tr[MAXN];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> _rand()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ran.<span class=\"built_in\">seed</span>(<span class=\"built_in\">rd</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">ran</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tr[p].size = tr[tr[p].lc].size + tr[tr[p].rc].size + tr[p].num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">right</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp = tr[k].lc;</span><br><span class=\"line\">        tr[k].lc = tr[tmp].rc;</span><br><span class=\"line\">        tr[tmp].rc = k;</span><br><span class=\"line\">        tr[tmp].size = tr[k].size;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(k);</span><br><span class=\"line\">        k = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">left</span><span class=\"params\">(<span class=\"type\">int</span> &amp;k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp = tr[k].rc;</span><br><span class=\"line\">        tr[k].rc = tr[tmp].lc;</span><br><span class=\"line\">        tr[tmp].lc = k;</span><br><span class=\"line\">        tr[tmp].size = tr[k].size;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(k);</span><br><span class=\"line\">        k = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = ++cnt;</span><br><span class=\"line\">            tr[p].val = x;</span><br><span class=\"line\">            tr[p].num = tr[p].size = <span class=\"number\">1</span>;</span><br><span class=\"line\">            tr[p].lc = tr[p].rc = <span class=\"number\">0</span>;</span><br><span class=\"line\">            tr[p].rnd = _rand();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++tr[p].size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == tr[p].val)</span><br><span class=\"line\">            ++tr[p].num;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt; tr[p].val)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(tr[p].lc, x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tr[tr[p].lc].rnd &lt; tr[p].rnd)</span><br><span class=\"line\">                <span class=\"built_in\">right</span>(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; tr[p].val)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(tr[p].rc, x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tr[tr[p].rc].rnd &lt; tr[p].rnd)</span><br><span class=\"line\">                <span class=\"built_in\">left</span>(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[p].val == x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tr[p].num &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                --tr[p].num, --tr[p].size;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tr[p].lc == <span class=\"number\">0</span> || tr[p].rc == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    p = tr[p].lc + tr[p].rc;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[tr[p].lc].rnd &lt; tr[tr[p].rc].rnd)</span><br><span class=\"line\">                    <span class=\"built_in\">right</span>(p), <span class=\"built_in\">del</span>(p, x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[tr[p].lc].rnd &gt; tr[tr[p].rc].rnd)</span><br><span class=\"line\">                    <span class=\"built_in\">left</span>(p), <span class=\"built_in\">del</span>(p, x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[p].val &lt; x)</span><br><span class=\"line\">            --tr[p].size, <span class=\"built_in\">del</span>(tr[p].rc, x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            --tr[p].size, <span class=\"built_in\">del</span>(tr[p].lc, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryrnk</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[p].val == x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tr[tr[p].lc].size;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[p].val &lt; x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tr[tr[p].lc].size + tr[p].num + <span class=\"built_in\">queryrnk</span>(tr[p].rc, x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">queryrnk</span>(tr[p].lc, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">querynum</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p, <span class=\"type\">int</span> rnk)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[tr[p].lc].size &gt;= rnk)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">querynum</span>(tr[p].lc, rnk);</span><br><span class=\"line\">        rnk -= tr[tr[p].lc].size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rnk &lt;= tr[p].num)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tr[p].val;</span><br><span class=\"line\">        rnk -= tr[p].num;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">querynum</span>(tr[p].rc, rnk);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryfront</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[p].val &lt; x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(tr[p].val, <span class=\"built_in\">queryfront</span>(tr[p].rc, x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[p].val &gt;= x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">queryfront</span>(tr[p].lc, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryback</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[p].val &gt; x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(tr[p].val, <span class=\"built_in\">queryback</span>(tr[p].lc, x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tr[p].val &lt;= x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">queryback</span>(tr[p].rc, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> pos;</span><br><span class=\"line\">Treap tr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"type\">int</span> m, k;</span><br><span class=\"line\">    tr.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;m, &amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"number\">1</span>)</span><br><span class=\"line\">            tr.<span class=\"built_in\">insert</span>(pos, k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m == <span class=\"number\">2</span>)</span><br><span class=\"line\">            tr.<span class=\"built_in\">del</span>(pos, k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m == <span class=\"number\">3</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tr.<span class=\"built_in\">queryrnk</span>(pos, k) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m == <span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tr.<span class=\"built_in\">querynum</span>(pos, k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m == <span class=\"number\">5</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tr.<span class=\"built_in\">queryfront</span>(pos, k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (m == <span class=\"number\">6</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tr.<span class=\"built_in\">queryback</span>(pos, k));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h5 id=\"6-1-2-2-无旋Treap（FHQ-Treap\">6.1.2.2 无旋Treap（FHQ-Treap)</h5>\n<p>无旋转<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">Treap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>​​通过树分裂和合并实现节点的添加以及删除。可以支持固定区间操作，支持可持久化操作。</p>\n<h6 id=\"6-1-2-2-1-单个节点只有一个值，相同值使用多个节点，可支持split-sz\">6.1.2.2.1 单个节点只有一个值，相同值使用多个节点，可支持split_sz</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">random_device rd;</span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">ran</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"type\">int</span> w;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>() : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">w</span>(<span class=\"number\">0</span>), <span class=\"built_in\">val</span>(<span class=\"number\">0</span>), <span class=\"built_in\">sz</span>(<span class=\"number\">0</span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>(<span class=\"type\">int</span> val) : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">w</span>(<span class=\"built_in\">ran</span>()), <span class=\"built_in\">val</span>(val), <span class=\"built_in\">sz</span>(<span class=\"number\">1</span>) &#123;&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    node tree[maxn];</span><br><span class=\"line\">    <span class=\"type\">int</span> root;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tot++;</span><br><span class=\"line\">        tree[tot] = <span class=\"built_in\">node</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tree[rt].sz = tree[tree[rt].l].sz + tree[tree[rt].r].sz + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">split_val</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> &amp;l, <span class=\"type\">int</span> &amp;r, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].val &lt;= val) <span class=\"comment\">// 叶子权值比目标值小，必定属于左侧。</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_val</span>(tree[rt].r, tree[rt].r, r, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_val</span>(tree[rt].l, l, tree[rt].l, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">split_sz</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> &amp;l, <span class=\"type\">int</span> &amp;r, <span class=\"type\">int</span> sz)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[tree[rt].l].sz + <span class=\"number\">1</span> &lt;= sz)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_sz</span>(tree[rt].r, tree[rt].r, r, sz - (tree[tree[rt].l].sz + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_sz</span>(tree[rt].l, l, tree[rt].l, sz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">const</span> <span class=\"type\">int</span> l, <span class=\"type\">const</span> <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l || !r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = l | r;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[l].w &gt; tree[r].w) <span class=\"comment\">// 大根堆形式，小根堆换个号就行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = l;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(tree[rt].r, tree[rt].r, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = r;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(tree[rt].l, l, tree[rt].l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, rt1, rt2, x - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(rt1, rt1, <span class=\"built_in\">newnode</span>(x));</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt1, rt2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y, z;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val);</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(x, x, z, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(z, tree[z].l, tree[z].r);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(x, x, z);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">rnk</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = tree[x].sz + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"type\">int</span> root, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == tree[tree[x].l].sz + <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tree[x].val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &lt;= tree[tree[x].l].sz)</span><br><span class=\"line\">                x = tree[x].l;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                k -= tree[tree[x].l].sz + <span class=\"number\">1</span>, x = tree[x].r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(root, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">kth</span>(x, tree[x].sz);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">suf</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">kth</span>(y, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Treap tr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, x;</span><br><span class=\"line\">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tr.<span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tr.<span class=\"built_in\">del</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">rnk</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">kth</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">5</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">pre</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">suf</span>(x) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h6 id=\"6-1-2-2-2-单个节点有多个值，相同值使用同一个个节点，不支持split-sz\">6.1.2.2.2 单个节点有多个值，相同值使用同一个个节点，不支持split_sz</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">random_device rd;</span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">ran</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">        <span class=\"type\">int</span> w;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>() : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">val</span>(<span class=\"number\">0</span>), <span class=\"built_in\">sz</span>(<span class=\"number\">0</span>), <span class=\"built_in\">cnt</span>(<span class=\"number\">0</span>), <span class=\"built_in\">w</span>(<span class=\"number\">0</span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>(<span class=\"type\">int</span> val) : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">val</span>(val), <span class=\"built_in\">sz</span>(<span class=\"number\">1</span>), <span class=\"built_in\">cnt</span>(<span class=\"number\">1</span>), <span class=\"built_in\">w</span>(<span class=\"built_in\">ran</span>()) &#123;&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> N = <span class=\"number\">2e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> root = <span class=\"number\">0</span>;</span><br><span class=\"line\">    node tree[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tot++;</span><br><span class=\"line\">        tree[tot] = <span class=\"built_in\">node</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tree[rt].sz = tree[tree[rt].l].sz + tree[tree[rt].r].sz + tree[rt].cnt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">const</span> <span class=\"type\">int</span> l, <span class=\"type\">const</span> <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l || !r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = l | r;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[l].w &gt; tree[r].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = l;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(tree[rt].r, tree[rt].r, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = r;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(tree[rt].l, l, tree[rt].l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split_val</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> &amp;l, <span class=\"type\">int</span> &amp;r, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].val &lt;= val)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_val</span>(tree[rt].r, tree[rt].r, r, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_val</span>(tree[rt].l, l, tree[rt].l, val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, rt1, rt2, x - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(rt2, rt2, rt3, x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt2)</span><br><span class=\"line\">            rt2 = <span class=\"built_in\">newnode</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            tree[rt2].cnt++, tree[rt2].sz++;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(rt2, rt2, rt3);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt1, rt2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, rt1, rt2, val);</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(rt1, rt1, rt3, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(rt3 != <span class=\"number\">0</span>);</span><br><span class=\"line\">        tree[rt3].cnt--, tree[rt3].sz--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tree[rt3].cnt)</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(rt3, tree[rt3].l, tree[rt3].r);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(rt1, rt1, rt3);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt1, rt2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">rnk</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = tree[x].sz + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"type\">int</span> root, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &lt;= tree[tree[x].l].sz)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = tree[x].l;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; tree[tree[x].l].sz + tree[x].cnt)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                k -= (tree[tree[x].l].sz + tree[x].cnt);</span><br><span class=\"line\">                x = tree[x].r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tree[x].val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">kth</span>(root, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">kth</span>(x, tree[x].sz);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">suf</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(root, x, y, val);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">kth</span>(y, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Treap tr;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-1-3-伸展树（Splay-Tree）\">6.1.3 伸展树（Splay Tree）</h4>\n<p>通过 <strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>/伸展操作</strong> 不断将某个节点旋转到根节点，使得整棵树仍然满足二叉查找树的性质，能够在均摊<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>​​时间内完成插入，查找和删除操作，并且保持平衡而不至于退化为链。</p>\n<p>每次操作之后，被操作数均在根节点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> N = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> rt, tot, fa[N], ch[N][<span class=\"number\">2</span>], val[N], cnt[N], sz[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Splay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123; sz[x] = sz[ch[x][<span class=\"number\">0</span>]] + sz[ch[x][<span class=\"number\">1</span>]] + cnt[x]; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x == ch[fa[x]][<span class=\"number\">1</span>]; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ch[x][<span class=\"number\">0</span>] = ch[x][<span class=\"number\">1</span>] = fa[x] = val[x] = sz[x] = cnt[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y = fa[x], z = fa[y], chk = <span class=\"built_in\">get</span>(x);</span><br><span class=\"line\">        ch[y][chk] = ch[x][chk ^ <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[x][chk ^ <span class=\"number\">1</span>])</span><br><span class=\"line\">            fa[ch[x][chk ^ <span class=\"number\">1</span>]] = y;</span><br><span class=\"line\">        ch[x][chk ^ <span class=\"number\">1</span>] = y;</span><br><span class=\"line\">        fa[y] = x;</span><br><span class=\"line\">        fa[x] = z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (z)</span><br><span class=\"line\">            ch[z][y == ch[z][<span class=\"number\">1</span>]] = x;</span><br><span class=\"line\">        <span class=\"built_in\">maintain</span>(y);</span><br><span class=\"line\">        <span class=\"built_in\">maintain</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> goal = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (goal == <span class=\"number\">0</span>)</span><br><span class=\"line\">            rt = x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fa[x] != goal)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> f = fa[x], g = fa[fa[x]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g != goal)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">get</span>(f) == <span class=\"built_in\">get</span>(x))</span><br><span class=\"line\">                    <span class=\"built_in\">rotate</span>(f);</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            val[++tot] = k;</span><br><span class=\"line\">            cnt[tot]++;</span><br><span class=\"line\">            rt = tot;</span><br><span class=\"line\">            <span class=\"built_in\">maintain</span>(rt);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = rt, f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val[cur] == k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cnt[cur]++;</span><br><span class=\"line\">                <span class=\"built_in\">maintain</span>(cur);</span><br><span class=\"line\">                <span class=\"built_in\">maintain</span>(f);</span><br><span class=\"line\">                <span class=\"built_in\">splay</span>(cur);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f = cur;</span><br><span class=\"line\">            cur = ch[cur][val[cur] &lt; k];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!cur)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                val[++tot] = k;</span><br><span class=\"line\">                cnt[tot]++;</span><br><span class=\"line\">                fa[tot] = f;</span><br><span class=\"line\">                ch[f][val[f] &lt; k] = tot;</span><br><span class=\"line\">                <span class=\"built_in\">maintain</span>(tot);</span><br><span class=\"line\">                <span class=\"built_in\">maintain</span>(f);</span><br><span class=\"line\">                <span class=\"built_in\">splay</span>(tot);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rk</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>, cur = rt;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &lt; val[cur])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cur = ch[cur][<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res += sz[ch[cur][<span class=\"number\">0</span>]];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!cur)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k == val[cur])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">splay</span>(cur);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res += cnt[cur];</span><br><span class=\"line\">                cur = ch[cur][<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = rt;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch[cur][<span class=\"number\">0</span>] &amp;&amp; k &lt;= sz[ch[cur][<span class=\"number\">0</span>]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cur = ch[cur][<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                k -= cnt[cur] + sz[ch[cur][<span class=\"number\">0</span>]];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">splay</span>(cur);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> val[cur];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cur = ch[cur][<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回前驱结点根编号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = ch[rt][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cur)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ch[cur][<span class=\"number\">1</span>])</span><br><span class=\"line\">            cur = ch[cur][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(cur);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回后继结点根编号</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">nxt</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = ch[rt][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cur)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ch[cur][<span class=\"number\">0</span>])</span><br><span class=\"line\">            cur = ch[cur][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(cur);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rk</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt[rt] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt[rt]--;</span><br><span class=\"line\">            <span class=\"built_in\">maintain</span>(rt);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ch[rt][<span class=\"number\">0</span>] &amp;&amp; !ch[rt][<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(rt);</span><br><span class=\"line\">            rt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ch[rt][<span class=\"number\">0</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cur = rt;</span><br><span class=\"line\">            rt = ch[rt][<span class=\"number\">1</span>];</span><br><span class=\"line\">            fa[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(cur);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ch[rt][<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cur = rt;</span><br><span class=\"line\">            rt = ch[rt][<span class=\"number\">0</span>];</span><br><span class=\"line\">            fa[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(cur);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = rt;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"built_in\">pre</span>();</span><br><span class=\"line\">        fa[ch[cur][<span class=\"number\">1</span>]] = x;</span><br><span class=\"line\">        ch[x][<span class=\"number\">1</span>] = ch[cur][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">clear</span>(cur);</span><br><span class=\"line\">        <span class=\"built_in\">maintain</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, opt, x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n); n; --n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;opt, &amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt == <span class=\"number\">1</span>)</span><br><span class=\"line\">            tree.<span class=\"built_in\">ins</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opt == <span class=\"number\">2</span>)</span><br><span class=\"line\">            tree.<span class=\"built_in\">del</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opt == <span class=\"number\">3</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tree.<span class=\"built_in\">rk</span>(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opt == <span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tree.<span class=\"built_in\">kth</span>(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opt == <span class=\"number\">5</span>)</span><br><span class=\"line\">            tree.<span class=\"built_in\">ins</span>(x), <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, val[tree.<span class=\"built_in\">pre</span>()]), tree.<span class=\"built_in\">del</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            tree.<span class=\"built_in\">ins</span>(x), <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, val[tree.<span class=\"built_in\">nxt</span>()]), tree.<span class=\"built_in\">del</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"6-2-文艺平衡树\">6.2 文艺平衡树</h3>\n<p>文艺平衡树，指借助平衡树中序遍历是从小到大的性质将其略作修改，用于<em><strong>维护高级区间操作</strong></em>行为（例如，<em><strong>维护区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>​ 翻转</strong></em>），不支持一切传统平衡树操作。</p>\n<p>请写一个程序，要求维护一个数列，支持以下 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span> 种操作：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">格式</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">插入</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">INSERT</mi><mo>⁡</mo><mtext> </mtext><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mtext> </mtext><mi>t</mi><mi>o</mi><mi>t</mi><mtext> </mtext><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><msub><mi>c</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>c</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\operatorname{INSERT}\\ posi \\ tot \\ c_1 \\ c_2 \\cdots c_{tot}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">INSERT</span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></td>\n<td style=\"text-align:left\">在当前数列的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">posi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span></span></span></span> 个数字后插入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span> 个数字：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>c</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">c_1, c_2 \\cdots c_{tot}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>；若在数列首插入，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">posi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span></span></span></span> 为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">删除</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">DELETE</mi><mo>⁡</mo><mtext> </mtext><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mtext> </mtext><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{DELETE} \\ posi \\ tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">DELETE</span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span></td>\n<td style=\"text-align:left\">从当前数列的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">posi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span></span></span></span> 个数字开始连续删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span> 个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">修改</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">MAKE-SAME</mi><mo>⁡</mo><mtext> </mtext><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mtext> </mtext><mi>t</mi><mi>o</mi><mi>t</mi><mtext> </mtext><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{MAKE-SAME} \\ posi \\ tot \\ c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">MAKE-SAME</span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span></span></span></span></td>\n<td style=\"text-align:left\">从当前数列的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">posi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span></span></span></span> 个数字开始的连续 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span> 个数字统一修改为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">翻转</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">REVERSE</mi><mo>⁡</mo><mtext> </mtext><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mtext> </mtext><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{REVERSE} \\ posi \\ tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">REVERSE</span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span></td>\n<td style=\"text-align:left\">取出从当前数列的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">posi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span></span></span></span> 个数字开始的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span> 个数字，翻转后放入原来的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">求和</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">GET-SUM</mi><mo>⁡</mo><mtext> </mtext><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mtext> </mtext><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{GET-SUM} \\ posi \\ tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">GET-SUM</span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span></td>\n<td style=\"text-align:left\">计算从当前数列的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">posi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">i</span></span></span></span> 个数字开始的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">tot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span></span></span></span> 个数字的和并输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">求最大子列和</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">MAX-SUM</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{MAX-SUM}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">MAX-SUM</span></span></span></span></span></td>\n<td style=\"text-align:left\">求出当前数列中和最大的一段子列，并输出最大和</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，任何时刻数列中最多含有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">5 \\times 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span> 个数，任何时刻数列中任何一个数字均在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-10^3, 10^3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> 内，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\le M \\le 2 \\times 10^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>，插入的数字总数不超过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">4 \\times 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<h4 id=\"6-2-1-无旋Treap实现文艺平衡树\">6.2.1 无旋Treap实现文艺平衡树</h4>\n<p>懒标记和线段树的想法一样，这样处理不容易错。</p>\n<p>分裂要按<code>size</code>，交换是整个子树内的所有节点的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>s</mi><mi>o</mi><mi>n</mi><mo separator=\"true\">,</mo><mi>r</mi><mi>s</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">lson,rson</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">so</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">rso</span><span class=\"mord mathnormal\">n</span></span></span></span>​全部交换，所以需要懒标记。交换儿子并不会影响堆的性质，所以不需要管。</p>\n<p>更复杂的懒标记一定要搞清楚。搞不清楚懒标记极其容易错且相当难以调试（因为树结构的随机性）</p>\n<p>这个题标记的坑点就在于子段长度非空，全负数就要输出最大的那个负数。所以维护区间中值（区间最大子段）的时候需要额外带一次<code>tree[rt].val</code>，详情见懒标记。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">random_device rd;</span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">ran</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"type\">int</span> w;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz;</span><br><span class=\"line\">        <span class=\"type\">int</span> lazytag;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxsum;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxpresum;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxsufsum;</span><br><span class=\"line\">        <span class=\"type\">bool</span> sametag;</span><br><span class=\"line\">        <span class=\"type\">int</span> sames;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>() : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">w</span>(<span class=\"number\">0</span>), <span class=\"built_in\">val</span>(<span class=\"number\">0</span>),</span><br><span class=\"line\">                 <span class=\"built_in\">sz</span>(<span class=\"number\">0</span>), <span class=\"built_in\">lazytag</span>(<span class=\"number\">0</span>), <span class=\"built_in\">sum</span>(<span class=\"number\">0</span>), <span class=\"built_in\">maxpresum</span>(<span class=\"number\">0</span>), <span class=\"built_in\">maxsufsum</span>(<span class=\"number\">0</span>),</span><br><span class=\"line\">                 <span class=\"built_in\">sametag</span>(<span class=\"number\">0</span>), <span class=\"built_in\">sames</span>(<span class=\"number\">0</span>), <span class=\"built_in\">maxsum</span>(<span class=\"number\">0</span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>(<span class=\"type\">int</span> val) : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">w</span>(<span class=\"built_in\">ran</span>()), <span class=\"built_in\">val</span>(val),</span><br><span class=\"line\">                        <span class=\"built_in\">sz</span>(<span class=\"number\">1</span>), <span class=\"built_in\">lazytag</span>(<span class=\"number\">0</span>), <span class=\"built_in\">sum</span>(val), <span class=\"built_in\">maxpresum</span>(<span class=\"built_in\">max</span>(val, <span class=\"number\">0ll</span>)),</span><br><span class=\"line\">                        <span class=\"built_in\">maxsufsum</span>(<span class=\"built_in\">max</span>(val, <span class=\"number\">0ll</span>)), <span class=\"built_in\">sametag</span>(<span class=\"number\">0</span>), <span class=\"built_in\">sames</span>(<span class=\"number\">0</span>), <span class=\"built_in\">maxsum</span>(val) &#123;&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    node tree[maxn];</span><br><span class=\"line\">    <span class=\"type\">int</span> root;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; maxn; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Treap</span>() &#123; <span class=\"built_in\">init</span>(); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tot = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        tree[tot] = <span class=\"built_in\">node</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getrub</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">getrub</span>(tree[rt].l);</span><br><span class=\"line\">        <span class=\"built_in\">getrub</span>(tree[rt].r);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(rt);</span><br><span class=\"line\">        tree[rt] = <span class=\"built_in\">node</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tree[rt].sz = tree[tree[rt].l].sz + tree[tree[rt].r].sz + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt].sum = tree[tree[rt].l].sum + tree[tree[rt].r].sum + tree[rt].val;</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt].maxpresum = <span class=\"built_in\">max</span>(tree[tree[rt].l].maxpresum, tree[tree[rt].l].sum + tree[rt].val + tree[tree[rt].r].maxpresum);</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt].maxsufsum = <span class=\"built_in\">max</span>(tree[tree[rt].r].maxsufsum, tree[tree[rt].r].sum + tree[rt].val + tree[tree[rt].l].maxsufsum);</span><br><span class=\"line\"></span><br><span class=\"line\">        tree[rt].maxsum = <span class=\"built_in\">max</span>(tree[rt].val, tree[tree[rt].l].maxsufsum + tree[rt].val + tree[tree[rt].r].maxpresum);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].l)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt].maxsum = <span class=\"built_in\">max</span>(tree[rt].maxsum, tree[tree[rt].l].maxsum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt].maxsum = <span class=\"built_in\">max</span>(tree[rt].maxsum, tree[tree[rt].r].maxsum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Reverse</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(tree[x].l, tree[x].r);</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(tree[x].maxpresum, tree[x].maxsufsum);</span><br><span class=\"line\">        tree[x].lazytag ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Cover</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> ci)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tree[rt].val = tree[rt].sames = ci;</span><br><span class=\"line\">        tree[rt].sum = tree[rt].sz * ci;</span><br><span class=\"line\">        tree[rt].maxpresum = tree[rt].maxsufsum = <span class=\"built_in\">max</span>(<span class=\"number\">0ll</span>, tree[rt].sum);</span><br><span class=\"line\">        tree[rt].maxsum = <span class=\"built_in\">max</span>(ci, tree[rt].sum);</span><br><span class=\"line\">        tree[rt].sametag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].lazytag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tree[rt].l)</span><br><span class=\"line\">                <span class=\"built_in\">Reverse</span>(tree[rt].l);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tree[rt].r)</span><br><span class=\"line\">                <span class=\"built_in\">Reverse</span>(tree[rt].r);</span><br><span class=\"line\">            tree[rt].lazytag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].sametag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tree[rt].l)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Cover</span>(tree[rt].l, tree[rt].sames);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tree[rt].r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">Cover</span>(tree[rt].r, tree[rt].sames);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tree[rt].sametag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            tree[rt].sames = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split_sz</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> &amp;l, <span class=\"type\">int</span> &amp;r, <span class=\"type\">int</span> sz)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[tree[rt].l].sz + <span class=\"number\">1</span> &lt;= sz)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_sz</span>(tree[rt].r, tree[rt].r, r, sz - (tree[tree[rt].l].sz + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = rt;</span><br><span class=\"line\">            <span class=\"built_in\">split_sz</span>(tree[rt].l, l, tree[rt].l, sz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">const</span> <span class=\"type\">int</span> l, <span class=\"type\">const</span> <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l || !r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = l | r;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(l);</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[l].w &gt; tree[r].w) <span class=\"comment\">// 大根堆形式，小根堆换个号就行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = l;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(tree[rt].r, tree[rt].r, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rt = r;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(tree[rt].l, l, tree[rt].l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> pos, vector&lt;<span class=\"type\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(root, rt1, rt2, pos);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(rt1, rt1, <span class=\"built_in\">newnode</span>(j));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt1, rt2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> tot)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(root, rt1, rt3, pos + tot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt1, rt1, rt2, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">getrub</span>(rt2);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt1, rt3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> tot)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(root, rt2, rt3, l + tot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt2, rt1, rt2, l - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">Reverse</span>(rt2);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(rt2, rt1, rt2);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt2, rt3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getsum</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> tot)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(root, rt1, rt3, pos + tot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt1, rt1, rt2, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = tree[rt2].sum;</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(rt1, rt1, rt2);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt1, rt3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getmaxsum</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[root].maxsum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">make_same</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> tot, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(root, rt2, rt3, l + tot - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt2, rt1, rt2, l - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">Cover</span>(rt2, c);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(rt2, rt1, rt2);</span><br><span class=\"line\">        <span class=\"built_in\">merge</span>(root, rt2, rt3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(tree[rt].l);</span><br><span class=\"line\">        cout &lt;&lt; tree[rt].val &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(tree[rt].r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(root);</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Treap tr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(&quot;data.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(&quot;data.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : a)</span><br><span class=\"line\">        cin &gt;&gt; i;</span><br><span class=\"line\">    tr.<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;GET-SUM&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos, cnt;</span><br><span class=\"line\">            cin &gt;&gt; pos &gt;&gt; cnt;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">getsum</span>(pos, cnt) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;MAX-SUM&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">getmaxsum</span>() &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;INSERT&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos, cnt;</span><br><span class=\"line\">            cin &gt;&gt; pos &gt;&gt; cnt;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">b</span><span class=\"params\">(cnt)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : b)</span><br><span class=\"line\">                cin &gt;&gt; j;</span><br><span class=\"line\">            tr.<span class=\"built_in\">insert</span>(pos, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;DELETE&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos, cnt;</span><br><span class=\"line\">            cin &gt;&gt; pos &gt;&gt; cnt;</span><br><span class=\"line\">            tr.<span class=\"built_in\">del</span>(pos, cnt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == <span class=\"string\">&quot;MAKE-SAME&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos, tot, c;</span><br><span class=\"line\">            cin &gt;&gt; pos &gt;&gt; tot &gt;&gt; c;</span><br><span class=\"line\">            tr.<span class=\"built_in\">make_same</span>(pos, tot, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos, tot;</span><br><span class=\"line\">            cin &gt;&gt; pos &gt;&gt; tot;</span><br><span class=\"line\">            tr.<span class=\"built_in\">reverse</span>(pos, tot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// tr.print();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"6-3-可持久化平衡树\">6.3 可持久化平衡树</h3>\n<p>如题，可持久化数据结构。</p>\n<p>需要注意一点，平衡树可持久化消耗无用内存更大，建议空间倍数<code>&lt;&lt;6</code>以上</p>\n<h4 id=\"6-3-1-可持久化无旋Treap\">6.3.1 可持久化无旋Treap</h4>\n<p>和非可持久化无旋<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">Treap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>​​几乎没有区别，小简单的差异出在<code>merge</code>和<code>split_val</code>函数上，每次要分裂或者要合并的时候都必须新开结点，将复制一份旧结点，以保证原先版本不被破坏。</p>\n<p>用于解决需要提供以下操作的数据结构（ <strong>对于各个以往的历史版本</strong> ）：</p>\n<p>1、 插入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>\n<p>2、 删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>（若有多个相同的数，应只删除一个，<strong>如果没有请忽略该操作</strong>）</p>\n<p>3、 查询 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的排名（排名定义为比当前数小的数的个数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">1</span></span></span></span>）</p>\n<p>4、查询排名为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的数</p>\n<p>5、 求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的前驱（前驱定义为小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，且最大的数，<strong>如不存在输出</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{31}+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ）</p>\n<p>6、求 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的后继（后继定义为大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，且最小的数，<strong>如不存在输出</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ）</p>\n<p><strong>和原本平衡树不同的一点是，每一次的任何操作都是基于某一个历史版本，同时生成一个新的版本。（操作3, 4, 5, 6即保持原版本无变化）</strong></p>\n<p>每个版本的编号即为操作的序号（版本<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>即为初始状态，空树）<br>\n对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据， $ 1 \\leq n \\leq 5 \\times  10^5 $ , <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>10</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">|x_i| \\leq {10}^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8484em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">10</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8484em;\"><span style=\"top:-3.0973em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>v</mi><mi>i</mi></msub><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le v_i &lt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mtext>opt</mtext><mo>≤</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">1\\le \\text{opt} \\le 6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">opt</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">random_device rd;</span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">ran</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Persistant_Treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">        <span class=\"type\">int</span> w;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>() &#123; l = r = val = sz = cnt = w = <span class=\"number\">0</span>; &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>(<span class=\"type\">int</span> val) : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">val</span>(val), <span class=\"built_in\">sz</span>(<span class=\"number\">1</span>), <span class=\"built_in\">cnt</span>(<span class=\"number\">1</span>), <span class=\"built_in\">w</span>(<span class=\"built_in\">ran</span>()) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    node tree[maxn &lt;&lt; <span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> vers[maxn];</span><br><span class=\"line\">    <span class=\"type\">int</span> ver = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ++tot;</span><br><span class=\"line\">        tree[tot] = <span class=\"built_in\">node</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tree[rt].sz = tree[rt].cnt + tree[tree[rt].l].sz + tree[tree[rt].r].sz;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> l, <span class=\"type\">const</span> <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l || !r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l | r;</span><br><span class=\"line\">        <span class=\"type\">int</span> newrt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[l].w &gt; tree[r].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            newrt = ++tot;</span><br><span class=\"line\">            tree[newrt] = tree[l];</span><br><span class=\"line\">            tree[newrt].r = <span class=\"built_in\">merge</span>(tree[newrt].r, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            newrt = ++tot;</span><br><span class=\"line\">            tree[newrt] = tree[r];</span><br><span class=\"line\">            tree[newrt].l = <span class=\"built_in\">merge</span>(l, tree[newrt].l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(newrt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newrt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split_val</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> &amp;l, <span class=\"type\">int</span> &amp;r, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> newrt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].val &lt;= val)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = ++tot;</span><br><span class=\"line\">            tree[l] = tree[rt];</span><br><span class=\"line\">            <span class=\"built_in\">split_val</span>(tree[rt].r, tree[l].r, r, val);</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = ++tot;</span><br><span class=\"line\">            tree[r] = tree[rt];</span><br><span class=\"line\">            <span class=\"built_in\">split_val</span>(tree[rt].l, l, tree[r].l, val);</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(vers[ver], rt1, rt2, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(rt2, rt2, rt3, val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt2)</span><br><span class=\"line\">            rt2 = <span class=\"built_in\">newnode</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            tree[rt2].cnt++, tree[rt2].sz++;</span><br><span class=\"line\">        rt2 = <span class=\"built_in\">merge</span>(rt2, rt3);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(rt1, rt2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(vers[ver], rt1, rt2, val);</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(rt1, rt1, rt3, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt3)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        tree[rt3].cnt--, tree[rt3].sz--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tree[rt3].cnt)</span><br><span class=\"line\">            rt3 = <span class=\"built_in\">merge</span>(tree[rt3].l, tree[rt3].r);</span><br><span class=\"line\">        rt1 = <span class=\"built_in\">merge</span>(rt1, rt3);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(rt1, rt2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">rnk</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(vers[ver], x, y, val - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = tree[x].sz + <span class=\"number\">1</span>;</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> k)</span> <span class=\"comment\">// 版本访问</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> x = vers[ver];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &lt;= tree[tree[x].l].sz)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = tree[x].l;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; tree[tree[x].l].sz + tree[x].cnt)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                k -= (tree[tree[x].l].sz + tree[x].cnt);</span><br><span class=\"line\">                x = tree[x].r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tree[x].val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"type\">int</span> _kth(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> k) <span class=\"comment\">// 根访问，private</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = rt;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &lt;= tree[tree[x].l].sz)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = tree[x].l;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; tree[tree[x].l].sz + tree[x].cnt)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                k -= (tree[tree[x].l].sz + tree[x].cnt);</span><br><span class=\"line\">                x = tree[x].r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> tree[x].val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(vers[ver], x, y, val - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> ans = -(INT_MAX);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x != <span class=\"number\">0</span>)</span><br><span class=\"line\">            ans = _kth(x, tree[x].sz);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">suf</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">split_val</span>(vers[ver], x, y, val);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = (INT_MAX);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y != <span class=\"number\">0</span>)</span><br><span class=\"line\">            ans = _kth(y, <span class=\"number\">1</span>);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Persistant_Treap tr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v, op, x;</span><br><span class=\"line\">        cin &gt;&gt; v &gt;&gt; op &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tr.<span class=\"built_in\">insert</span>(v, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tr.<span class=\"built_in\">del</span>(v, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">rnk</span>(v, x) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">kth</span>(v, x) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">5</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">pre</span>(v, x) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; tr.<span class=\"built_in\">suf</span>(v, x) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-3-2-可持久化文艺平衡树\">6.3.2 可持久化文艺平衡树</h4>\n<p>理论上，文艺平衡树可以干了线段树所能干的所有活儿，但是常数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>i</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">SuperBig</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>。其存活意义主要在于区间翻转。</p>\n<p>维护一个序列，其中需要提供以下操作，要求强制在线（<strong>对于各个以往的历史版本</strong>）：</p>\n<ol>\n<li>在第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 个数后插入数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>。</li>\n<li>删除第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 个数。</li>\n<li>翻转区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，例如原序列是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{5,4,3,2,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>，翻转区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[2,4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span></span></span></span> 后，结果是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{5,2,3,4,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>。</li>\n<li>查询区间 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> 中所有数的和。</li>\n</ol>\n<p><strong>和原本平衡树不同的一点是，每一次的任何操作都是基于某一个历史版本，同时生成一个新的版本（操作 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 即保持原版本无变化），新版本即编号为此次操作的序号。</strong></p>\n<p>emm,相当贴内存<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>979</mn><mi>M</mi><mi>B</mi><mi mathvariant=\"normal\">/</mi><mn>1</mn><mi>G</mi><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(979MB/1GB)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">979</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">MB</span><span class=\"mord\">/1</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">GB</span><span class=\"mclose\">)</span></span></span></span>，爆<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>M</mi><mi>L</mi><mi>E</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}MLE</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">M</span><span class=\"mord mathnormal\" style=\"color:red;\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:red;\">E</span></span></span></span>​就看着办吧。</p>\n<p>注意，pushdown的时候也要新建立拷贝节点，记住，可持久化数据结构上只要涉及到改必须要新建节点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">random_device rd;</span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">ran</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Persistant_literary_Treap</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"type\">int</span> w;</span><br><span class=\"line\">        i64 sum;</span><br><span class=\"line\">        i64 val;</span><br><span class=\"line\">        <span class=\"type\">bool</span> lazy;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>() &#123; l = r = w = sum = val = sz = lazy = <span class=\"number\">0</span>; &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">node</span>(i64 val) : <span class=\"built_in\">l</span>(<span class=\"number\">0</span>), <span class=\"built_in\">r</span>(<span class=\"number\">0</span>), <span class=\"built_in\">w</span>(<span class=\"built_in\">ran</span>()), <span class=\"built_in\">sum</span>(val), <span class=\"built_in\">val</span>(val), <span class=\"built_in\">sz</span>(<span class=\"number\">1</span>), <span class=\"built_in\">lazy</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    node tree[maxn &lt;&lt; <span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> vers[maxn], ver = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(i64 val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tot++;</span><br><span class=\"line\">        tree[tot] = <span class=\"built_in\">node</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tree[rt].lazy)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].l) <span class=\"comment\">// 只要动结点那必须全部备份可持久化</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> rl = ++tot;</span><br><span class=\"line\">            tree[rl] = tree[tree[rt].l];</span><br><span class=\"line\">            tree[rt].l = rl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> rr = ++tot;</span><br><span class=\"line\">            tree[rr] = tree[tree[rt].r];</span><br><span class=\"line\">            tree[rt].r = rr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(tree[rt].l, tree[rt].r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].l)</span><br><span class=\"line\">            tree[tree[rt].l].lazy ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].r)</span><br><span class=\"line\">            tree[tree[rt].r].lazy ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">        tree[rt].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tree[rt].sz = tree[tree[rt].l].sz + tree[tree[rt].r].sz + <span class=\"number\">1</span>;</span><br><span class=\"line\">        tree[rt].sum = tree[tree[rt].l].sum + tree[tree[rt].r].sum + tree[rt].val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l || !r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l | r;</span><br><span class=\"line\">        <span class=\"type\">int</span> nowrt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(l);</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[l].w &gt; tree[r].w)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nowrt = ++tot;</span><br><span class=\"line\">            tree[nowrt] = tree[l];</span><br><span class=\"line\">            tree[nowrt].r = <span class=\"built_in\">merge</span>(tree[nowrt].r, r);</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(nowrt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nowrt = ++tot;</span><br><span class=\"line\">            tree[nowrt] = tree[r];</span><br><span class=\"line\">            tree[nowrt].l = <span class=\"built_in\">merge</span>(l, tree[nowrt].l);</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(nowrt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nowrt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split_sz</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> rt, <span class=\"type\">int</span> &amp;l, <span class=\"type\">int</span> &amp;r, <span class=\"type\">int</span> sz)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = r = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[tree[rt].l].sz + <span class=\"number\">1</span> &lt;= sz)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> newrt = ++tot;</span><br><span class=\"line\">            tree[newrt] = tree[rt];</span><br><span class=\"line\">            l = newrt;</span><br><span class=\"line\">            <span class=\"built_in\">split_sz</span>(tree[rt].r, tree[newrt].r, r, sz - (tree[tree[newrt].l].sz + <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> newrt = ++tot;</span><br><span class=\"line\">            tree[newrt] = tree[rt];</span><br><span class=\"line\">            r = newrt;</span><br><span class=\"line\">            <span class=\"built_in\">split_sz</span>(tree[rt].l, l, tree[newrt].l, sz);</span><br><span class=\"line\">            <span class=\"built_in\">pushup</span>(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> k, i64 val)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(vers[ver], rt1, rt2, k);</span><br><span class=\"line\">        rt1 = <span class=\"built_in\">merge</span>(rt1, <span class=\"built_in\">newnode</span>(val));</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(rt1, rt2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(vers[ver], rt1, rt3, k);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt1, rt1, rt2, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(rt1, rt3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> i64 <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(vers[ver], rt1, rt3, r);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt1, rt1, rt2, l - <span class=\"number\">1</span>);</span><br><span class=\"line\">        i64 ans = tree[rt2].sum;</span><br><span class=\"line\">        rt1 = <span class=\"built_in\">merge</span>(rt1, rt2);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(rt1, rt3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> v, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vers[++ver] = vers[v];</span><br><span class=\"line\">        <span class=\"type\">int</span> rt1, rt2, rt3;</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(vers[ver], rt1, rt3, r);</span><br><span class=\"line\">        <span class=\"built_in\">split_sz</span>(rt1, rt1, rt2, l - <span class=\"number\">1</span>);</span><br><span class=\"line\">        tree[rt2].lazy ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">        rt1 = <span class=\"built_in\">merge</span>(rt1, rt2);</span><br><span class=\"line\">        vers[ver] = <span class=\"built_in\">merge</span>(rt1, rt3);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Persistant_literary_Treap tr;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    i64 lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i64 v, op, p, x, l, r;</span><br><span class=\"line\">        cin &gt;&gt; v &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; p &gt;&gt; x;</span><br><span class=\"line\">            p ^= lastans;</span><br><span class=\"line\">            x ^= lastans;</span><br><span class=\"line\">            tr.<span class=\"built_in\">insert</span>(v, p, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; p;</span><br><span class=\"line\">            p ^= lastans;</span><br><span class=\"line\">            tr.<span class=\"built_in\">del</span>(v, p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            l ^= lastans;</span><br><span class=\"line\">            r ^= lastans;</span><br><span class=\"line\">            tr.<span class=\"built_in\">reverse</span>(v, l, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            l ^= lastans;</span><br><span class=\"line\">            r ^= lastans;</span><br><span class=\"line\">            lastans = tr.<span class=\"built_in\">query</span>(v, l, r);</span><br><span class=\"line\">            cout &lt;&lt; lastans &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"7-树套树\">7.树套树</h2>\n<h3 id=\"7-1-线段树套平衡树\">7.1 线段树套平衡树</h3>\n<p>关键词：区间大型平衡树操作。</p>\n<p>您需要写一种数据结构（可参考题目标题），来维护一个有序数列，其中需要提供以下操作：</p>\n<ol>\n<li>\n<p>查询 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 在区间内的排名</p>\n</li>\n<li>\n<p>查询区间内排名为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 的值</p>\n</li>\n<li>\n<p>修改某一位置上的数值</p>\n</li>\n<li>\n<p>查询 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 在区间内的前驱（前驱定义为严格小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，且最大的数，<strong>若不存在输出 <code>-2147483647</code></strong>）</p>\n</li>\n<li>\n<p>查询 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 在区间内的后继（后继定义为严格大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，且最小的数，<strong>若不存在输出 <code>2147483647</code></strong>）</p>\n</li>\n</ol>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\le n,m\\le5\\times 10^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>，序列中的值在任何时刻 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\in[0,10^8]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>。</p>\n<p><strong>（特别提醒：此数据不保证操作 4、5 一定存在，故请务必考虑不存在的情况。）</strong></p>\n<p>做法：</p>\n<p>每个线段树结点维护一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">Treap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>平衡树，区间合并直接平衡树<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">Merge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span></span></span></span>​拿下。</p>\n<ol>\n<li>查询排名：线段树查询，查询每个子区间内<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的排名并求和，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>查询排名为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>的数：这个没办法直接加法求，需要二分+操作1判断，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log^2N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>修改：无话可说，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>查询前驱：各区间查询前驱后取<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">max</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span></span></span></span>，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>查询后继：各区间查询后继后取<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">min</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">min</span></span></span></span>，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ol>\n<p>复杂度上界<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>3</mn></msup><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(Nlog^3N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。单纯修改+查询第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>小树状主席树可以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(Nlog^2N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>实现。</p>\n<h3 id=\"7-2-树状数组-线段树\">7.2 树状数组+线段树</h3>\n<p>关键词：主席树强化，差分动态开点线段树</p>\n<p>树状数组的差分性质使得主席树可以支持快速修改。</p>\n<p>见1.12</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"7-3-线段树套线段树\">*7.3 线段树套线段树</h3>\n<p>关键词：二维区间修改、区间查询。</p>\n<p>见<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>I</mi><mo>−</mo><mi>W</mi><mi>i</mi><mi>k</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">OI-Wiki</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Wiki</span></span></span></span>手册，过于偏门。</p>\n<h2 id=\"8-静态树（树上差分；HLD-LLD，重链剖分、长链剖分）\">8. 静态树（树上差分；HLD/LLD，重链剖分、长链剖分）</h2>\n<p>关键词：静态树区间操作，静态树序列化操作。</p>\n<h4 id=\"8-1-树上差分——静态树，静态树节点信息\">8.1 树上差分——静态树，静态树节点信息</h4>\n<p>想操作、查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>节点的区间属性，可以通过树上差分到根操作实现，即结点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>存储<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>到根的信息，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>存储<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>到根的信息。</p>\n<p>查询的时候直接查询<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>+</mo><mi>v</mi><mo>−</mo><mi>l</mi><mi>c</mi><msub><mi>a</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi></mrow></msub><mo>−</mo><mi>f</mi><msub><mi>a</mi><mrow><mi>l</mi><mi>c</mi><msub><mi>a</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi></mrow></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">u+v-lca_{u,v}-fa_{lca_{u,v}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">c</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0418em;vertical-align:-0.3473em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2819em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3473em;\"><span></span></span></span></span></span></span></span></span></span>​即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span><span class=\"comment\">//树上差分，树上一条链的区间和，from：[JLOI2014] 松鼠的新家</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">3</span>*<span class=\"number\">1e5</span><span class=\"number\">+10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,u,v,vis[N],a[N],b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[N][<span class=\"number\">40</span>],dep[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;edge[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f)</span></span>&#123;<span class=\"comment\">//lca预处理</span></span><br><span class=\"line\">    dep[x]=dep[f]<span class=\"number\">+1</span>;</span><br><span class=\"line\">    fa[x][<span class=\"number\">0</span>]=f;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[x])<span class=\"keyword\">if</span>(i!=f)<span class=\"built_in\">dfs</span>(i,x); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f)</span></span>&#123;<span class=\"comment\">//统计点x的值</span></span><br><span class=\"line\">    a[x]=b[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=f)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">sum</span>(i,x);<span class=\"comment\">//此时已经统计了所有i的值了</span></span><br><span class=\"line\">            a[x]+=a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;<span class=\"comment\">//lca</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y)<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x]&lt;dep[y])<span class=\"built_in\">swap</span>(x,y);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">30</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[fa[x][i]]&gt;=dep[y])x=fa[x][i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y)<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">30</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;vis[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        edge[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">30</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">            fa[i][j]=fa[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;<span class=\"comment\">//点差分,一个点的差分数组的值就是这个点的值-所有其亲儿子的值</span></span><br><span class=\"line\">    <span class=\"comment\">//对vis[i],vis[i+1]这两个点之间加一只需要如下步骤（四步），操作的是差分数组</span></span><br><span class=\"line\">        b[vis[i]]++;</span><br><span class=\"line\">        b[vis[i<span class=\"number\">+1</span>]]++;</span><br><span class=\"line\">        b[<span class=\"built_in\">lca</span>(vis[i],vis[i<span class=\"number\">+1</span>])]--;</span><br><span class=\"line\">        b[fa[<span class=\"built_in\">lca</span>(vis[i],vis[i<span class=\"number\">+1</span>])][<span class=\"number\">0</span>]]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);<span class=\"comment\">//遍历整棵树，推出原始权值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)a[vis[i]]--;<span class=\"comment\">//本题例外（因为我们把既作为起点又做为终点的点算了两次，现在把这些点的权值减一即可 ）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<p>还有一个树上异或差分：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span><span class=\"comment\">//交互题就删</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span><span class=\"number\">+10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,q,u,v,idx,s,w;</span><br><span class=\"line\"><span class=\"type\">int</span> tree[N],a[N],dfn[N],dep[N],fa[N][<span class=\"number\">21</span>],siz[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;edge[N];</span><br><span class=\"line\"><span class=\"comment\">/*要求解决这样一个问题，满足以下两个操作：</span></span><br><span class=\"line\"><span class=\"comment\">1.u到v的路径上所有值异或上k</span></span><br><span class=\"line\"><span class=\"comment\">2.输出u到v上所有点的值</span></span><br><span class=\"line\"><span class=\"comment\">解法：</span></span><br><span class=\"line\"><span class=\"comment\">树上异或差分，1由异或的性质可以转化为四条链的操作，u-&gt;1，v-&gt;1，k-&gt;1，（k-fa）-&gt;1，但是可以简化，利用异或差分数组，一个点的值为这个点异或它的所有儿子节点，这样只需要修改u，v，k，k-fa四个点的值即可</span></span><br><span class=\"line\"><span class=\"comment\">2单点查询，难度在于如何通过异或差分还原这个点的值，方法就是u异或以u为根的子树的所有点的异或差分数组，利用dfs序，子树内的所有点被维护成了一个区间，这样就变成了区间异或，就可以利用树状数组快速维护，对dfs序建立树状数组即可。</span></span><br><span class=\"line\"><span class=\"comment\">//涉及知识点：异或、树状数组、dfs序、树上差分、异或前缀和、lca*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f)</span></span>&#123;</span><br><span class=\"line\">    dep[x]=dep[f]<span class=\"number\">+1</span>;fa[x][<span class=\"number\">0</span>]=f;a[f]^=a[x],dfn[x]=++idx;</span><br><span class=\"line\">    siz[x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=f)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,x);</span><br><span class=\"line\">            siz[x]+=siz[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> k)</span></span>&#123;<span class=\"comment\">//点x加上k</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&lt;=n)&#123;</span><br><span class=\"line\">        tree[x]^=k;<span class=\"comment\">//依次修改每个覆盖有x的区间的值</span></span><br><span class=\"line\">        x+=<span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"comment\">//处理0到x之间的前缀和</span></span><br><span class=\"line\">    <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cnt^=tree[x];</span><br><span class=\"line\">        x-=<span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[x]&gt;dep[y]) <span class=\"built_in\">swap</span>(x,y);<span class=\"comment\">//y的深度大，dep大</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">20</span>;i&gt;=<span class=\"number\">0</span>;i-- ) </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[x]&lt;=dep[y]-(<span class=\"number\">1</span>&lt;&lt;i)) y=fa[y][i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==y) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">20</span>;i&gt;=<span class=\"number\">0</span>;i-- ) </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[x][i]!=fa[y][i]) </span><br><span class=\"line\">            x=fa[x][i],y=fa[y][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k=<span class=\"built_in\">lca</span>(u,v);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(dfn[u],w);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(dfn[v],w);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(dfn[k],w);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[k][<span class=\"number\">0</span>]) <span class=\"built_in\">add</span>(dfn[fa[k][<span class=\"number\">0</span>]], w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(dfn[u]+siz[u]<span class=\"number\">-1</span>)^<span class=\"built_in\">sum</span>(dfn[u]<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">check2</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt;e;<span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[u]&lt;dep[v])<span class=\"built_in\">swap</span>(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(dep[u]&gt;dep[v])&#123;</span><br><span class=\"line\">        e.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">get</span>(u));</span><br><span class=\"line\">        u=fa[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u==v)e.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">get</span>(u));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(u!=v)&#123;</span><br><span class=\"line\">            e.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">get</span>(u));e.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">get</span>(v));</span><br><span class=\"line\">            u=fa[u][<span class=\"number\">0</span>];v=fa[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        e.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">get</span>(u));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e.<span class=\"built_in\">begin</span>(),e.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;e.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i<span class=\"number\">-2</span>]+e[i<span class=\"number\">-1</span>]&gt;e[i])<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"built_in\">lca</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[u] + dep[v] - <span class=\"number\">2</span> * dep[k] + <span class=\"number\">1</span> &gt; <span class=\"number\">46</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">check2</span>(u,v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        edge[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=<span class=\"number\">20</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">            fa[i][j]=fa[fa[i][j<span class=\"number\">-1</span>]][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"built_in\">add</span>(dfn[i],a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class=\"line\">            <span class=\"built_in\">change</span>(u,v,w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"built_in\">find</span>(u,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"8-2-重链剖分——静态树，动态树节点信息\">8.2 重链剖分——静态树，动态树节点信息</h4>\n<p>一种以链节点数划分轻重以实现树节点编号化，将书上问题转移到区间操作实现。</p>\n<p>重链剖分保证每一颗子树中所有节点的编号必定是一段连续的序列<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">dfn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">df</span><span class=\"mord mathnormal\">n</span></span></span></span>序号。</p>\n<p>重链剖分可以将树上的任意一条路径划分成不超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">logN</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>条连续的链，每条链上的点深度互不相同（即是自底向上的一条链，链上所有点的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">LCA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span></span></span></span> 为链的一个端点)。</p>\n<p>重链剖分还能保证划分出的每条链上的节点 DFS 序连续，因此可以方便地用一些维护序列的数据结构（如线段树）来维护树上路径的信息。</p>\n<p>重链剖分复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>的，两次<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">dfs</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">df</span><span class=\"mord mathnormal\">s</span></span></span></span>实现，跳链求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>c</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">lca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span></span></span></span>的实现是单次询问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>​的。对于高节点数而低强度询问相当友好。</p>\n<p>这里默认是从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>开始的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">3e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> father[maxn], sizes[maxn], hson[maxn], depth[maxn], top[maxn], ranks[maxn], dfn[maxn], cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> nxt[maxn &lt;&lt; <span class=\"number\">1LL</span>], head[maxn], to[maxn &lt;&lt; <span class=\"number\">1LL</span>], tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nxt[++tot] = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">    to[tot] = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(v, u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    hson[pos] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    sizes[pos] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[pos]; i; i = nxt[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!depth[to[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            depth[to[i]] = depth[pos] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            father[to[i]] = pos;</span><br><span class=\"line\">            <span class=\"built_in\">dfs1</span>(to[i]);</span><br><span class=\"line\">            sizes[pos] += sizes[to[i]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hson[pos] == <span class=\"number\">-1</span> || sizes[to[i]] &gt; sizes[hson[pos]])</span><br><span class=\"line\">                hson[pos] = to[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> tops)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    top[u] = tops;</span><br><span class=\"line\">    dfn[u] = ++cnt;</span><br><span class=\"line\">    ranks[cnt] = u;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hson[u] != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(hson[u], tops);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = nxt[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (to[i] == father[u] || to[i] == hson[u])</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(to[i], to[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, r;</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u] != top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]] &lt; depth[top[v]])</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">        u = father[top[u]]; <span class=\"comment\">// 所在重链首低的向上跳</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[u] &lt; depth[v] ? u : v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(u, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth[r] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(r);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(r, r);</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; &quot;finished build&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; &quot;root  is&quot; &lt;&lt; dfn[1] &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">/*for (int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; dfn[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    cout &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; ranks[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"comment\">    cout &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class=\"line\"><span class=\"comment\">        cout &lt;&lt; top[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"8-3长链剖分——仅深度维度线性优化动态规划\">8.3长链剖分——仅深度维度线性优化动态规划</h4>\n<p>长链剖分的实现方式和重链剖分很像，只不过重儿子被定义为了链长度最长的那一个，sz维护的是所属最长链的长度。</p>\n<p>长链剖分跳链的时空复杂度最大是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><msqrt><mi>N</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N\\sqrt N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1767em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9267em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;padding-left:0.833em;\">N</span></span><span style=\"top:-2.8867em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1133em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的，这个道理显而易见。</p>\n<p>长链剖分可以做到线性时间的优化树上和深度有关的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>。长链剖分后，在维护信息的过程中，先 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 继承重儿子的信息，再暴力合并其余轻儿子的信息。</p>\n<p>示例：</p>\n<p>给定一棵以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 为根，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个节点的树。设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(u,x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> 子树中到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> 距离为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的节点数。</p>\n<p>对于每个点，求一个最小的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，使得 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(u,k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> 最大。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">1≤n≤10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>正常分析的话，设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">f_{u,i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>表示在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>子树中距离<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>距离为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>的节点数，那么这个方程有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>i</mi></mrow></msub><mo>=</mo><mo>∑</mo><msub><mi>f</mi><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">f_{u,i}=\\sum f_{v,i-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6em;vertical-align:-0.55em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>纯暴力转移，深度维度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，总复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>​，无法承受。</p>\n<p>考虑树链剖分优化，对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>，直接继承其重儿子的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>数组，并在数组前头插入一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>元素表示<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mn>0</mn></mrow></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp_{u,0}=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，指根节点自己。</p>\n<p>然后剩下的轻儿子的暴力向重儿子合并就可以了。时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>​，线性通过，因为每个子树节点的vector最多存放深度多个元素，总元素数虽多<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，而不是暴力那样所有的全部开，没有的也开了。</p>\n<p>关于直接继承重儿子信息，使用<code>vector</code>的<code>swap</code>函数显然比写指针更简单易懂。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e6</span><span class=\"number\">+5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,x,y,cnt,hd[N],to[N&lt;&lt;<span class=\"number\">1</span>],nxt[N&lt;&lt;<span class=\"number\">1</span>],len[N],son[N],ans[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;f[N];    <span class=\"comment\">//这里的 vector 是倒序存储的，因为要在继承重儿子的信息后，要将当前节点的 DP 数组最前面插入一个元素，而 push_back 的复杂度优于 pop_front，倒序存储就可以直接使用 push_back </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    to[++cnt]=y,nxt[cnt]=hd[x],hd[x]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> id)</span></span>&#123;    <span class=\"comment\">//由于 vector 是倒序存储的，此处将 vector 正序存储的位置转化为倒序存储的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len[x]-id<span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=hd[x];i;i=nxt[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=to[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(y,x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len[y]&gt;len[son[x]]) son[x]=y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len[x]=len[son[x]]<span class=\"number\">+1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x]) <span class=\"built_in\">dfs2</span>(son[x],x),<span class=\"built_in\">swap</span>(f[x],f[son[x]]),ans[x]=ans[son[x]]<span class=\"number\">+1</span>;    <span class=\"comment\">//继承重儿子的信息。这里的继承直接用 swap 而不是复制，swap 在时间和空间上都更优（swap 交换 vector 的时间复杂度为 O(1)）。 </span></span><br><span class=\"line\">    f[x].<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);    <span class=\"comment\">//push_back 的复杂度优于 pop_front</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=hd[x];i;i=nxt[i])&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y=to[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y==fa||y==son[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(y,x);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=len[y];j++)&#123;</span><br><span class=\"line\">            f[x][<span class=\"built_in\">get</span>(x,j)]+=f[y][<span class=\"built_in\">get</span>(y,j<span class=\"number\">-1</span>)];    <span class=\"comment\">//暴力合并轻儿子的信息 </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[x][<span class=\"built_in\">get</span>(x,j)]&gt;f[x][<span class=\"built_in\">get</span>(x,ans[x])]||(f[x][<span class=\"built_in\">get</span>(x,j)]==f[x][<span class=\"built_in\">get</span>(x,ans[x])]&amp;&amp;j&lt;ans[x])) ans[x]=j;    <span class=\"comment\">//更新答案</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x][<span class=\"built_in\">get</span>(x,ans[x])]==<span class=\"number\">1</span>) ans[x]=<span class=\"number\">0</span>;    <span class=\"comment\">//f[x][0]=1,f[x][ans[x]]=1，0 显然更优</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(x,y),<span class=\"built_in\">add</span>(y,x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>),<span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"9-动态树-（LCT-Link-Cut-Tree，实链剖分）\">9. 动态树 （LCT/Link-Cut Tree，实链剖分）</h2>\n<p>关键词：动态树，修改树结构后树上区间操作、序列化操作。</p>\n<p><em><strong>注意，序列上的跳跃同样可以视作一棵树来解决问题</strong></em></p>\n<p>维护一个 <strong>森林</strong>，支持删除某条边，加入某条边，并保证加边，删边之后仍是森林。我们要维护这个森林的一些信息。</p>\n<p>一般的操作有两点连通性，两点路径权值和，连接两点和切断某条边、修改信息等。</p>\n<p>核心思想是我要谁我就把谁转到实链上面，其他的都是虚链。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">LCT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">CT</span></span></span></span>的辅助树性质：</p>\n<ol>\n<li>辅助树由多棵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 组成，每棵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 维护原树中的一条路径，且中序遍历这棵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 得到的点序列，从前到后对应原树「从上到下」的一条路径。</li>\n<li>原树每个节点与辅助树的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 节点一一对应。</li>\n<li>辅助树的各棵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 之间并不是独立的。每棵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的根节点的父亲节点本应是空，但在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">LCT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">CT</span></span></span></span> 中每棵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的根节点的父亲节点指向原树中 <strong>这条链</strong> 的父亲节点（即链最顶端的点的父亲节点）。这类父亲链接与通常 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">Splay</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Spl</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的父亲链接区别在于儿子认父亲，而父亲不认儿子，对应原树的一条 <strong>虚边</strong>。因此，每个连通块恰好有一个点的父亲节点为空。</li>\n<li>由于辅助树的以上性质，我们维护任何操作都不需要维护原树，辅助树可以在任何情况下拿出一个唯一的原树，我们只需要维护辅助树即可。</li>\n</ol>\n<p>示例：</p>\n<p>给定 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个点以及每个点的权值，要你处理接下来的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 个操作。</p>\n<p>操作有四种，操作从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 编号。点从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 编号。</p>\n<ul>\n<li><code>0 x y</code> 代表询问从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的路径上的点的权值的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>xor</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{xor}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord text\"><span class=\"mord\">xor</span></span></span></span></span> 和。保证 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 是联通的。</li>\n<li><code>1 x y</code> 代表连接 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>，若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 已经联通则无需连接。</li>\n<li><code>2 x y</code> 代表删除边 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>，不保证边 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 存在。</li>\n<li><code>3 x y</code> 代表将点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 上的权值变成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>。</li>\n</ul>\n<p>保证：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq n \\leq 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq m \\leq 3 \\times 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq a_i \\leq 10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>。</li>\n<li>对于操作 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">0, 1, 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span></span></span></span>，保证 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq x, y \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>。</li>\n<li>对于操作 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>，保证 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq x \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>y</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq y \\leq 10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// LCT，动态树、实链剖分</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ch[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> l ch[0]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> r ch[1]</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// int lazytag = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// int sz = 1;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> revtag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> fa = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">5e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node tr[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tr[x].revtag ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 获取x是父亲节点的哪个儿子</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tr[tr[x].fa].r == x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isroot</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 判断x结点是否作为一棵动态Splay的根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tr[tr[x].fa].l != x &amp;&amp; tr[tr[x].fa].r != x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span> <span class=\"comment\">// 更新结点信息</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// other pushups;</span></span><br><span class=\"line\">    <span class=\"comment\">// tr[rt].sz = tr[tr[rt].l].sz + tr[tr[rt].r].sz + 1;</span></span><br><span class=\"line\">    tr[rt].sum = tr[tr[rt].l].sum ^ tr[tr[rt].r].sum ^ tr[rt].val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 树上懒标记，文艺平衡树标记是刚需求</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tr[x].revtag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(tr[x].l, tr[x].r);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[x].l)</span><br><span class=\"line\">            <span class=\"built_in\">reverse</span>(tr[x].l);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tr[x].r)</span><br><span class=\"line\">            <span class=\"built_in\">reverse</span>(tr[x].r);</span><br><span class=\"line\">        tr[x].revtag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 动x之前结算x所在根的所有lazytag</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isroot</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(tr[x].fa);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = tr[x].fa, z = tr[y].fa, k = <span class=\"built_in\">get</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isroot</span>(y))</span><br><span class=\"line\">        tr[z].ch[tr[z].r == y] = x;</span><br><span class=\"line\">    <span class=\"comment\">// 上面这句一定要写在前面，普通的 Splay 是不用的，因为 isRoot  (后面会讲)</span></span><br><span class=\"line\">    tr[x].fa = z;</span><br><span class=\"line\">    tr[y].ch[k] = tr[x].ch[!k];</span><br><span class=\"line\">    tr[tr[x].ch[!k]].fa = y;</span><br><span class=\"line\">    tr[x].ch[!k] = y;</span><br><span class=\"line\">    tr[y].fa = x;</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(y), <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Splay</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 伸展操作，将结点伸展到根。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">update</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> fa; fa = tr[x].fa, !<span class=\"built_in\">isroot</span>(x); <span class=\"built_in\">rotate</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">isroot</span>(fa))</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(<span class=\"built_in\">get</span>(fa) == <span class=\"built_in\">get</span>(x) ? fa : x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 拉直从x到当前动态树根节点的实边路径，返回该路径终点的Splay的根（即路径终点）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p = <span class=\"number\">0</span>; x; p = x, x = tr[x].fa)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Splay</span>(x);</span><br><span class=\"line\">        tr[x].r = p;</span><br><span class=\"line\">        <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">makeroot</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">// 换根操作，指定x结点成为原树（非辅助树）的总根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">access</span>(x);  <span class=\"comment\">// 拉出x到当前根的路径，x必然是此时所在Splay中中序遍历的最后一个点</span></span><br><span class=\"line\">    <span class=\"built_in\">Splay</span>(x);   <span class=\"comment\">// 旋根，根据LCT-Splay定义，这棵Splay必定没有右儿子</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(x); <span class=\"comment\">// 直接翻转Splay，迫使其成为当前Splay中序遍历第一个访问的点，成为深度最浅的根，实现了换跟</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> <span class=\"comment\">// 找结点p在原森林所属树（非辅助Splay森林树）的树根</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">access</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">Splay</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tr[p].l)</span><br><span class=\"line\">        p = tr[p].l, <span class=\"built_in\">pushdown</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">Splay</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> <span class=\"comment\">// 连一条x-&gt;y的轻边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">makeroot</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(y) == x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    tr[x].fa = y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">makeroot</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(y) != x || tr[y].fa != x || tr[y].l)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    tr[y].fa = tr[x].r = <span class=\"number\">0</span>; <span class=\"comment\">// x在findroot(y)后被转到了根</span></span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> <span class=\"comment\">// 动态树中拆出来一条x-&gt;y指定路径，保证路径上都是实边,保证y在根。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">makeroot</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">access</span>(y);</span><br><span class=\"line\">    <span class=\"built_in\">Splay</span>(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v;</span><br><span class=\"line\">        cin &gt;&gt; v;</span><br><span class=\"line\">        tr[i].val = v;</span><br><span class=\"line\">        tr[i].sum = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, x, y;</span><br><span class=\"line\">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">split</span>(x, y);</span><br><span class=\"line\">            cout &lt;&lt; tr[y].sum &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">link</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cut</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">Splay</span>(x); <span class=\"comment\">// 节点修改转到根再改，不会影响其他信息</span></span><br><span class=\"line\">            tr[x].val = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"10-01Trie\">10. 01Trie</h2>\n<p>关于字典树Trie的内容，详见<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>a</mi><mi>r</mi><mi>t</mi><mtext> </mtext><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">Part\\ 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord\">2</span></span></span></span>.</p>\n<h3 id=\"10-1-01Trie\">10.1 01Trie</h3>\n<p>01字典树。写法参见可持久化，没啥区别。</p>\n<p><code>tr[rt].cnt</code>存储的是从当前节点数位出发还有多少个数字，根节点就是数字的总个数。</p>\n<h3 id=\"10-2-可持久化01Trie\">10.2 可持久化01Trie</h3>\n<p>维护区间异或最大值或者区间第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>大值。区间第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>大值类似于主席树树上二分。</p>\n<p>示例：（区间最大值）</p>\n<p>给定一个非负整数序列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>a</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{a\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">}</span></span></span></span>，初始长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>。</p>\n<p>有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> 个操作，有以下两种操作类型：</p>\n<ol>\n<li><code>A x</code>：添加操作，表示在序列末尾添加一个数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，序列的长度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 加 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>。</li>\n<li><code>Q l r x</code>：询问操作，你需要找到一个位置 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>，满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>≤</mo><mi>p</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">l \\le p \\le r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>，使得：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>p</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>⊕</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>N</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">a[p] \\oplus a[p+1] \\oplus ... \\oplus a[N] \\oplus x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">...</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 最大，输出最大值。</li>\n</ol>\n<ul>\n<li>对于所有测试点，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo separator=\"true\">,</mo><mi>M</mi><mo>≤</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\le N,M \\le 3\\times 10 ^ 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding=\"application/x-tex\">0\\leq a_i\\leq 10 ^ 7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span>。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Present_Trie</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> nxt[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    vector&lt;node&gt; tr;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        tr.<span class=\"built_in\">resize</span>(n &lt;&lt; <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newroot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> rt1, <span class=\"type\">int</span> rt2, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">30</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> bit = (x &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bit)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!tr[rt2].nxt[<span class=\"number\">1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    tr[rt2].nxt[<span class=\"number\">1</span>] = ++tot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tr[rt2].nxt[<span class=\"number\">0</span>] = tr[rt1].nxt[<span class=\"number\">0</span>];</span><br><span class=\"line\">                rt1 = tr[rt1].nxt[<span class=\"number\">1</span>];</span><br><span class=\"line\">                rt2 = tr[rt2].nxt[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!tr[rt2].nxt[<span class=\"number\">0</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    tr[rt2].nxt[<span class=\"number\">0</span>] = ++tot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                tr[rt2].nxt[<span class=\"number\">1</span>] = tr[rt1].nxt[<span class=\"number\">1</span>];</span><br><span class=\"line\">                rt1 = tr[rt1].nxt[<span class=\"number\">0</span>];</span><br><span class=\"line\">                rt2 = tr[rt2].nxt[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tr[rt2].cnt = tr[rt1].cnt + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> rt1, <span class=\"type\">int</span> rt2, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">30</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> bit = (x &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tr[tr[rt2].nxt[bit ^ <span class=\"number\">1</span>]].cnt - tr[tr[rt1].nxt[bit ^ <span class=\"number\">1</span>]].cnt &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ret |= (<span class=\"number\">1</span> &lt;&lt; i);</span><br><span class=\"line\">                rt1 = tr[rt1].nxt[bit ^ <span class=\"number\">1</span>];</span><br><span class=\"line\">                rt2 = tr[rt2].nxt[bit ^ <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                rt1 = tr[rt1].nxt[bit];</span><br><span class=\"line\">                rt2 = tr[rt2].nxt[bit];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Present_Trie pt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">root</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    pt.<span class=\"built_in\">init</span>(<span class=\"number\">1e6</span> + <span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> calc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        calc ^= x;</span><br><span class=\"line\">        root[i] = pt.<span class=\"built_in\">newroot</span>();</span><br><span class=\"line\">        pt.<span class=\"built_in\">insert</span>(root[i - <span class=\"number\">1</span>], root[i], calc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, x;</span><br><span class=\"line\">        cin &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;Q&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class=\"line\">            l--, r--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"built_in\">max</span>(x ^ calc, pt.<span class=\"built_in\">query</span>(root[l], root[r], x ^ calc)) &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; pt.<span class=\"built_in\">query</span>(root[l - <span class=\"number\">1</span>], root[r], x ^ calc) &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            calc ^= x;</span><br><span class=\"line\">            root.<span class=\"built_in\">emplace_back</span>(pt.<span class=\"built_in\">newroot</span>());</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            pt.<span class=\"built_in\">insert</span>(root[n - <span class=\"number\">1</span>], root[n], calc);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"11-单调栈\">11.单调栈</h2>\n<p>单调栈，可以维护一个单调的序列，使得每一个元素进栈的时候，所有比这个元素小的栈内元素均会被其消除或者融合，比他大的栈内元素不会与其消除或者融合。最典型的例子就是维护某个数最左侧和最右侧第一个比其大的数。但是单调栈并不局限于此：</p>\n<p>给定一个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 的数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 。您可以执行以下任意次操作（可能是零次）：</p>\n<ul>\n<li>选择两个不同的索引 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> ，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn mathvariant=\"bold\">1</mn><mo>≤</mo><mi mathvariant=\"bold\">i</mi><mo>&lt;</mo><mi mathvariant=\"bold\">j</mi><mo>≤</mo><mi mathvariant=\"bold\">m</mi></mrow><annotation encoding=\"application/x-tex\">\\bf{1\\le i &lt; j\\le m}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathbf\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathbf\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathbf\">m</span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为偶数，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 除以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> ，并将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> 乘以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 。</li>\n</ul>\n<p>您的任务是在执行任意数量的此类操作后最大化数组的总和。由于它可能很大，请输出此总和模数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span> 。</p>\n<p>由于这道题太简单了，给你一个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> ，你需要对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 的每个前缀进行求解。</p>\n<p>换句话说，表示在执行任意数量的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> 等运算后 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 的最大和，你需要分别输出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f([a_1])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">([</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">])</span></span></span></span> 、 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f([a_1,a_2])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">([</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">])</span></span></span></span> 、 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.123em;\"></span><span class=\"minner\">…</span></span></span></span> 、 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f([a_1,a_2,\\ldots,a_n])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">([</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">])</span></span></span></span> 模数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span> 。</p>\n<p>不难考虑到每个数新加进序列的时候，所有比这个数小的底数（除尽2以后的数）所包含2的个数都要加到新数字上。很像一个线段树区间查，但是这会存在一个问题：</p>\n<p>样例： 18 2 7</p>\n<p>新加入的7显然查不到9底上的一个2，但是14可以查到。线段树最坏复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">nlog^2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span>的。（实际上根据运算特性分析，能够卡满<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log^2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span>单次询问的情况最多只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">logn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span></span></span></span>次，所以真实实际复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>+</mo><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>3</mn></msup><mi>n</mi><mo>→</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">nlogn+log^3n\\rightarrow nlogn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span></span></span></span>的复杂度）</p>\n<p>所以，比当前数小的均可以合并，比当前数大的均无法合并，符合单调栈定义：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    mint tmpsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;i64&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    stack&lt;pair&lt;i64, i64&gt;&gt; st;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            a[i] &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!st.<span class=\"built_in\">empty</span>() &amp;&amp; (k &gt;= <span class=\"number\">30</span> || (a[i] &lt;&lt; k) &gt; st.<span class=\"built_in\">top</span>().first))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [num, cnt] = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            tmpsum -= <span class=\"built_in\">power</span>(<span class=\"built_in\">mint</span>(<span class=\"number\">2</span>), cnt) * num;</span><br><span class=\"line\">            tmpsum += num;</span><br><span class=\"line\">            k += cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        st.<span class=\"built_in\">push</span>(&#123;a[i], k&#125;);</span><br><span class=\"line\">        tmpsum += <span class=\"built_in\">mint</span>(a[i]) * <span class=\"built_in\">power</span>(<span class=\"built_in\">mint</span>(<span class=\"number\">2</span>), k);</span><br><span class=\"line\">        cout &lt;&lt; tmpsum &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h1>Part 2. 数学</h1>\n<h3 id=\"0-Modint-h\">0. Modint.h</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MODINT_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MODINT_H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Modint</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> T <span class=\"title\">power</span><span class=\"params\">(T a, i64 b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        T res = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; b; b /= <span class=\"number\">2</span>, a *= a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b % <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res *= a;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> i64 <span class=\"title\">mul</span><span class=\"params\">(i64 a, i64 b, i64 p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        i64 res = a * b - (i64)(<span class=\"number\">1.L</span> * a * b / p) * p;</span><br><span class=\"line\">        res %= p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res += p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 模运算（i64），jiangly版本，支持动态模数改变</span></span><br><span class=\"line\"><span class=\"comment\">     * @param P 模数，仅支持质数。如果选择动态定义模数，P=0，且必须调用setMod函数设置模数。默认为1e18+9</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;i64 P&gt;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">MLong</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i64 x;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">MLong</span><span class=\"params\">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">MLong</span><span class=\"params\">(i64 x)</span> : x&#123;</span><span class=\"built_in\">norm</span>(x % <span class=\"built_in\">getMod</span>())&#125; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">static</span> i64 Mod;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">static</span> i64 <span class=\"title\">getMod</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (P &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">setMod</span><span class=\"params\">(i64 Mod_)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Mod = Mod_;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> i64 <span class=\"title\">norm</span><span class=\"params\">(i64 x)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x += <span class=\"built_in\">getMod</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= <span class=\"built_in\">getMod</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x -= <span class=\"built_in\">getMod</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> i64 <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">operator</span> <span class=\"title\">i64</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MLong <span class=\"keyword\">operator</span>-() <span class=\"type\">const</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MLong res;</span><br><span class=\"line\">            res.x = <span class=\"built_in\">norm</span>(<span class=\"built_in\">getMod</span>() - x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> MLong <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(x != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(*<span class=\"keyword\">this</span>, <span class=\"built_in\">getMod</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MLong &amp;<span class=\"keyword\">operator</span>*=(MLong rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">mul</span>(x, rhs.x, <span class=\"built_in\">getMod</span>());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MLong &amp;<span class=\"keyword\">operator</span>+=(MLong rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">norm</span>(x + rhs.x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MLong &amp;<span class=\"keyword\">operator</span>-=(MLong rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">norm</span>(x - rhs.x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MLong &amp;<span class=\"keyword\">operator</span>/=(MLong rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> *= rhs.<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MLong <span class=\"keyword\">operator</span>*(MLong lhs, MLong rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MLong res = lhs;</span><br><span class=\"line\">            res *= rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MLong <span class=\"keyword\">operator</span>+(MLong lhs, MLong rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MLong res = lhs;</span><br><span class=\"line\">            res += rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MLong <span class=\"keyword\">operator</span>-(MLong lhs, MLong rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MLong res = lhs;</span><br><span class=\"line\">            res -= rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MLong <span class=\"keyword\">operator</span>/(MLong lhs, MLong rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MLong res = lhs;</span><br><span class=\"line\">            res /= rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> std::istream &amp;<span class=\"keyword\">operator</span>&gt;&gt;(std::istream &amp;is, MLong &amp;a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            i64 v;</span><br><span class=\"line\">            is &gt;&gt; v;</span><br><span class=\"line\">            a = <span class=\"built_in\">MLong</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> std::ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(std::ostream &amp;os, <span class=\"type\">const</span> MLong &amp;a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> os &lt;&lt; a.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(MLong lhs, MLong rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs.<span class=\"built_in\">val</span>() == rhs.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(MLong lhs, MLong rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs.<span class=\"built_in\">val</span>() != rhs.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;&gt;</span><br><span class=\"line\">    i64 MLong&lt;<span class=\"number\">0LL</span>&gt;::Mod = (i64)(<span class=\"number\">1E18</span>) + <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*template &lt;i64 V, i64 P&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    constexpr MLong&lt;P&gt; CInv = MLong&lt;P&gt;(V).inv();*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 模运算（int），jiangly版本，支持动态模数改变</span></span><br><span class=\"line\"><span class=\"comment\">     * @param P 模数，仅支持质数。如果选择动态定义模数，P=0，且必须调用setMod函数设置模数。默认为998244353</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P&gt;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">MInt</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">MInt</span><span class=\"params\">()</span> : x&#123;</span>&#125; &#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">MInt</span><span class=\"params\">(i64 x)</span> : x&#123;</span><span class=\"built_in\">norm</span>(x % <span class=\"built_in\">getMod</span>())&#125; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">int</span> Mod;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">getMod</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (P &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">setMod</span><span class=\"params\">(<span class=\"type\">int</span> Mod_)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Mod = Mod_;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">norm</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x += <span class=\"built_in\">getMod</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= <span class=\"built_in\">getMod</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x -= <span class=\"built_in\">getMod</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">operator</span> <span class=\"title\">int</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MInt <span class=\"keyword\">operator</span>-() <span class=\"type\">const</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MInt res;</span><br><span class=\"line\">            res.x = <span class=\"built_in\">norm</span>(<span class=\"built_in\">getMod</span>() - x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">constexpr</span> MInt <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(x != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(*<span class=\"keyword\">this</span>, <span class=\"built_in\">getMod</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MInt &amp;<span class=\"keyword\">operator</span>*=(MInt rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"number\">1LL</span> * x * rhs.x % <span class=\"built_in\">getMod</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MInt &amp;<span class=\"keyword\">operator</span>+=(MInt rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">norm</span>(x + rhs.x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MInt &amp;<span class=\"keyword\">operator</span>-=(MInt rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">norm</span>(x - rhs.x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">constexpr</span> MInt &amp;<span class=\"keyword\">operator</span>/=(MInt rhs) &amp;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> *= rhs.<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MInt <span class=\"keyword\">operator</span>*(MInt lhs, MInt rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MInt res = lhs;</span><br><span class=\"line\">            res *= rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MInt <span class=\"keyword\">operator</span>+(MInt lhs, MInt rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MInt res = lhs;</span><br><span class=\"line\">            res += rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MInt <span class=\"keyword\">operator</span>-(MInt lhs, MInt rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MInt res = lhs;</span><br><span class=\"line\">            res -= rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> MInt <span class=\"keyword\">operator</span>/(MInt lhs, MInt rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MInt res = lhs;</span><br><span class=\"line\">            res /= rhs;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> std::istream &amp;<span class=\"keyword\">operator</span>&gt;&gt;(std::istream &amp;is, MInt &amp;a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            i64 v;</span><br><span class=\"line\">            is &gt;&gt; v;</span><br><span class=\"line\">            a = <span class=\"built_in\">MInt</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> std::ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(std::ostream &amp;os, <span class=\"type\">const</span> MInt &amp;a)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> os &lt;&lt; a.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(MInt lhs, MInt rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs.<span class=\"built_in\">val</span>() == rhs.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">friend</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(MInt lhs, MInt rhs)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs.<span class=\"built_in\">val</span>() != rhs.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;&gt;</span><br><span class=\"line\">    <span class=\"type\">int</span> MInt&lt;<span class=\"number\">0</span>&gt;::Mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 逆元</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> V, <span class=\"type\">int</span> P&gt;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> MInt&lt;P&gt; CInv = <span class=\"built_in\">MInt</span>&lt;P&gt;(V).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 阶乘类(适配Jiangly模板），支持计算组合数，排列数等操作，复杂度O(n),配套jiangly版本的模运算类</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 小数据时需要组合数建议使用组合数表（杨辉三角），大数据时需要组合数建议使用Lucas定理</span></span><br><span class=\"line\"><span class=\"comment\">     * @param MOD 模数，一般取质数，部分合数情况下可能没有逆元。</span></span><br><span class=\"line\"><span class=\"comment\">     * @note 支持计算组合数，可以使用C(n,k)计算组合数。</span></span><br><span class=\"line\"><span class=\"comment\">     * @note 支持计算排列数，可以使用A(n,k)计算排列数。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Fact</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::vector&lt;T&gt; fact, factinv;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\">        <span class=\"built_in\">Fact</span>(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;_n) : <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">fact</span>(_n + <span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">factinv</span>(_n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">                fact[i] = fact[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">            factinv[n] = fact[n].<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i; --i)</span><br><span class=\"line\">                factinv[i - <span class=\"number\">1</span>] = factinv[i] * i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;n, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;k)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> || k &lt; <span class=\"number\">0</span> || n &lt; k)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fact[n] * factinv[k] * factinv[n - k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">T <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;n, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;k)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> || k &lt; <span class=\"number\">0</span> || n &lt; k)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fact[n] * factinv[n - k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//__MODINT_H__</span></span></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-数论相关\">1. 数论相关</h3>\n<h4 id=\"1-1-大质数判定（Miller-Rabin素性测试）\">1.1 大质数判定（Miller-Rabin素性测试）</h4>\n<p>以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>复杂度，以较高正确性判定质数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">mul</span><span class=\"params\">(i64 a, i64 b, i64 m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;__int128&gt;(a) * b % m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">power</span><span class=\"params\">(i64 a, i64 b, i64 m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        i64 res = <span class=\"number\">1</span> % m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; b; b &gt;&gt;= <span class=\"number\">1</span>, a = <span class=\"built_in\">mul</span>(a, a, m))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                res = <span class=\"built_in\">mul</span>(res, a, m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* @brief Miller-Rabin 素性测试,时间复杂度为 O(log n)</span></span><br><span class=\"line\"><span class=\"comment\">     * @param n 待测试的数，不大于 1e18</span></span><br><span class=\"line\"><span class=\"comment\">     * @return true 为素数，false 为合数*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(i64 n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> A[] = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> s = __builtin_ctzll(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        i64 d = (n - <span class=\"number\">1</span>) &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> a : A)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a == n)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            i64 x = <span class=\"built_in\">power</span>(a, d, n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> || x == n - <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">bool</span> ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = <span class=\"built_in\">mul</span>(x, x, n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == n - <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ok = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ok)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-2-质因数分解\">1.2 质因数分解</h4>\n<h5 id=\"1-2-1-小数字质因数分解\">1.2.1  小数字质因数分解</h5>\n<p>以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><msqrt><mi>N</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N\\sqrt N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1767em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9267em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;padding-left:0.833em;\">N</span></span><span style=\"top:-2.8867em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1133em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>复杂度分解质因数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">breakdown</span><span class=\"params\">(<span class=\"type\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; result;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= N; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N % i == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// 如果 i 能够整除 N，说明 i 为 N 的一个质因子。</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (N % i == <span class=\"number\">0</span>) N /= i;</span><br><span class=\"line\">      result.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (N != <span class=\"number\">1</span>) &#123;  <span class=\"comment\">// 说明再经过操作之后 N 留下了一个素数</span></span><br><span class=\"line\">    result.<span class=\"built_in\">push_back</span>(N);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-2-2-大质数质因数分解（Pollar-Rho算法）\">1.2.2 大质数质因数分解（Pollar-Rho算法）</h5>\n<p>以期望复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mfrac><mn>1</mn><mn>4</mn></mfrac></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^{\\frac{1}{4}})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.204em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>复杂度分解质因数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> Prime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">using</span> i64=<span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">mul</span><span class=\"params\">(i64 a, i64 b, i64 m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">static_cast</span>&lt;__int128&gt;(a) * b % m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">power</span><span class=\"params\">(i64 a, i64 b, i64 m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        i64 res = <span class=\"number\">1</span> % m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; b; b &gt;&gt;= <span class=\"number\">1</span>, a = <span class=\"built_in\">mul</span>(a, a, m))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                res = <span class=\"built_in\">mul</span>(res, a, m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* @brief Miller-Rabin 素性测试,时间复杂度为 O(log n)</span></span><br><span class=\"line\"><span class=\"comment\">     * @param n 待测试的数，不大于 1e18</span></span><br><span class=\"line\"><span class=\"comment\">     * @return true 为素数，false 为合数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(i64 n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> A[] = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> s = __builtin_ctzll(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        i64 d = (n - <span class=\"number\">1</span>) &gt;&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> a : A)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a == n)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            i64 x = <span class=\"built_in\">power</span>(a, d, n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> || x == n - <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">bool</span> ok = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = <span class=\"built_in\">mul</span>(x, x, n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x == n - <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ok = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ok)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* @brief 素因子分解（Pollard-Rho 算法）,时间复杂度期望为 O(n^(1/4))，最坏为 O(n^(1/2))，本函数复杂度带排序，具体复杂度待定，可估算为亚线性</span></span><br><span class=\"line\"><span class=\"comment\">     * @param n 待分解的数，不大于 1e18</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 一个 vector，包含了 n 的所有素因子，按照从小到大的顺序排列，包括重复的</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;i64&gt; <span class=\"title\">factorize</span><span class=\"params\">(i64 n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::vector&lt;i64&gt; p;</span><br><span class=\"line\">        std::function&lt;<span class=\"type\">void</span>(i64)&gt; f = [&amp;](i64 n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">10000</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= n; ++i)</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (; n % i == <span class=\"number\">0</span>; n /= i)</span><br><span class=\"line\">                        p.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                    p.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">isprime</span>(n))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> g = [&amp;](i64 x)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> (<span class=\"built_in\">mul</span>(x, x, n) + <span class=\"number\">1</span>) % n;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            i64 x0 = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i64 x = x0;</span><br><span class=\"line\">                i64 y = x0;</span><br><span class=\"line\">                i64 d = <span class=\"number\">1</span>;</span><br><span class=\"line\">                i64 power = <span class=\"number\">1</span>, lam = <span class=\"number\">0</span>;</span><br><span class=\"line\">                i64 v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (d == <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    y = <span class=\"built_in\">g</span>(y);</span><br><span class=\"line\">                    ++lam;</span><br><span class=\"line\">                    v = <span class=\"built_in\">mul</span>(v, std::<span class=\"built_in\">abs</span>(x - y), n);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lam % <span class=\"number\">127</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        d = std::<span class=\"built_in\">gcd</span>(v, n);</span><br><span class=\"line\">                        v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (power == lam)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        x = y;</span><br><span class=\"line\">                        power *= <span class=\"number\">2</span>;</span><br><span class=\"line\">                        lam = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        d = std::<span class=\"built_in\">gcd</span>(v, n);</span><br><span class=\"line\">                        v = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d != n)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">f</span>(d);</span><br><span class=\"line\">                    <span class=\"built_in\">f</span>(n / d);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ++x0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">f</span>(n);</span><br><span class=\"line\">        std::<span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(), p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 素因子分解（Pollard-Rho 算法）</span></span><br><span class=\"line\"><span class=\"comment\">     * @param n 待分解的数，不大于 1e18</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 一个 vector，包含了 n 的所有素因子，按照从小到大的顺序排列，first 为素因子，second 为指数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    std::vector&lt;std::pair&lt;i64, i64&gt;&gt; <span class=\"built_in\">factorize_pairs</span>(i64 n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::vector&lt;i64&gt; p = <span class=\"built_in\">factorize</span>(n);</span><br><span class=\"line\">        std::vector&lt;std::pair&lt;i64, i64&gt;&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : p)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res.<span class=\"built_in\">empty</span>() || res.<span class=\"built_in\">back</span>().first != i)</span><br><span class=\"line\">                res.<span class=\"built_in\">emplace_back</span>(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                res.<span class=\"built_in\">back</span>().second++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> p, i64 n, std::vector&lt;std::pair&lt;i64, i64&gt;&gt; &amp;ps, std::vector&lt;i64&gt; &amp;ds)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == ps.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ds.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i64 i = <span class=\"number\">0</span>; i &lt;= ps[p].second; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(p + <span class=\"number\">1</span>, n, ps, ds);</span><br><span class=\"line\">            n *= ps[p].first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 因数集合(不含1,Pollard-Rho 算法质因数分解)</span></span><br><span class=\"line\"><span class=\"comment\">     * @param n 待考察的数，不大于 1e18</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 一个 vector，包含了 n 的因子，按照从小到大的顺序排列。不含1。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;i64&gt; <span class=\"title\">getd</span><span class=\"params\">(i64 n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::vector&lt;std::pair&lt;i64, i64&gt;&gt; p = <span class=\"built_in\">factorize_pairs</span>(n);</span><br><span class=\"line\">        std::vector&lt;i64&gt; d;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>, p, d);</span><br><span class=\"line\">        std::<span class=\"built_in\">sort</span>(d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-3-基于值域处理的快速GCD\">1.3 基于值域处理的快速GCD</h4>\n<p>你需要解决以下问题：</p>\n<p>以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>的单次询问复杂度、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>的总时间复杂度回答<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">\\forall x,y\\in[1,n],gcd(x,y)=?</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mclose\">?</span></span></span></span></p>\n<p>操作方法：</p>\n<p>将任意<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>分解成三个数的乘积<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi><mo>×</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a\\times b\\times c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，则显然<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo>≤</mo><msqrt><mi>n</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">a,b,c\\le \\sqrt n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span></span></span></span>.</p>\n<p>考虑线筛，若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 为质数，显然 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,1,x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>它的一个分解；</p>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 为合数，设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的最小质因子， <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a_0,b_0,c_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>x</mi><mi>p</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{x}{p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1765em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 的一个分解；</p>\n<p>则显然有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mi>p</mi><mo separator=\"true\">,</mo><msub><mi>b</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a_0p,b_0,c_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>排序后是一个从小到大的分解。</p>\n<p>若求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">gcd(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>，设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>×</mo><mi>b</mi><mo>×</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">x=a\\times b\\times c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. 勒令<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>=</mo><mi>y</mi><mo separator=\"true\">,</mo><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p_1=y,r_1=gcd(a,p_1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>​.</p>\n<p>勒令<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><mo>=</mo><mfrac><msub><mi>p</mi><mn>1</mn></msub><msub><mi>r</mi><mn>1</mn></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">p_2=\\frac{p_1}{r_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1926em;vertical-align:-0.4451em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0278em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4451em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo separator=\"true\">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r_2=gcd(b,p_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>3</mn></msub><mo>=</mo><mfrac><msub><mi>p</mi><mn>2</mn></msub><msub><mi>r</mi><mn>2</mn></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">p_3=\\frac{p_2}{r_2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1926em;vertical-align:-0.4451em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0278em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4451em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mn>3</mn></msub><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><msub><mi>p</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r_3=gcd(c,p_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>则有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>r</mi><mn>1</mn></msub><msub><mi>r</mi><mn>2</mn></msub><msub><mi>r</mi><mn>3</mn></msub><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">gcd(x,y)=r_1r_2r_3.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span></span></span></span></p>\n<p>原理为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>r</mi><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>r</mi><mo separator=\"true\">,</mo><mi>y</mi><mi mathvariant=\"normal\">/</mi><mi>r</mi><mo stretchy=\"false\">)</mo><mspace width=\"1em\"/><mi>i</mi><mi>f</mi><mi>f</mi><mspace width=\"1em\"/><mi>r</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>r</mi><mi mathvariant=\"normal\">∣</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">gcd(x,y)=rgcd(x/r,y/r)\\quad iff\\quad r|x,r|y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">ff</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int INF = 1e6 + 1;</span><br><span class=\"line\">const int maxn = 5001;</span><br><span class=\"line\">vector&lt;array&lt;int, 3&gt;&gt; v(INF + 10);</span><br><span class=\"line\">bool vis[INF + 10];</span><br><span class=\"line\">int prime[INF + 10];</span><br><span class=\"line\">void euler()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    v[1] = &#123;1, 1, 1&#125;;</span><br><span class=\"line\">    for (int i = 2; i &lt;= INF; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!vis[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            vis[i] = 1;</span><br><span class=\"line\">            prime[++prime[0]] = i;</span><br><span class=\"line\">            v[i] = &#123;1, 1, i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int j = 1; j &lt;= prime[0] &amp;&amp; i * prime[j] &lt;= INF; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int k = i * prime[j];</span><br><span class=\"line\">            vis[k] = 1;</span><br><span class=\"line\">            v[k] = &#123;v[i][0] * prime[j], v[i][1], v[i][2]&#125;;</span><br><span class=\"line\">            sort(v[k].begin(), v[k].end());</span><br><span class=\"line\">            if (i % prime[j] == 0)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int gcds[1010][1010];</span><br><span class=\"line\">void init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gcds[0][0] = 0;</span><br><span class=\"line\">    for (int i = 1; i &lt;= 1000; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        gcds[i][0] = gcds[0][i] = i;</span><br><span class=\"line\">        for (int j = 1; j &lt;= i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            gcds[i][j] = gcds[j][i] = gcds[j][i % j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int Gcd(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int ret = 1;</span><br><span class=\"line\">    for (int i = 0, r; i &lt; 3; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (v[a][i] &gt; 1e3)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (b % v[a][i])</span><br><span class=\"line\">                r = 1;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                r = v[a][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            r = gcds[v[a][i]][b % v[a][i]];</span><br><span class=\"line\">        b /= r;</span><br><span class=\"line\">        ret = ret * r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-4-扩展欧几里得定理\">1.4 扩展欧几里得定理</h4>\n<p>可求出方程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ax+by=gcd(a,b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>的一组特解。该方程通解为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>x</mi><mo>=</mo><msup><mi>x</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup><mo>+</mo><mi>k</mi><mfrac><mi>b</mi><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo separator=\"true\">,</mo><mi>k</mi><mo>∈</mo><mi>Z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>y</mi><mo>=</mo><msup><mi>y</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup><mo>−</mo><mi>k</mi><mfrac><mi>a</mi><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\"application/x-tex\">\\left\\{\n\\begin{aligned}\nx=x^{&#x27;}+k\\frac{b}{gcd(a,b)}&amp;\\\\\n\\\\&amp;,k\\in Z\\\\\ny=y^{&#x27;}-k\\frac{a}{gcd(a,b)}\\\\\n\\end{aligned}\n\\right.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.951em;vertical-align:-3.7255em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.15em;\"><span style=\"top:-1.366em;\"><span class=\"pstrut\" style=\"height:4.116em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-1.358em;\"><span class=\"pstrut\" style=\"height:4.116em;\"></span><span style=\"height:2.116em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"2.116em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 2116\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V2116 H384z M384 0 H504 V2116 H384z\"/></svg></span></span><span style=\"top:-4.116em;\"><span class=\"pstrut\" style=\"height:4.116em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-5.258em;\"><span class=\"pstrut\" style=\"height:4.116em;\"></span><span style=\"height:2.116em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"2.116em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 2116\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V2116 H384z M384 0 H504 V2116 H384z\"/></svg></span></span><span style=\"top:-7.366em;\"><span class=\"pstrut\" style=\"height:4.116em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.65em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.2255em;\"><span style=\"top:-6.2255em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9925em;\"><span style=\"top:-2.9925em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-4.1495em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.6495em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"></span></span><span style=\"top:-0.8819em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9925em;\"><span style=\"top:-2.9925em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.7255em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.2255em;\"><span style=\"top:-6.2255em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord\"></span></span></span><span style=\"top:-2.6495em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3819em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>取最小的非负解，<code>x=(x%s+s)%s</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> &amp;x, <span class=\"type\">int</span> &amp;y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exgcd</span>(b, a % b, y, x);</span><br><span class=\"line\">    y -= (a / b) * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-5-积性函数线性筛（欧拉函数筛）\">1.5 积性函数线性筛（欧拉函数筛）</h4>\n<p>如果一个积性函数能够满足以下三条性质：</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mtext>可</mtext><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mtext>查询</mtext></mrow><annotation encoding=\"application/x-tex\">f(p)可O(1)查询</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">查询</span></span></span></span></li>\n<li>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd(n,m)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(nm)=\\varphi(n)\\varphi(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">nm</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∣</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n\\mid m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>,则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mtext>可积性转移</mtext></mrow><annotation encoding=\"application/x-tex\">\\varphi(nm)可积性转移</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">nm</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">可积性转移</span></span></span></span>（即递推公式只含有乘法）</li>\n</ol>\n<p>则均可使用线性筛实现线性求解。</p>\n<p><em><strong>筛法求欧拉函数：</strong></em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> prime[maxn];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[maxn];<span class=\"comment\">//初始0，标记合数</span></span><br><span class=\"line\"><span class=\"type\">int</span> phi[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">euler</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])prime[++prime[<span class=\"number\">0</span>]]=i,phi[i]=i<span class=\"number\">-1</span>;\\\\性质<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=prime[<span class=\"number\">0</span>]&amp;&amp;i*prime[j]&lt;=n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            vis[i*prime[j]]=<span class=\"literal\">true</span>;\\\\筛去合数</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%prime[j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                phi[i*prime[j]]=prime[j]*phi[i];\\\\性质<span class=\"number\">3</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            phi[i*prime[j]]=phi[prime[j]]*phi[i];\\\\性质<span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em><strong>因数个数筛：</strong></em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">pre</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; d;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; num;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">bool</span>&gt; vis;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; prime;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> _n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        n = _n;</span><br><span class=\"line\">        d.<span class=\"built_in\">resize</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        num.<span class=\"built_in\">resize</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        vis.<span class=\"built_in\">resize</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">did</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        d[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                prime.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">                d[i] = <span class=\"number\">2</span>;</span><br><span class=\"line\">                num[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; prime.<span class=\"built_in\">size</span>() &amp;&amp; i * prime[j] &lt;= n; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                vis[i * prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % prime[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num[i * prime[j]] = num[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    d[i * prime[j]] = d[i] / (num[i * prime[j]]) * (num[i * prime[j]] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                num[i * prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                d[i * prime[j]] = d[i] * <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">qs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>若函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(1)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><msup><mi>N</mi><mo>∗</mo></msup><mo separator=\"true\">,</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\forall x,y\\in N^*,gcd(x,y)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(xy)=f(x)f(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>​为积性函数。</p>\n<p>特别的，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><msup><mi>N</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\forall x,y\\in N^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(xy)=f(x)f(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>​​​,则称作完全积性函数。</p>\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>均为积性函数，那么下列函数也称作积性函数：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd class =\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mi>p</mi></msup><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class =\"mtr-glue\"></mtd><mtd class =\"mml-eqn-num\"></mtd></mtr><mtr><mtd class =\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>f</mi><mi>p</mi></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class =\"mtr-glue\"></mtd><mtd class =\"mml-eqn-num\"></mtd></mtr><mtr><mtd class =\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class =\"mtr-glue\"></mtd><mtd class =\"mml-eqn-num\"></mtd></mtr><mtr><mtd class =\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>h</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>d</mi><mo>∣</mo><mi>x</mi></mrow></munder><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mfrac><mi>x</mi><mi>d</mi></mfrac><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class =\"mtr-glue\"></mtd><mtd class =\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\n&amp;h(x)=f(x^p)\\\\\n&amp;h(x)=f^p(x)\\\\\n&amp;h(x)=f(x)g(x)\\\\\n&amp;h(x)=\\sum_{d\\mid x}f(d)g(\\frac{x}{d})\\\\\n\\end{align}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.4236em;vertical-align:-3.4618em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.9618em;\"><span style=\"top:-6.2293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.7293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.2293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.4618em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.4618em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.9618em;\"><span style=\"top:-6.2293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.7293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.2293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.4618em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.809em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.516em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.4618em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.9618em;\"><span style=\"top:-6.2293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"eqn-num\"></span></span><span style=\"top:-4.7293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"eqn-num\"></span></span><span style=\"top:-3.2293em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"eqn-num\"></span></span><span style=\"top:-1.4618em;\"><span class=\"pstrut\" style=\"height:3.1076em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.4618em;\"><span></span></span></span></span></span></span></span></span></p>\n<p>设质因数分解<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>p</mi><mi>i</mi><msub><mi>k</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">x=\\prod_{i=1}^{n}p_i^{k_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2307em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931em;\"><span style=\"top:-2.4231em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.1449em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2769em;\"><span></span></span></span></span></span></span></span></span></span>，则</p>\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>为积性函数，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><msubsup><mi>p</mi><mi>i</mi><mi>k</mi></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)=\\prod_{i=1}^{n}f(p_i^k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1488em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-2.4413em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2587em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>为完全积性函数，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><msubsup><mi>p</mi><mi>i</mi><mi>k</mi></msubsup><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msup><mi>f</mi><mi>k</mi></msup><mo stretchy=\"false\">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)=\\prod_{i=1}^{n}f(p_i^k)=\\prod_{i=1}^{n}f^k(p_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1488em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-2.4413em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2587em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1488em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>​</p>\n<p>（因为质数和其自己的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">gcd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span></span></span></span>​并不是1而是其本身）</p>\n<p>常见积性函数:</p>\n<ol>\n<li>\n<p>欧拉函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">[</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)=\\sum_{i=1}^{n}[gcd(i,n)=1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n</li>\n<li>\n<p>除数函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mi>k</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>d</mi><mo>∣</mo><mi>n</mi></mrow></msub><msup><mi>d</mi><mi>k</mi></msup><mo separator=\"true\">,</mo><mi>k</mi><mo>∈</mo><mi>N</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma_k(n)=\\sum_{d\\mid n}d^k,k\\in N.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3238em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">.</span></span></span></span></p>\n<p>（特别的，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma_0(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>又记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，表示除数的个数。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma_1(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>又记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>​​，表示因数和）</p>\n</li>\n</ol>\n<p>二者均为非完全积性函数。</p>\n<ol start=\"3\">\n<li>莫比乌斯函数</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd class =\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mspace width=\"1em\"/><mtext> </mtext><mo>−</mo><mn>1</mn><mspace width=\"2em\"/><mspace width=\"1em\"/><mtext>  </mtext><mi>i</mi><mi>f</mi><mi>f</mi><mtext>  </mtext><mi>n</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mi>a</mi><mtext> </mtext><mi>p</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mspace width=\"2em\"/><mn>0</mn><mspace width=\"2em\"/><mspace width=\"2em\"/><msup><mi>n</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi><mn>1</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup><mo stretchy=\"false\">)</mo><mspace width=\"2em\"/><mspace width=\"1em\"/><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo separator=\"true\">,</mo><mi>n</mi><mo>=</mo><msub><mi>p</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>n</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup></mrow></mstyle></mtd><mtd class =\"mtr-glue\"></mtd><mtd class =\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\\mu(n)=\\left\\{\n\\begin{aligned}\n&amp;\\quad \\ -1\\qquad \\quad \\ \\ iff\\ \\ n\\ is\\ a\\ prime \\\\\n&amp;\\qquad 0\\qquad \\qquad n^{&#x27;}\\;mod\\;p1=0\\\\\n&amp;-\\mu(n^{&#x27;})\\qquad \\quad otherwise\n\\end{aligned}\n\\right.\n&amp;,n=p_1\\cdot n^{&#x27;}\n\\end{align}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.105em;vertical-align:-2.3025em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.8025em;\"><span style=\"top:-4.8025em;\"><span class=\"pstrut\" style=\"height:4.6525em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-1.9em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-1.892em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.616em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.616em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 616\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V616 H384z M384 0 H504 V616 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.616em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.616em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 616\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V616 H384z M384 0 H504 V616 H384z\"/></svg></span></span><span style=\"top:-4.9em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6525em;\"><span style=\"top:-4.805em;\"><span class=\"pstrut\" style=\"height:2.9925em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.1525em;\"><span class=\"pstrut\" style=\"height:2.9925em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.9925em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1525em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6525em;\"><span style=\"top:-4.8125em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">ff</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">a</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">e</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9925em;\"><span style=\"top:-2.9925em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-1.5075em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9925em;\"><span style=\"top:-2.9925em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">se</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1525em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3025em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.8025em;\"><span style=\"top:-4.8025em;\"><span class=\"pstrut\" style=\"height:4.6525em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9925em;\"><span style=\"top:-2.9925em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.5795em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3025em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.8025em;\"><span style=\"top:-4.8025em;\"><span class=\"pstrut\" style=\"height:4.6525em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3025em;\"><span></span></span></span></span></span></span></span></span></p>\n<ol start=\"4\">\n<li>\n<p>欧拉函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">[</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(n)=\\sum_{i=1}^{n}[gcd(i,n)=1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>\n<p>通解公式</p>\n</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo><mtext> </mtext><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo separator=\"true\">,</mo><mtext> </mtext><mtext> </mtext><mtext> </mtext><mi>x</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>p</mi><mi>i</mi><msub><mi>k</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">\\varphi(x)=x\\prod_{i=1}^{n}(1-\\frac{1}{p_i})\\,\\,\\,\\,,\\,\\,\\,x=\\prod_{i=1}^{n}p_i^{k_i}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2019em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.931em;\"><span style=\"top:-2.4231em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.1449em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2769em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>性质</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\varphi(p)=p-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>p</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(p^k)=p^{k-1}\\varphi(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd(n,m)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(nm)=\\varphi(n)\\varphi(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">nm</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∣</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n\\mid m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>,则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(nm)=n\\varphi(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">nm</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>​</li>\n</ol>\n<p>仔细观察不难发现2是4的子集关系，故性质1、3、4称作欧拉函数三性质，简称欧拉函数性。</p>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-6-裴蜀定理\">1.6 裴蜀定理</h4>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>设不全为</mtext><mn>0</mn><mtext>的整数</mtext><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mtext>，对于任意整数</mtext><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mtext>有</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mspace width=\"2em\"/><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>且一定存在整数解</mtext><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mtext>使得下列方程成立</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mspace width=\"2em\"/><mi>a</mi><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mi>b</mi><msub><mi>y</mi><mn>0</mn></msub><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp;设不全为0的整数a,b，对于任意整数x,y有\\\\\n\\\\\n&amp;\\qquad gcd(a,b)|(ax+by)\\\\\n\\\\\n&amp;且一定存在整数解x_0,y_0使得下列方程成立\\\\\n\\\\\n&amp;\\qquad ax_0+by_0=gcd(a,b)\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:10.5em;vertical-align:-5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.5em;\"><span style=\"top:-7.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.5em;\"><span style=\"top:-7.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord cjk_fallback\">设不全为</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">的整数</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord cjk_fallback\">，对于任意整数</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord cjk_fallback\">有</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord cjk_fallback\">且一定存在整数解</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">使得下列方程成立</span></span></span><span style=\"top:1.34em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>上述情形可以推广到任意多变量。</p>\n<h4 id=\"1-7-扩展欧拉定理\">1.7 扩展欧拉定理</h4>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mo>≡</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><msup><mi>a</mi><mrow><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup><mspace width=\"2em\"/><mspace width=\"2em\"/><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><msup><mi>a</mi><mi>b</mi></msup><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"2em\"/><mspace width=\"1em\"/><mtext> </mtext><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>b</mi><mo>&lt;</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><msup><mi>a</mi><mrow><mo stretchy=\"false\">(</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup><mspace width=\"1em\"/><mtext> </mtext><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>b</mi><mo>≥</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a^b\\equiv \n\\left \\{\n\\begin{aligned}\n&amp;a^{b\\ mod\\ \\varphi(m)}\\qquad \\qquad gcd(a,m)=1\\\\\n&amp;a^b \\qquad\\qquad\\qquad\\quad\\ gcd(a,m)\\neq1,b&lt;\\varphi(m)\\\\\n&amp;a^{(b\\ mod\\ \\varphi(m))+\\varphi(m)} \\quad \\ gcd(a,m)\\neq1,b\\geq\\varphi(m)\n\\end{aligned}\n\\right.\\quad (mod\\ m)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8991em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.8em;vertical-align:-2.15em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-1.9em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-1.892em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.616em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.616em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 616\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V616 H384z M384 0 H504 V616 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.616em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.616em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 616\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V616 H384z M384 0 H504 V616 H384z\"/></svg></span></span><span style=\"top:-4.9em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6276em;\"><span style=\"top:-4.6276em;\"><span class=\"pstrut\" style=\"height:2.938em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.0684em;\"><span class=\"pstrut\" style=\"height:2.938em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.4704em;\"><span class=\"pstrut\" style=\"height:2.938em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1276em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6276em;\"><span style=\"top:-4.6896em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">φ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.1304em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span><span style=\"top:-1.5324em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">φ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">))</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">φ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1276em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h4 id=\"1-8-乘法逆元\">1.8 乘法逆元</h4>\n<p>线性逆元：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> mod;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">6e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> inv[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; mod;</span><br><span class=\"line\">    inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= a; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class=\"line\">        cout &lt;&lt; inv[i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>快速幂逆元（费马小定理）：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>对于任意正整数</mtext><mi>a</mi><mtext>，</mtext><mi mathvariant=\"normal\">∃</mi><mi>p</mi><mtext>满足</mtext><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mtext>则必然有以下同余式成立</mtext><mo>:</mo><mspace linebreak=\"newline\"></mspace><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">对于任意正整数a，\\exists p满足gcd(a,p)=1,则必然有以下同余式成立:\\\\\na^{p-1} \\equiv1\\ (mod \\; n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">对于任意正整数</span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">p</span><span class=\"mord cjk_fallback\">满足</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\">则必然有以下同余式成立</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">quickpow</span>(a,mod<span class=\"number\">-2</span>);</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-9-中国剩余定理\">1.9 中国剩余定理</h4>\n<p>给定 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 组非负整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i, b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，求解关于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的方程组的最小非负整数解。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>≡</mo><msub><mi>b</mi><mn>1</mn></msub><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><msub><mi>a</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>≡</mo><msub><mi>b</mi><mn>2</mn></msub><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><msub><mi>a</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">…</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>≡</mo><msub><mi>b</mi><mi>n</mi></msub><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\"application/x-tex\">\\begin{cases}x\\equiv b_1\\pmod{a_1}\\\\x\\equiv b_2\\pmod{a_2}\\\\\\dots\\\\x\\equiv b_n\\pmod{a_n}\\end{cases}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.76em;vertical-align:-2.63em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.95em;\"><span style=\"top:-1.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-1.592em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.916em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.916em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 916\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V916 H384z M384 0 H504 V916 H384z\"/></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.916em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.916em\" style=\"width:0.8889em\" viewBox=\"0 0 888.89 916\" preserveAspectRatio=\"xMinYMin\"><path d=\"M384 0 H504 V916 H384z M384 0 H504 V916 H384z\"/></svg></span></span><span style=\"top:-5.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.45em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.13em;\"><span style=\"top:-5.13em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"minner\">…</span></span></span><span style=\"top:-0.81em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.63em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100 \\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><msup><mn>10</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\le n \\le {10}^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8484em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">10</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8484em;\"><span style=\"top:-3.0973em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>b</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><msup><mn>10</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\le b_i,a_i \\le {10}^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8484em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">10</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8484em;\"><span style=\"top:-3.0973em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">12</span></span></span></span></span></span></span></span></span></span></span></span>，保证所有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的最小公倍数不超过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>10</mn><mn>18</mn></msup></mrow><annotation encoding=\"application/x-tex\">{10}^{18}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8484em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">10</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8484em;\"><span style=\"top:-3.0973em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span></span></span></span>。不保证<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>为质数</p>\n<p><strong>请注意程序运行过程中进行乘法运算时结果可能有溢出的风险。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">quickmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (a &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        a += mod;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        b += mod;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b)</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">    <span class=\"type\">int</span> e = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            (e += a) %= mod;</span><br><span class=\"line\">        (a &lt;&lt;= <span class=\"number\">1</span>) %= mod;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> &amp;x, <span class=\"type\">int</span> &amp;y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exgcd</span>(b, a % b, y, x);</span><br><span class=\"line\">    y -= (a / b) * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">500001</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn], m[maxn]; <span class=\"comment\">// 对m取模余数是a</span></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ExCRT</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mod = m[<span class=\"number\">1</span>], ans = a[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b1 = mod, b2 = m[i], c = __gcd(b1, b2), minus = (a[i] - ans % b2 + b2) % b2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minus % c != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        b1 /= c, b2 /= c, minus /= c;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">exgcd</span>(b1, b2, x, y);</span><br><span class=\"line\">        x = <span class=\"built_in\">quickmul</span>(x, minus, b2);</span><br><span class=\"line\">        ans += x * mod;</span><br><span class=\"line\">        mod *= b2;</span><br><span class=\"line\">        ans = (ans % mod + mod) % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; m[i] &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">ExCRT</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-10-离散对数\">1.10 离散对数</h4>\n<h5 id=\"1-10-1-原根\">1.10.1 原根</h5>\n<p>满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a^n\\equiv 1\\ (mod \\ m),gcd(a,m)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>的最小正整数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>存在，称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>的阶，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>δ</mi><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta_m(a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>给定<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd(g,m)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>δ</mi><mi>m</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta_m(g)=\\varphi(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0379em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>，则称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>的一个原根（循环群的生成元）。</p>\n<p>详细见<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>I</mi><mo>−</mo><mi>W</mi><mi>i</mi><mi>k</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">OI-Wiki</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Wiki</span></span></span></span></p>\n<h5 id=\"1-10-2-离散对数\">1.10.2 离散对数</h5>\n<p>定义<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup><mo>≡</mo><mi>b</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a^x\\equiv b\\ (mod\\ m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>的一个原根时，记<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>i</mi><mi>n</mi><msub><mi>d</mi><mi>a</mi></msub><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">x=ind_ab</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">in</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">b</span></span></span></span>，称作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>关于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>的离散对数。</p>\n<h5 id=\"1-10-3-ExBSGS算法\">1.10.3 ExBSGS算法</h5>\n<p>给定 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a,p,b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，求满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup><mo>≡</mo><mi>b</mi><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a^x≡b \\pmod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> 的最小自然数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 。如果无解，输出 <code>No Solution</code>，否则输出最小自然数解。</p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\le a,p,b≤10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>p</mi><mo>=</mo><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a=p=b=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msqrt><mi>p</mi></msqrt><mo>≤</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sum \\sqrt p\\le 5\\times 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0869em;vertical-align:-0.3369em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7031em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">p</span></span><span style=\"top:-2.6631em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3369em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span>​。</p>\n<p>原理：搞到和BSGS算法一致，通过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≡</mo><mi>b</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>a</mi><mo>×</mo><mi>d</mi><mo>≡</mo><mi>b</mi><mo>×</mo><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>c</mi><mo>×</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a \\equiv b \\ (mod\\ c) \\iff a\\times d\\equiv b\\times d\\ (mod\\ c\\times d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4637em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>每次在两边除以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d=gcd(a,p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span>，得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>a</mi><mi>d</mi></mfrac><mo>×</mo><msup><mi>a</mi><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mfrac><mi>b</mi><mi>d</mi></mfrac><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mfrac><mi>p</mi><mi>d</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{a}{d}\\times a^{x-1}\\equiv\\frac{b}{d}\\ (mod\\ \\frac{p}{d})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>重复执行该语段，直到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd(a,p)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 为止。</p>\n<p>然后上<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>S</mi><mi>G</mi><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">BSGS</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">BSGS</span></span></span></span>根号暴力分治算，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt {\\varphi(p)})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.305em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.935em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.895em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.28em\" viewBox=\"0 0 400000 1296\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">BSGS</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n, <span class=\"type\">int</span> p, <span class=\"type\">int</span> ad = <span class=\"number\">1</span>)</span> <span class=\"comment\">// ad*(a^x)=n(mod p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"type\">int</span> m = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">sqrt</span>(p));</span><br><span class=\"line\">    <span class=\"type\">int</span> s = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++, s = <span class=\"number\">1ll</span> * s * a % p)</span><br><span class=\"line\">        mp[<span class=\"number\">1ll</span> * s * n % p] = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, tmp = s, s = ad; i &lt;= m; i++, s = <span class=\"number\">1ll</span> * s * tmp % p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp.<span class=\"built_in\">find</span>(s) != mp.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">1ll</span> * i * m - mp[s] &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * i * m - mp[s];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">exBSGS</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n, <span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    a %= p;</span><br><span class=\"line\">    n %= p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || p == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> d, ad = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((d = <span class=\"built_in\">gcd</span>(a, p)) ^ <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % d)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        n /= d;</span><br><span class=\"line\">        p /= d;</span><br><span class=\"line\">        ad = (<span class=\"number\">1ll</span> * ad * a / d) % p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ad == n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"built_in\">BSGS</span>(a, n, p, ad);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans + cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> a, p, n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; a &gt;&gt; p &gt;&gt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!a &amp;&amp; !p &amp;&amp; !n)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">exBSGS</span>(a, n, p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (~ans)</span><br><span class=\"line\">            cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;No Solution&quot;</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-11-二次剩余（奇素数）\">1.11 二次剩余（奇素数）</h4>\n<p>给出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo separator=\"true\">,</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">N,p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>，求解方程</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>≡</mo><mi>N</mi><mspace></mspace><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x^2 \\equiv N \\pmod{p}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>多组数据，<strong>且保证 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 是奇素数。</strong></p>\n<p>输出共 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> 行。</p>\n<p>对于每一行输出，若有解，则按 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\bmod ~p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">p</span></span></span></span> 后递增的顺序输出在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext> </mtext><mo lspace=\"0.22em\" rspace=\"0.22em\"><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow></mo><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\bmod~ p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">p</span></span></span></span> 意义下的全部解；若两解相同，只输出其中一个；若无解，则输出 <code>Hola!</code> 。</p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>T</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo separator=\"true\">,</mo><mn>0</mn><mo>≤</mo><mi>N</mi><mo separator=\"true\">,</mo><mi>p</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">1\\leq T\\leq 10^4,0\\le N, p\\leq 10^9+9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0085em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span>​。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\">random_device rd;</span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">ran</span><span class=\"params\">(rd())</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">num</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll x; <span class=\"comment\">// 实部</span></span><br><span class=\"line\">    ll y; <span class=\"comment\">// 虚部(即虚数单位√w的系数)</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ll t, w, n, p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">num <span class=\"title\">mul</span><span class=\"params\">(num a, num b, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// 复数乘法</span></span><br><span class=\"line\">    num res;</span><br><span class=\"line\">    res.x = ((a.x * b.x % p + a.y * b.y % p * w % p) % p + p) % p; <span class=\"comment\">// x = a.x*b.x + a.y*b.y*w</span></span><br><span class=\"line\">    res.y = ((a.x * b.y % p + a.y * b.x % p) % p + p) % p;         <span class=\"comment\">// y = a.x*b.y + a.y*b.x</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qpow_r</span><span class=\"params\">(ll a, ll b, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// 实数快速幂</span></span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = res * a % p;</span><br><span class=\"line\">        a = a * a % p;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qpow_i</span><span class=\"params\">(num a, ll b, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// 复数快速幂</span></span><br><span class=\"line\">    num res = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = <span class=\"built_in\">mul</span>(res, a, p);</span><br><span class=\"line\">        a = <span class=\"built_in\">mul</span>(a, a, p);</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.x % p; <span class=\"comment\">// 只用返回实数部分，因为虚数部分没了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cipolla</span><span class=\"params\">(ll n, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    n %= p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">qpow_r</span>(n, (p - <span class=\"number\">1</span>) / <span class=\"number\">2</span>, p) == <span class=\"number\">-1</span> + p)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 据欧拉准则判定是否有解</span></span><br><span class=\"line\">    ll a;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 找出一个符合条件的a</span></span><br><span class=\"line\">        a = <span class=\"built_in\">ran</span>() % p;</span><br><span class=\"line\">        w = (((a * a) % p - n) % p + p) % p; <span class=\"comment\">// w = a^2 - n，虚数单位的平方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">qpow_r</span>(w, (p - <span class=\"number\">1</span>) / <span class=\"number\">2</span>, p) == <span class=\"number\">-1</span> + p)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num x = &#123;a, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">qpow_i</span>(x, (p + <span class=\"number\">1</span>) / <span class=\"number\">2</span>, p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll ans1 = <span class=\"built_in\">cipolla</span>(n, p), ans2 = -ans1 + p; <span class=\"comment\">// 另一个解就是其相反数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans1 == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Hola!\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans1 &gt; ans2)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(ans1, ans2);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans1 == ans2)</span><br><span class=\"line\">                cout &lt;&lt; ans1 &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                cout &lt;&lt; ans1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"1-12-数论分块\">1.12 数论分块</h4>\n<p>以期望复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>x</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">x</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的复杂度求解<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>g</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mi>i</mi></mfrac><mo stretchy=\"false\">⌋</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)=\\sum_{i=1}^ng(\\lfloor\\frac{x}i\\rfloor)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1493em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋)</span></span></span></span>。</p>\n<p>分块理论：如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mi>i</mi></mfrac><mo stretchy=\"false\">⌋</mo><mo>=</mo><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mi>j</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\frac{x}{i}\\rfloor=\\lfloor\\frac{x}{j}\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2311em;vertical-align:-0.4811em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>，则有该块的分块区间为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mi>i</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow></mfrac><mo stretchy=\"false\">⌋</mo><mo stretchy=\"false\">]</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large [i,\\lfloor\\frac{x}{\\lfloor\\frac{x}{i}\\rfloor}\\rfloor]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5892em;vertical-align:-0.6892em;\"></span><span class=\"mopen sizing reset-size6 size7\">[</span><span class=\"mord mathnormal sizing reset-size6 size7\">i</span><span class=\"mpunct sizing reset-size6 size7\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen sizing reset-size6 size7\">⌊</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.681em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size4 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7069em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size4 size6\"></span></span><span class=\"mclose mtight\">⌋</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5743em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mclose sizing reset-size6 size7\">⌋]</span></span></span></span>​</p>\n<p>原理：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mrow><mi>a</mi><mi>b</mi></mrow></mfrac><mo stretchy=\"false\">⌋</mo><mo>=</mo><mo stretchy=\"false\">⌊</mo><mfrac><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mi>a</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><mi>b</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\frac{x}{ab}\\rfloor=\\lfloor\\frac{\\lfloor\\frac{x}{a}\\rfloor}{b}\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ab</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4208em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0758em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5508em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span><span class=\"mclose mtight\">⌋</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">H</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"type\">long</span> res = <span class=\"number\">0</span>;  <span class=\"comment\">// 储存结果</span></span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r;       <span class=\"comment\">// 块左端点与右端点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt;= n) &#123;</span><br><span class=\"line\">    r = n / (n / l);  <span class=\"comment\">// 计算当前块的右端点</span></span><br><span class=\"line\">    <span class=\"comment\">// 累加这一块的贡献到结果中。乘上 1LL 防止溢出</span></span><br><span class=\"line\">    res += <span class=\"number\">1LL</span> * (r - l + <span class=\"number\">1</span>) * (n / l);</span><br><span class=\"line\">    l = r + <span class=\"number\">1</span>;  <span class=\"comment\">// 左端点移到下一块</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是向上取整分块<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>g</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">⌈</mo><mfrac><mi>x</mi><mi>i</mi></mfrac><mo stretchy=\"false\">⌉</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)=\\sum_{i=1}^ng(\\lceil\\frac{x}i\\rceil)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1493em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉)</span></span></span></span>，则有如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mfrac><mi>x</mi><mi>i</mi></mfrac><mo stretchy=\"false\">⌉</mo><mo>=</mo><mo stretchy=\"false\">⌈</mo><mfrac><mi>x</mi><mi>j</mi></mfrac><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil\\frac{x}{i}\\rceil=\\lceil\\frac{x}{j}\\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2311em;vertical-align:-0.4811em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span></span></span></span>，则有该块的分块区间为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">⌈</mo><mfrac><mi>x</mi><mrow><mo stretchy=\"false\">⌈</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow><mi>i</mi></mfrac><mo stretchy=\"false\">⌉</mo></mrow></mfrac><mo stretchy=\"false\">⌉</mo><mo stretchy=\"false\">]</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large [i,\\lceil\\frac{x}{\\lceil\\frac{x-1}{i}\\rceil}\\rceil]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.6427em;vertical-align:-0.7427em;\"></span><span class=\"mopen sizing reset-size6 size7\">[</span><span class=\"mord mathnormal sizing reset-size6 size7\">i</span><span class=\"mpunct sizing reset-size6 size7\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen sizing reset-size6 size7\">⌈</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.681em;\"><span style=\"top:-2.6104em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌈</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size4 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8693em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.386em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size4 size6\"></span></span><span class=\"mclose mtight\">⌉</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6189em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mclose sizing reset-size6 size7\">⌉]</span></span></span></span>。注意特殊处理<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">i\\ge x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>的情况，此时分块右端点分母为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.注意右边界的写法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> calc = [&amp;](<span class=\"keyword\">auto</span> self, <span class=\"type\">int</span> x) -&gt; i64</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp.<span class=\"built_in\">count</span>(x))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mp[x];</span><br><span class=\"line\">        i64 res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> invr = (x - <span class=\"number\">1</span>) / i;</span><br><span class=\"line\">            <span class=\"type\">int</span> r = n;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (invr != <span class=\"number\">0</span>)                  <span class=\"comment\">// 分块防0</span></span><br><span class=\"line\">                r = <span class=\"built_in\">min</span>(r, (x - <span class=\"number\">1</span>) / invr); <span class=\"comment\">// 注意分块值域不要超过你求和式的上界</span></span><br><span class=\"line\">            res = (res + (r - i + <span class=\"number\">1</span>) * <span class=\"built_in\">self</span>(self, (x + i - <span class=\"number\">1</span>) / i) % mod) % mod;</span><br><span class=\"line\">            i = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = (res * inv) % mod;</span><br><span class=\"line\">        res = (res + n * inv % mod) % mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mp[x] = res;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-线性代数相关\">2. 线性代数相关</h3>\n<h4 id=\"2-1-矩阵快速幂\">2.1 矩阵快速幂</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;icpc-model/Modint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Modint;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> mint = MInt&lt;mod&gt;;</span><br><span class=\"line\">vector&lt;vector&lt;mint&gt;&gt; <span class=\"keyword\">operator</span>*(vector&lt;vector&lt;mint&gt;&gt; a, vector&lt;vector&lt;mint&gt;&gt; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector&lt;vector&lt;mint&gt;&gt; <span class=\"built_in\">c</span>(a.<span class=\"built_in\">size</span>(), <span class=\"built_in\">vector</span>&lt;mint&gt;(a.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c[i][j] += (a[i][k] * b[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    vector&lt;vector&lt;mint&gt;&gt; <span class=\"built_in\">E</span>(n, <span class=\"built_in\">vector</span>&lt;mint&gt;(n, <span class=\"number\">0</span>));</span><br><span class=\"line\">    vector&lt;vector&lt;mint&gt;&gt; A = E;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        E[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; A[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            E = E * A;</span><br><span class=\"line\">        A = A * A;</span><br><span class=\"line\">        k &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; E[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"comment\">// while (t--)</span></span><br><span class=\"line\">    <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-矩阵数列递推\">2.2 矩阵数列递推</h4>\n<p>对数列递推式子列矩阵方程就行。最著名的就是feibonacci数列：</p>\n<p>\\pmatrix{f_n\\\\f_{n-1}} =\\pmatrix{1\\ 1\\\\1 \\ 0}\\pmatrix{f_{ n-1}\\\\f_{n-2}}\n</p>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-3-矩阵求逆-高斯消元-仅可求唯一解\">2.3 矩阵求逆/高斯消元(仅可求唯一解)</h4>\n<p>求矩阵的逆矩阵，无解判定矩阵非满秩矩阵，等价于解线性方程组。使用高斯消元法即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            res = (<span class=\"number\">1ll</span> * res * a) % mod;</span><br><span class=\"line\">        a = (<span class=\"number\">1ll</span> * a * a) % mod;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">gauss</span><span class=\"params\">(std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; a, std::vector&lt;<span class=\"type\">int</span>&gt; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[r][i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++r;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(a[i], a[r]);</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(b[i], b[r]);</span><br><span class=\"line\">        <span class=\"type\">int</span> inv = <span class=\"built_in\">power</span>(a[i][i], P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; ++j)</span><br><span class=\"line\">            a[i][j] = <span class=\"number\">1ll</span> * a[i][j] * inv % P;</span><br><span class=\"line\">        b[i] = <span class=\"number\">1ll</span> * b[i] * inv % P;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = a[j][i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i; k &lt; n; ++k)</span><br><span class=\"line\">                a[j][k] = (a[j][k] + <span class=\"number\">1ll</span> * (P - x) * a[i][k]) % P;</span><br><span class=\"line\">            b[j] = (b[j] + <span class=\"number\">1ll</span> * (P - x) * b[i]) % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**   高斯消元法（gaussian elimination）【久远】</span></span><br><span class=\"line\"><span class=\"comment\"> *    2020-12-02: https://www.codechef.com/viewsolution/39942900</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">gauss</span><span class=\"params\">(std::vector&lt;std::vector&lt;<span class=\"type\">double</span>&gt;&gt; a, std::vector&lt;<span class=\"type\">double</span>&gt; b, <span class=\"type\">int</span> &amp;rank)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; n &amp;&amp; a[r][i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++r;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r == n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(a[i], a[r]);</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(b[i], b[r]);</span><br><span class=\"line\">        <span class=\"type\">double</span> x = a[i][i];</span><br><span class=\"line\">        rank++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; ++j)</span><br><span class=\"line\">            a[i][j] /= x;</span><br><span class=\"line\">        b[i] /= x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            x = a[j][i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i; k &lt; n; ++k)</span><br><span class=\"line\">                a[j][k] -= a[i][k] * x;</span><br><span class=\"line\">            b[j] -= b[i] * x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">invmatrix</span>(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; a, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; b, <span class=\"type\">int</span> &amp;rank)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; n &amp;&amp; a[r][i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            ++r;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r == n)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        rank++;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(a[i], a[r]);</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(b[i], b[r]);</span><br><span class=\"line\">        <span class=\"type\">int</span> inv = <span class=\"built_in\">power</span>(a[i][i], P - <span class=\"number\">2</span>, P);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; n; ++j)</span><br><span class=\"line\">            a[i][j] = <span class=\"number\">1ll</span> * a[i][j] * inv % P;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">            b[i][k] = <span class=\"number\">1ll</span> * b[i][k] * inv % P;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = a[j][i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i; k &lt; n; ++k)</span><br><span class=\"line\">                a[j][k] = (a[j][k] + <span class=\"number\">1ll</span> * (P - x) * a[i][k]) % P;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++)</span><br><span class=\"line\">                b[j][k] = (b[j][k] + <span class=\"number\">1ll</span> * (P - x) * b[i][k]) % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">a</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">E</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; a[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                E[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; A;</span><br><span class=\"line\">    <span class=\"type\">int</span> rk = <span class=\"number\">0</span>;</span><br><span class=\"line\">    A = <span class=\"built_in\">invmatrix</span>(a, E, rk);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rk != n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;No Solution&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : A)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;j : i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; j &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// int t;</span></span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"comment\">// while (t--)</span></span><br><span class=\"line\">    <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-4-线性基\">2.4 线性基</h4>\n<p>不难发现，按位Bitwise Xor运算是一个针对MOD2剩余系向量空间加法运算，故存在代数线性基。</p>\n<p>线性空间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><msubsup><mi>Z</mi><mn>2</mn><mi>n</mi></msubsup><mo separator=\"true\">,</mo><mi>b</mi><mi>i</mi><mi>t</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>X</mi><mi>o</mi><mi>r</mi><mo separator=\"true\">,</mo><mi>b</mi><mi>i</mi><mi>t</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mtext> </mtext><mi>A</mi><mi>n</mi><mi>d</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;Z_2^n,bitwise\\ Xor,bitwise\\ And&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9425em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">tw</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">se</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">tw</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">se</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>为域空间。</p>\n<p>我们可以利用异或线性基实现：</p>\n<ol>\n<li>\n<p>判断一个数能否表示成某数集子集的异或和（已有集合元素是否能够构造出0）；</p>\n</li>\n<li>\n<p>求一个数表示成某数集子集异或和的方案数；</p>\n</li>\n<li>\n<p>求某数集子集的最大/最小/第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>大/第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>​小异或和；</p>\n<p>如果说，线性基中异或的最大数（的二进制形式）是一串 <strong>连续的，没有带后续<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></strong> 的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，那相信聪明的你一定会求第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>大，因为第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>大其实就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>。</p>\n<p>现在相当于告诉你在这一串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>中夹了很多<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，问你第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>大是多少。那么你其实可以不用管中间的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，把<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>的二进制形式弄出来，然后把中间省略<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>给插回去就好了。（因为最大值位是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>的地方一辈子不可能出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>）<br>\n解释一下就相当于把线性基异或后出来的最大值里的所有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>都给挤到最后，然后求出第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>大，再把你弄走的0给丢回去。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>g</mi><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">eg:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span>异或后最大值为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10110011</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">101100110_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">10110011</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，问第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span>大</p>\n<p>挤到后面去后成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">11111_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">1111</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>大是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1010</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">10100_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">1010</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，把<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>插回去成为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10010000</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">100100000_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">10010000</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，第20大便是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10010000</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">100100000_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">10010000</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>求一个数在某数集子集异或和中的排名。</p>\n</li>\n</ol>\n<p>线性基的独立性决定了一组异或为0的数无论以什么顺序插入最终线性基都不会允许这n个数同时插入线性基中，所以和线性基相关的贪心直接对权值排序后按顺序插入线性基就可以了。</p>\n<p>注意，线性基的插入是可重复贡献的，所以支持树上倍增<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>M</mi><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">RMQ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">RMQ</span></span></span></span>，思想参考树上倍增lca查询和序列区间最大值查询。线性基的极大无关性保证任意一组线性基最多是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">logn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span></span></span></span>​级别的，支持暴力合并。可以借助树上倍增实现树上查询问题。</p>\n<p>求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\rightarrow y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>路径上的最大异或和，只需要四段彩色弧线段所代表的倍增线性基合并即可，这是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>的单次询问。求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>c</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">lca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span></span></span></span>方式的倍增跳是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>3</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log^3n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>的。</p>\n<p><img src=\"C:%5CUsers%5C%E6%A0%BE%E6%B4%A5%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241030231917971.png\" alt=\"image-20241030231917971\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LineBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> MN = <span class=\"number\">62</span>;</span><br><span class=\"line\">    i64 a[MN + <span class=\"number\">1</span>], tmp[MN + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag; <span class=\"comment\">// 线性基中是否有重复插入的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(i64 x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MN; ~i; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &amp; (<span class=\"number\">1ll</span> &lt;&lt; i))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!a[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    a[i] = x;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    x ^= a[i];</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(i64 x)</span> <span class=\"comment\">// 查看当前线性基中能否表示出来这个数(是否已插入)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MN; ~i; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &amp; (<span class=\"number\">1ll</span> &lt;&lt; i))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!a[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    x ^= a[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">qmax</span><span class=\"params\">(i64 res = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MN; ~i; i--)</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, res ^ a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">qmin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) <span class=\"comment\">// 线性基有试图插入过相同的数，最小值为0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= MN; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">i64 <span class=\"title\">query</span><span class=\"params\">(i64 k)</span> <span class=\"comment\">// 线性基下第k小</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        i64 res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        k -= flag; <span class=\"comment\">// 线性基有试图插入过相同的数，最小值为0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!k)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= MN; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; ~j; j--)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i] &amp; (<span class=\"number\">1ll</span> &lt;&lt; j))</span><br><span class=\"line\">                    a[i] ^= a[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i])</span><br><span class=\"line\">                tmp[cnt++] = a[i];</span><br><span class=\"line\">        &#125; <span class=\"comment\">// 线性基重构</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= (<span class=\"number\">1ll</span> &lt;&lt; cnt))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k &amp; (<span class=\"number\">1ll</span> &lt;&lt; i))</span><br><span class=\"line\">                res ^= tmp[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">LineBase lb;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<p>树上倍增查询路径max</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> u64 = <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> i64 mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LineBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> MN = <span class=\"number\">60</span>;</span><br><span class=\"line\">    array&lt;u64, MN + 1&gt; a;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> LineBase <span class=\"title\">merge</span><span class=\"params\">(LineBase a, LineBase b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LineBase</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a.<span class=\"built_in\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ins</span><span class=\"params\">(u64 x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MN; ~i; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &amp; (<span class=\"number\">1ll</span> &lt;&lt; i))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!a[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    a[i] = x;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    x ^= a[i];</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(u64 x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MN; ~i; i--)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &amp; (<span class=\"number\">1ll</span> &lt;&lt; i))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!a[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    x ^= a[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">u64 <span class=\"title\">qmax</span><span class=\"params\">(u64 res = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MN; ~i; i--)</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, res ^ a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">u64 <span class=\"title\">qmin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= MN; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(LineBase b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; b.MN; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">ins</span>(b.a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">LineBase <span class=\"title\">merge</span><span class=\"params\">(LineBase a, LineBase b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LineBase c = a;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; b.MN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c.<span class=\"built_in\">ins</span>(b.a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> fa;</span><br><span class=\"line\">    LineBase lb;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e4</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node st[maxn][<span class=\"number\">16</span>];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; con[maxn];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; dep;</span><br><span class=\"line\">vector&lt;u64&gt; num;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    con[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">    con[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[u][<span class=\"number\">0</span>].fa = fa;</span><br><span class=\"line\">    dep[u] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    st[u][<span class=\"number\">0</span>].lb.<span class=\"built_in\">ins</span>(num[u]);</span><br><span class=\"line\">    st[u][<span class=\"number\">0</span>].lb.<span class=\"built_in\">ins</span>(num[fa]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">15</span>; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        st[u][j].fa = st[st[u][j - <span class=\"number\">1</span>].fa][j - <span class=\"number\">1</span>].fa;</span><br><span class=\"line\">        st[u][j].lb = <span class=\"built_in\">merge</span>(st[u][j - <span class=\"number\">1</span>].lb, st[st[u][j - <span class=\"number\">1</span>].fa][j - <span class=\"number\">1</span>].lb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : con[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">int</span>, LineBase&gt; <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[u] &lt; dep[v])</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = dep[u] - dep[v];</span><br><span class=\"line\">    LineBase ans;</span><br><span class=\"line\">    ans.<span class=\"built_in\">ins</span>(num[u]), ans.<span class=\"built_in\">ins</span>(num[v]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">15</span>; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tmp &gt;&gt; j) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            ans.<span class=\"built_in\">merge</span>(st[u][j].lb), u = st[u][j].fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;u, ans&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">15</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (st[u][j].fa != st[v][j].fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">merge</span>(st[u][j].lb);</span><br><span class=\"line\">            ans.<span class=\"built_in\">merge</span>(st[v][j].lb);</span><br><span class=\"line\">            u = st[u][j].fa, v = st[v][j].fa;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans.<span class=\"built_in\">merge</span>(st[u][<span class=\"number\">0</span>].lb);</span><br><span class=\"line\">    ans.<span class=\"built_in\">merge</span>(st[v][<span class=\"number\">0</span>].lb);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;st[u][<span class=\"number\">0</span>].fa, ans&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    num.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dep.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; num[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(u, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">lca</span>(u, v).second.<span class=\"built_in\">qmax</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-5-二进制矩阵类Matrix-h\">2.5 二进制矩阵类Matrix.h</h4>\n<p>这段代码定义了一个名为 <code>matrix_Z2_base</code> 的模板类，它用于表示和操作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><msubsup><mi>Z</mi><mn>2</mn><mi>n</mi></msubsup><mo separator=\"true\">,</mo><mi>x</mi><mi>o</mi><mi>r</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>n</mi><mi>d</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;Z_2^n,xor,and&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9425em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>线性空间的矩阵。元素只有0和1，运算在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">mod2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">2</span></span></span></span>数域下。</p>\n<ol>\n<li>\n<p><strong>构造函数</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base(int n, int m, bool init_diagonal = false, bool init_off_diagonal = false)</code>：创建一个大小为 n×m 的矩阵，其中 <code>n</code> 是行数，<code>m</code> 是列数。<code>init_diagonal</code> 和 <code>init_off_diagonal</code> 参数用于初始化对角线和非对角线元素。如果 <code>init_diagonal</code> 为 <code>true</code>，则对角线元素被初始化为 1，否则为 0。非对角线元素的初始化由 <code>init_off_diagonal</code> 控制。</li>\n</ul>\n</li>\n<li>\n<p><strong>访问操作符</strong>：</p>\n<ul>\n<li><code>std::bitset&lt;SZ&gt; &amp;operator[](int i)</code>：返回第 <code>i</code> 行的引用。</li>\n<li><code>const std::bitset&lt;SZ&gt; &amp;operator[](int i) const</code>：返回第 <code>i</code> 行的常量引用。</li>\n</ul>\n</li>\n<li>\n<p><strong>切片操作</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;inplace_slice(int il, int ir, int jl, int jr)</code>：在原地修改矩阵，返回左上角为 <code>(il, jl)</code>，右下角为 <code>(ir, jr)</code> 的子矩阵。</li>\n<li><code>matrix_Z2_base slice(int il, int ir, int jl, int jr) const</code>：返回左上角为 <code>(il, jl)</code>，右下角为 <code>(ir, jr)</code> 的子矩阵的副本。</li>\n</ul>\n</li>\n<li>\n<p><strong>行切片和列切片</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;inplace_row_slice(int il, int ir)</code>：在原地修改矩阵，返回行切片子矩阵。</li>\n<li><code>matrix_Z2_base row_slice(int il, int ir) const</code>：返回行切片子矩阵的副本。</li>\n<li><code>matrix_Z2_base &amp;inplace_column_slice(int jl, int jr)</code>：在原地修改矩阵，返回列切片子矩阵。</li>\n<li><code>matrix_Z2_base column_slice(int jl, int jr) const</code>：返回列切片子矩阵的副本。</li>\n</ul>\n</li>\n<li>\n<p><strong>比较操作符</strong>：</p>\n<ul>\n<li><code>bool operator==(const matrix_Z2_base &amp;a) const</code>：比较两个矩阵是否相等。</li>\n<li><code>bool operator!=(const matrix_Z2_base &amp;a) const</code>：比较两个矩阵是否不相等。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵加法和减法</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;operator+=(const matrix_Z2_base &amp;M)</code>：原地矩阵加法。</li>\n<li><code>matrix_Z2_base operator+(const matrix_Z2_base &amp;M) const</code>：返回两个矩阵相加的结果。</li>\n<li><code>matrix_Z2_base &amp;operator-=(const matrix_Z2_base &amp;M)</code>：原地矩阵减法。</li>\n<li><code>matrix_Z2_base operator-(const matrix_Z2_base &amp;M) const</code>：返回两个矩阵相减的结果。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵乘法</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;operator*=(const matrix_Z2_base &amp;a)</code>：原地矩阵乘法。</li>\n<li><code>matrix_Z2_base operator*(const matrix_Z2_base &amp;a) const</code>：返回两个矩阵相乘的结果。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵乘以常数</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;operator*=(bool c)</code>：将矩阵的每个元素乘以布尔常数 <code>c</code>。</li>\n<li><code>matrix_Z2_base operator*(bool c) const</code>：返回乘以常数后的矩阵。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵乘方</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;inplace_power(T e)</code>：原地计算矩阵的 <code>e</code> 次幂。</li>\n<li><code>matrix_Z2_base power(T e) const</code>：返回矩阵的 <code>e</code> 次幂。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵转置</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base &amp;inplace_transpose()</code>：原地转置矩阵。</li>\n<li><code>matrix_Z2_base transpose() const</code>：返回矩阵的转置。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵乘以行向量</strong>：</p>\n<ul>\n<li><code>std::vector&lt;int&gt; operator*(const std::bitset&lt;SZ&gt; &amp;v) const</code>：将矩阵乘以行向量 <code>v</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong>行阶梯形式和行列式、秩</strong>：</p>\n<ul>\n<li><code>tuple&lt;matrix_Z2_base &amp;, bool, int&gt; inplace_REF(int up_to = -1)</code>：原地计算矩阵的行阶梯形式，并返回行列式和秩。</li>\n<li><code>tuple&lt;matrix_Z2_base, bool, int&gt; REF(int up_to = -1) const</code>：返回矩阵的行阶梯形式，并返回行列式和秩。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵逆</strong>：</p>\n<ul>\n<li><code>optional&lt;matrix_Z2_base&gt; inverse() const</code>：返回矩阵的逆，如果矩阵不可逆，则返回空。</li>\n</ul>\n</li>\n<li>\n<p><strong>行列式</strong>：</p>\n<ul>\n<li><code>bool determinant() const</code>：返回矩阵的行列式是否为 1。</li>\n</ul>\n</li>\n<li>\n<p><strong>秩</strong>：</p>\n<ul>\n<li><code>int rank() const</code>：返回矩阵的秩。</li>\n</ul>\n</li>\n<li>\n<p><strong>线性方程组的解</strong>：</p>\n<ul>\n<li>\n<p><code>optional&lt;std::bitset&lt;SZ&gt;&gt; find_a_solution() const</code>：返回矩阵所代表的线性方程组的一个解。</p>\n<p>解多解<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>元<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>式线性方程组示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> s = <span class=\"number\">0</span>; s &lt; n; ++s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">matrix_Z2 <span class=\"title\">M</span><span class=\"params\">(n + <span class=\"number\">1</span>, n + <span class=\"number\">1</span>)</span></span>;<span class=\"comment\">//第n行表示主元都有谁，第n列是方程增广列，表示各线性方程结果。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> u = <span class=\"number\">0</span>; u &lt; n; ++u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v = <span class=\"number\">0</span>; v &lt; n; ++v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (adjm[u] &gt;&gt; v &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                M[v][u] = <span class=\"number\">1</span>;<span class=\"comment\">//原题是个图论，根据边列的矩阵方程</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        M[n][u] = u == s;<span class=\"comment\">//标记主元，表示第s个元素的解必须是1，给出来的多组解必定线性无关</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    M[n][n] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> resptr = M.<span class=\"built_in\">find_a_solution</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> pick = *resptr;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> u = <span class=\"number\">0</span>; u &lt; n; ++u)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pick[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res[u] |= <span class=\"number\">1LL</span> &lt;&lt; s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;No\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>输出操作符</strong>：</p>\n<ul>\n<li><code>friend output_stream &amp;operator&lt;&lt;(output_stream &amp;out, const matrix_Z2_base &amp;a)</code>：输出矩阵到流。</li>\n</ul>\n</li>\n<li>\n<p><strong>矩阵乘以常数（外部）</strong>：</p>\n<ul>\n<li><code>matrix_Z2_base&lt;SZ&gt; operator*(bool c, matrix_Z2_base&lt;SZ&gt; M)</code>：返回乘以常数后的矩阵。</li>\n</ul>\n</li>\n<li>\n<p><strong>行向量乘以矩阵</strong>：</p>\n<ul>\n<li><code>std::bitset&lt;SZ&gt; operator*(const std::vector&lt;int&gt; &amp;v, const matrix_Z2_base&lt;SZ&gt; &amp;a)</code>：将行向量 <code>v</code> 乘以矩阵 <code>a</code>。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __MATRIX_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __MATRIX_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@brief 二进制矩阵类</span></span><br><span class=\"line\"><span class=\"comment\"> *@note 该类支持矩阵的加减乘，求逆，求行列式，求秩，求行阶梯形式，求解线性方程组等操作</span></span><br><span class=\"line\"><span class=\"comment\"> *@tparam SZ 矩阵列向量的位数，即矩阵的列数，用于初始化bitset的位数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">size_t</span> SZ&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">matrix_Z2_base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    std::vector&lt;std::bitset&lt;SZ&gt;&gt; data;</span><br><span class=\"line\">    std::bitset&lt;SZ&gt; &amp;<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= i &amp;&amp; i &lt; n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">const</span> std::bitset&lt;SZ&gt; &amp;<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> i) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= i &amp;&amp; i &lt; n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base &amp;<span class=\"title\">inplace_slice</span><span class=\"params\">(<span class=\"type\">int</span> il, <span class=\"type\">int</span> ir, <span class=\"type\">int</span> jl, <span class=\"type\">int</span> jr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= il &amp;&amp; il &lt;= ir &amp;&amp; ir &lt;= n);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= jl &amp;&amp; jl &lt;= jr &amp;&amp; jr &lt;= m);</span><br><span class=\"line\">        n = ir - il, m = jr - jl;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (il &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(data[i], data[il + i]);</span><br><span class=\"line\">        data.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;row : data)</span><br><span class=\"line\">            row = row &lt;&lt; SZ - jr &gt;&gt; jl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 返回一个子矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     *@param il 左上角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@param ir 右下角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@param jl 左上角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@param jr 右下角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个子矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base <span class=\"title\">slice</span><span class=\"params\">(<span class=\"type\">int</span> il, <span class=\"type\">int</span> ir, <span class=\"type\">int</span> jl, <span class=\"type\">int</span> jr)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">inplace_slice</span>(il, ir, jl, jr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base &amp;<span class=\"title\">inplace_row_slice</span><span class=\"params\">(<span class=\"type\">int</span> il, <span class=\"type\">int</span> ir)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= il &amp;&amp; il &lt;= ir &amp;&amp; ir &lt;= n);</span><br><span class=\"line\">        n = ir - il;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (il &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(data[i], data[il + i]);</span><br><span class=\"line\">        data.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 返回一个行切片子矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     *@param il 左上角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@param ir 右下角行坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个行切片子矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base <span class=\"title\">row_slice</span><span class=\"params\">(<span class=\"type\">int</span> il, <span class=\"type\">int</span> ir)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">inplace_row_slice</span>(il, ir);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base &amp;<span class=\"title\">inplace_column_slice</span><span class=\"params\">(<span class=\"type\">int</span> jl, <span class=\"type\">int</span> jr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= jl &amp;&amp; jl &lt;= jr &amp;&amp; jr &lt;= m);</span><br><span class=\"line\">        m = jr - jl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;row : data)</span><br><span class=\"line\">            row = row &lt;&lt; SZ - jr &gt;&gt; jl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 返回一个列切片子矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     *@param jl 左上角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@param jr 右下角列坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个列切片子矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base <span class=\"title\">column_slice</span><span class=\"params\">(<span class=\"type\">int</span> jl, <span class=\"type\">int</span> jr)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">inplace_column_slice</span>(jl, jr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相等</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> matrix_Z2_base &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == a.n &amp;&amp; m == a.m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data == a.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵不等</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> matrix_Z2_base &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == a.n &amp;&amp; m == a.m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data != a.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相加</span></span><br><span class=\"line\">    matrix_Z2_base &amp;<span class=\"keyword\">operator</span>+=(<span class=\"type\">const</span> matrix_Z2_base &amp;M)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == M.n &amp;&amp; m == M.m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            data[i] ^= M[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相加</span></span><br><span class=\"line\">    matrix_Z2_base <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> matrix_Z2_base &amp;M) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>) += M;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相减</span></span><br><span class=\"line\">    matrix_Z2_base &amp;<span class=\"keyword\">operator</span>-=(<span class=\"type\">const</span> matrix_Z2_base &amp;M)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == M.n &amp;&amp; m == M.m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            data[i] ^= M[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相减</span></span><br><span class=\"line\">    matrix_Z2_base <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> matrix_Z2_base &amp;M) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>) -= M;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相乘</span></span><br><span class=\"line\">    matrix_Z2_base &amp;<span class=\"keyword\">operator</span>*=(<span class=\"type\">const</span> matrix_Z2_base &amp;a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(m == a.n);</span><br><span class=\"line\">        <span class=\"type\">int</span> l = a.m;</span><br><span class=\"line\">        <span class=\"function\">matrix_Z2_base <span class=\"title\">res</span><span class=\"params\">(n, l)</span></span>;</span><br><span class=\"line\">        std::vector&lt;std::bitset&lt;SZ&gt;&gt; <span class=\"built_in\">temp</span>(l);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; l; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">                temp[i][j] = a[j][i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; l; ++j)</span><br><span class=\"line\">                res[i][j] = (data[i] &amp; temp[j]).<span class=\"built_in\">count</span>() &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵相乘</span></span><br><span class=\"line\">    matrix_Z2_base <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> matrix_Z2_base &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>) *= a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵乘以一个常数</span></span><br><span class=\"line\">    matrix_Z2_base &amp;<span class=\"keyword\">operator</span>*=(<span class=\"type\">bool</span> c)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!c)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : *<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                v.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵乘以一个常数</span></span><br><span class=\"line\">    matrix_Z2_base <span class=\"keyword\">operator</span>*(<span class=\"type\">bool</span> c) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>) *= c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵乘方</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"keyword\">typename</span> enable_if&lt;is_integral&lt;T&gt;::value&gt;::type * = <span class=\"literal\">nullptr</span>&gt;</span><br><span class=\"line\">    matrix_Z2_base &amp;<span class=\"built_in\">inplace_power</span>(T e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == m);</span><br><span class=\"line\">        <span class=\"function\">matrix_Z2_base <span class=\"title\">res</span><span class=\"params\">(n, n, <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; e; *<span class=\"keyword\">this</span> *= *<span class=\"keyword\">this</span>, e &gt;&gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                res *= *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵乘方</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base <span class=\"title\">power</span><span class=\"params\">(T e)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">inplace_power</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵转置</span></span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base &amp;<span class=\"title\">inplace_transpose</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = i + <span class=\"number\">1</span>; j &lt; n; ++j)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(data[i][j], data[j][i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 矩阵转置</span></span><br><span class=\"line\">    <span class=\"function\">matrix_Z2_base <span class=\"title\">transpose</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == m)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">inplace_transpose</span>();</span><br><span class=\"line\">        <span class=\"function\">matrix_Z2_base <span class=\"title\">res</span><span class=\"params\">(m, n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">                res[j][i] = data[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵乘以一个行向量</span></span><br><span class=\"line\"><span class=\"comment\">     *@param v 行向量</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个行向量</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 行向量必须在矩阵左乘，时间复杂度O(n * m / w)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> std::bitset&lt;SZ&gt; &amp;v) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">res</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            res[i] = (data[i] &amp; v).<span class=\"built_in\">count</span>() &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(n * m * up_to / w)</span></span><br><span class=\"line\">    <span class=\"comment\">// Returns &#123;REF matrix, determinant, rank&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵的行阶梯形式</span></span><br><span class=\"line\"><span class=\"comment\">     *@param up_to 行阶梯形式的行数，带参数的情况下只计算前up_to=m-1列向量的行阶梯形式，用于解线性方程组</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个元组，第一个元素是行阶梯形式的矩阵，第二个元素是行列式，第三个元素是秩</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 时间复杂度O(n * m * up_to / w),如果要解多解线性方程组，如果想固定第k个自由变量，需要对传入矩阵的a_&#123;n,k&#125;置1,同时增广向量的对应位a_&#123;n,n&#125;也必须置1，然后调用该函数。</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 实际上等价于新添了一组线性方程，即a_&#123;n,k&#125; * x_k = a_&#123;n,n&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">tuple&lt;matrix_Z2_base &amp;, <span class=\"type\">bool</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">inplace_REF</span><span class=\"params\">(<span class=\"type\">int</span> up_to = <span class=\"number\">-1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;*<span class=\"keyword\">this</span>, <span class=\"literal\">true</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!~up_to)</span><br><span class=\"line\">            up_to = m;</span><br><span class=\"line\">        <span class=\"type\">bool</span> det = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> rank = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; up_to; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pivot = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = rank; i &lt; n; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (data[i][j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pivot = i;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!~pivot)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                det = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rank != pivot)</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(data[rank], data[pivot]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = rank + <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (data[i][j])</span><br><span class=\"line\">                    data[i] ^= data[rank];</span><br><span class=\"line\">            ++rank;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rank == n)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;*<span class=\"keyword\">this</span>, det, rank&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(n * m * up_to / w)</span></span><br><span class=\"line\">    <span class=\"comment\">// Returns &#123;REF matrix, determinant, rank&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵的行阶梯形式</span></span><br><span class=\"line\"><span class=\"comment\">     *@param up_to 行阶梯形式的行数</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个元组，第一个元素是行阶梯形式的矩阵，第二个元素是行列式，第三个元素是秩</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 时间复杂度O(n * m * up_to / w)。解多解线性方程组时，如果想固定第k个自由变量，需要对传入矩阵的a_&#123;n,k&#125;置1,同时增广向量的对应位a_&#123;n,n&#125;也必须置1，然后调用该函数。</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 实际上等价于新添了一组线性方程，即a_&#123;n,k&#125; * x_k = a_&#123;n,n&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">tuple&lt;matrix_Z2_base, <span class=\"type\">bool</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">REF</span><span class=\"params\">(<span class=\"type\">int</span> up_to = <span class=\"number\">-1</span>)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">matrix_Z2_base</span>(*<span class=\"keyword\">this</span>).<span class=\"built_in\">inplace_REF</span>(up_to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(n * m * min(n, m) / w)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵的逆</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个可选的矩阵，表示矩阵的逆</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">optional&lt;matrix_Z2_base&gt; <span class=\"title\">inverse</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == m);</span><br><span class=\"line\">        std::vector&lt;std::bitset&lt;SZ&gt;&gt; <span class=\"built_in\">a</span>(data), <span class=\"built_in\">res</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            res[i].<span class=\"built_in\">set</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pivot = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = j; i &lt; n; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i][j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pivot = i;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!~pivot)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(a[j], a[pivot]), <span class=\"built_in\">swap</span>(res[j], res[pivot]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != j &amp;&amp; a[i][j])</span><br><span class=\"line\">                    a[i] ^= a[j], res[i] ^= res[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(*<span class=\"keyword\">this</span>, res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵的行列式</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个布尔值，表示矩阵的行列式是否为1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">determinant</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n == m);</span><br><span class=\"line\">        <span class=\"function\">matrix_Z2_base <span class=\"title\">a</span><span class=\"params\">(data)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = i + <span class=\"number\">1</span>; j &lt; n; ++j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[j][i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (a[i][i])</span><br><span class=\"line\">                        a[j] ^= a[i];</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        <span class=\"built_in\">swap</span>(a[i], a[j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!a[i][i])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(n^3 / w)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵的秩</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个整数，表示矩阵的秩</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 时间复杂度O(n^3 / w)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rank</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(<span class=\"built_in\">REF</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Regarding the matrix as a system of linear equations by separating first m-1 columns, find a solution of the linear equation.</span></span><br><span class=\"line\">    <span class=\"comment\">// O(n * m^2 / w)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 矩阵所代表的线性方程组的一个解</span></span><br><span class=\"line\"><span class=\"comment\">     *@return 返回一个可选的位集，表示矩阵的一个解</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 时间复杂度O(n * m^2 / w),该矩阵所代表的线性方程组系数矩阵为低m-1位，常数项为第m位，表示n*(m-1)的增广矩阵。</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 时间复杂度O(n * m * up_to / w),如果要解多解线性方程组，如果想固定第k个自由变量，需要对传入矩阵的a_&#123;n,k&#125;置1,同时增广向量的对应位a_&#123;n,n&#125;也必须置1，然后调用该函数。</span></span><br><span class=\"line\"><span class=\"comment\">     *@note 实际上等价于新添了一组线性方程，即a_&#123;n,k&#125; * x_k = a_&#123;n,n&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    optional&lt;std::bitset&lt;SZ&gt;&gt; <span class=\"built_in\">find_a_solution</span>() <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(m &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [ref, _, rank] = <span class=\"built_in\">REF</span>(m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = rank; i &lt; n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ref[i][m - <span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        std::bitset&lt;SZ&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = rank - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pivot = ref[i]._Find_first();</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(pivot &lt; m - <span class=\"number\">1</span>);</span><br><span class=\"line\">            res[pivot] = ref[i][m - <span class=\"number\">1</span>] ^ (ref[i] &amp; res).<span class=\"built_in\">count</span>() &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">output_stream</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> output_stream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(output_stream &amp;out, <span class=\"type\">const</span> matrix_Z2_base &amp;a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        out &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; a.n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; a.m; ++j)</span><br><span class=\"line\">                out &lt;&lt; <span class=\"built_in\">bool</span>(a[i][j]);</span><br><span class=\"line\">            out &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     *@param n 行数</span></span><br><span class=\"line\"><span class=\"comment\">     *@param m 列数</span></span><br><span class=\"line\"><span class=\"comment\">     *@param init_diagonal 对角线是否初始化</span></span><br><span class=\"line\"><span class=\"comment\">     *@param init_off_diagonal 非对角线是否初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"built_in\">matrix_Z2_base</span>(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m, <span class=\"type\">bool</span> init_diagonal = <span class=\"literal\">false</span>, <span class=\"type\">bool</span> init_off_diagonal = <span class=\"literal\">false</span>) : <span class=\"built_in\">n</span>(n), <span class=\"built_in\">m</span>(m), <span class=\"built_in\">data</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(m &lt;= SZ);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">                data[i][j] = i == j ? init_diagonal : init_off_diagonal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 构造函数</span></span><br><span class=\"line\"><span class=\"comment\">     *@param n 行数</span></span><br><span class=\"line\"><span class=\"comment\">     *@param m 列数</span></span><br><span class=\"line\"><span class=\"comment\">     *@param a 矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"built_in\">matrix_Z2_base</span>(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m, <span class=\"type\">const</span> std::vector&lt;std::bitset&lt;SZ&gt;&gt; &amp;a) : <span class=\"built_in\">n</span>(n), <span class=\"built_in\">m</span>(m), <span class=\"built_in\">data</span>(a) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@brief 矩阵乘以一个常数</span></span><br><span class=\"line\"><span class=\"comment\"> *@param c 常数</span></span><br><span class=\"line\"><span class=\"comment\"> *@param M 矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> *@return 返回一个矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">size_t</span> SZ&gt;</span><br><span class=\"line\">matrix_Z2_base&lt;SZ&gt; <span class=\"keyword\">operator</span>*(<span class=\"type\">bool</span> c, matrix_Z2_base&lt;SZ&gt; M)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!c)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : M)</span><br><span class=\"line\">            v.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> M;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Multiply a row std::vector v on the left</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@brief 行向量乘以矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> *@param v 行向量</span></span><br><span class=\"line\"><span class=\"comment\"> *@param a 矩阵</span></span><br><span class=\"line\"><span class=\"comment\"> *@return 返回一个行向量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">size_t</span> SZ&gt;</span><br><span class=\"line\">std::bitset&lt;SZ&gt; <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> std::vector&lt;<span class=\"type\">int</span>&gt; &amp;v, <span class=\"type\">const</span> matrix_Z2_base&lt;SZ&gt; &amp;a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(a.n == (<span class=\"type\">int</span>)v.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    std::bitset&lt;SZ&gt; res;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; a.n; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v[i])</span><br><span class=\"line\">            res ^= a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-多项式相关\">3. 多项式相关</h3>\n<p>关键词：卷积优化。动态规划优化。</p>\n<h4 id=\"3-1-快速傅里叶变换（FTT）-多项式乘法\">3.1 快速傅里叶变换（FTT）/多项式乘法</h4>\n<p>给定一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，和一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 次多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>请求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 的卷积，从低次方项到高次方项给出系数。</p>\n<p>保证输入中的系数大于等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 且小于等于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span>。</p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><msup><mn>10</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\le n, m \\leq {10}^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8484em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">10</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8484em;\"><span style=\"top:-3.0973em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span>​​。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FTT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FTT</span></span></span></span>等下列一系列快速变换的本质都是选择出来<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>w</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2^w=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>个多项式点值，用这组点值向量的运算去替代多项式的运算。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> d32 = <span class=\"type\">double</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> d32 PI = <span class=\"number\">3.14159265358979323846</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fft</span><span class=\"params\">(vector&lt;complex&lt;d32&gt;&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    vector&lt;complex&lt;d32&gt;&gt; <span class=\"built_in\">a0</span>(n / <span class=\"number\">2</span>), <span class=\"built_in\">a1</span>(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a0[i] = a[i * <span class=\"number\">2</span>];</span><br><span class=\"line\">        a1[i] = a[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(a0);</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(a1);</span><br><span class=\"line\">    d32 ang = <span class=\"number\">2</span> * PI / n;</span><br><span class=\"line\">    <span class=\"function\">complex&lt;d32&gt; <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>)</span>, <span class=\"title\">wn</span><span class=\"params\">(cos(ang), sin(ang))</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = a0[i] + w * a1[i];</span><br><span class=\"line\">        a[i + n / <span class=\"number\">2</span>] = a0[i] - w * a1[i];</span><br><span class=\"line\">        w *= wn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">vector&lt;d32&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;d32&gt; a, vector&lt;d32&gt; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; a.<span class=\"built_in\">size</span>() + b.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    a.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    b.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    vector&lt;complex&lt;d32&gt;&gt; <span class=\"built_in\">A</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>()), <span class=\"built_in\">B</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(A);</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        A[i] *= B[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        A[i] = <span class=\"built_in\">conj</span>(A[i]);<span class=\"comment\">//逆变换前求倒数。</span></span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(A);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;d32&gt; <span class=\"title\">res</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        res[i] = <span class=\"built_in\">round</span>(A[i].<span class=\"built_in\">real</span>() / n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;d32&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">b</span><span class=\"params\">(m + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">        cin &gt;&gt; b[i];</span><br><span class=\"line\">    vector&lt;d32&gt; res = <span class=\"built_in\">mul</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + m; i++)</span><br><span class=\"line\">        cout &lt;&lt; (<span class=\"type\">long</span> <span class=\"type\">long</span>)res[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一种写法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> d32 = <span class=\"type\">double</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"type\">const</span> d32 PI = <span class=\"number\">3.14159265358979323846</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fft</span><span class=\"params\">(vector&lt;complex&lt;<span class=\"type\">double</span>&gt;&gt; &amp;f, <span class=\"type\">int</span> op)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = f.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    vector&lt;complex&lt;<span class=\"type\">double</span>&gt;&gt; <span class=\"built_in\">f0</span>(n / <span class=\"number\">2</span>), <span class=\"built_in\">f1</span>(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f0[i] = f[i * <span class=\"number\">2</span>];</span><br><span class=\"line\">        f1[i] = f[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(f0, op);</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(f1, op);</span><br><span class=\"line\">    <span class=\"function\">complex&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">cur</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span>, <span class=\"title\">step</span><span class=\"params\">(cos(<span class=\"number\">2</span> * PI / n), sin(<span class=\"number\">2</span> * PI * op / n))</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n / <span class=\"number\">2</span>; ++k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        complex&lt;<span class=\"type\">double</span>&gt; tmp = cur * f1[k];</span><br><span class=\"line\">        f[k] = f0[k] + tmp;</span><br><span class=\"line\">        f[k + n / <span class=\"number\">2</span>] = f0[k] - tmp;</span><br><span class=\"line\">        cur *= step;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">vector&lt;d32&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;d32&gt; &amp;a, vector&lt;d32&gt; &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; a.<span class=\"built_in\">size</span>() + b.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    a.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    b.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    vector&lt;complex&lt;d32&gt;&gt; <span class=\"built_in\">A</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>()), <span class=\"built_in\">B</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(A, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(B, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        A[i] *= B[i];</span><br><span class=\"line\">    <span class=\"built_in\">fft</span>(A, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;d32&gt; <span class=\"title\">res</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        res[i] = <span class=\"built_in\">round</span>(A[i].<span class=\"built_in\">real</span>() / n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-2-快速数论变换（NTT）-多项式乘法\">3.2 快速数论变换（NTT）/多项式乘法</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; b; b /= <span class=\"number\">2</span>, a = <span class=\"number\">1LL</span> * a * a % P)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b % <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = <span class=\"number\">1LL</span> * res * a % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; rev, roots&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dft</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">int</span>(rev.<span class=\"built_in\">size</span>()) != n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = __builtin_ctz(n) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        rev.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rev[i] &lt; i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (roots.<span class=\"built_in\">size</span>() &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = __builtin_ctz(roots.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        roots.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((<span class=\"number\">1</span> &lt;&lt; k) &lt; n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> e = <span class=\"built_in\">power</span>(<span class=\"number\">31</span>, <span class=\"number\">1</span> &lt;&lt; (__builtin_ctz(P - <span class=\"number\">1</span>) - k - <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span> &lt;&lt; (k - <span class=\"number\">1</span>); i &lt; (<span class=\"number\">1</span> &lt;&lt; k); i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                roots[<span class=\"number\">2</span> * i] = roots[i];</span><br><span class=\"line\">                roots[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>] = <span class=\"number\">1LL</span> * roots[i] * e % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt; n; k *= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i += <span class=\"number\">2</span> * k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> u = a[i + j];</span><br><span class=\"line\">                <span class=\"type\">int</span> v = <span class=\"number\">1LL</span> * a[i + j + k] * roots[k + j] % P;</span><br><span class=\"line\">                a[i + j] = (u + v) % P;</span><br><span class=\"line\">                a[i + j + k] = (u - v + P) % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">idft</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    std::<span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, a.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">dft</span>(a);</span><br><span class=\"line\">    <span class=\"type\">int</span> inv = <span class=\"built_in\">power</span>(n, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = <span class=\"number\">1LL</span> * a[i] * inv % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; a, std::vector&lt;<span class=\"type\">int</span>&gt; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">1</span>, tot = a.<span class=\"built_in\">size</span>() + b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; tot)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tot &lt; <span class=\"number\">128</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">c</span><span class=\"params\">(a.size() + b.size() - <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; b.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c[i + j] = (c[i + j] + <span class=\"number\">1LL</span> * a[i] * b[j]) % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    b.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">dft</span>(a);</span><br><span class=\"line\">    <span class=\"built_in\">dft</span>(b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = <span class=\"number\">1LL</span> * a[i] * b[i] % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">idft</span>(a);</span><br><span class=\"line\">    a.<span class=\"built_in\">resize</span>(tot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-3-快速莫比乌斯变换-快速沃尔什变换（FMT-FWT）\">3.3 快速莫比乌斯变换/快速沃尔什变换（FMT/FWT）</h4>\n<p>给定长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> 两个序列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A,B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>，设</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><munder><mo>∑</mo><mrow><mi>j</mi><mo>⊕</mo><mi>k</mi><mo>=</mo><mi>i</mi></mrow></munder><msub><mi>A</mi><mi>j</mi></msub><mo>×</mo><msub><mi>B</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i=\\sum_{j\\oplus k = i}A_j \\times B_k\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4882em;vertical-align:-1.4382em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">⊕</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4382em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>分别当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊕</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>r</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>n</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>x</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">or, and, xor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span></span></span></span> 时求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>​​。称作或、与、异或卷积。<strong>请区分他们与对应乘法的区别。</strong></p>\n<p>卷积原理：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>M</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FMT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FMT</span></span></span></span>是子集运算，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∘</mo><mi>y</mi><mo>=</mo><mi>p</mi><mi>o</mi><mi>p</mi><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi mathvariant=\"normal\">&amp;</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x\\circ y=popcount(x\\&amp;y)\\%2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">&amp;</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">%2</span></span></span></span>​</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>M</mi><msub><mi>T</mi><mrow><mi>a</mi><mi>n</mi><mi>d</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo stretchy=\"false\">)</mo><mi>i</mi></msub><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mi mathvariant=\"normal\">&amp;</mi><mi>j</mi><mo>=</mo><mi>i</mi></mrow></msub><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">FMT_{and}(A)_i=\\sum_{i\\&amp;j=i}a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">FM</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">an</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\">&amp;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>M</mi><msub><mi>T</mi><mrow><mi>o</mi><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo stretchy=\"false\">)</mo><mi>i</mi></msub><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mi mathvariant=\"normal\">∣</mi><mi>j</mi><mo>=</mo><mi>i</mi></mrow></msub><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">FMT_{or}(A)_i=\\sum_{i|j=i}a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">FM</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">or</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>M</mi><msub><mi>T</mi><mrow><mi>x</mi><mi>o</mi><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo stretchy=\"false\">)</mo><mi>i</mi></msub><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∘</mo><mi>j</mi><mo>=</mo><mn>0</mn></mrow></msub><msub><mi>a</mi><mi>j</mi></msub><mo>−</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∘</mo><mi>j</mi><mo>=</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">FMT_{xor}(A)_i=\\sum_{i\\circ j=0}a_j-\\sum_{i\\circ j=1}a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">FM</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">or</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">∘</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">∘</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>注意，针对异或的快速沃尔什变换是线性变换的，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo>⋅</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">FWT(c\\cdot A+B)=c\\cdot FWT(A)+FWT(B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>​</p>\n<p>对数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">F(x)=x^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>（即只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a[0]=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，其余位置全为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>）的快速<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>后所得序列全为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>。</p>\n<p>对数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">F(x)=x^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7936em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7936em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span>（即只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a[t]=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，其余位置全为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>）的快速<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>后所得序列全为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>或者<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>（显然）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fwt_and</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">                a[j + k] = (<span class=\"number\">1ll</span> * a[j + k] + a[i + j + k]) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ifwt_and</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">                a[j + k] = (<span class=\"number\">1ll</span> * a[j + k] - a[i + j + k] + mod) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fwt_or</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">                a[i + j + k] = (<span class=\"number\">1ll</span> * a[j + k] + a[i + j + k]) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ifwt_or</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">                a[i + j + k] = (<span class=\"number\">1ll</span> * a[i + j + k] - a[j + k] + mod) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fwt_xor</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a)</span> <span class=\"comment\">// 异或</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x = a[j + k], y = a[i + j + k];</span><br><span class=\"line\">                a[j + k] = (<span class=\"number\">1ll</span> * x + y) % mod;</span><br><span class=\"line\">                a[i + j + k] = (<span class=\"number\">1ll</span> * x - y + mod) % mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ifwt_xor</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> inv_2 = <span class=\"number\">499122177</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x = a[j + k], y = a[i + j + k];</span><br><span class=\"line\">                a[j + k] = (<span class=\"number\">1ll</span> * x + y) * inv_2 % mod;</span><br><span class=\"line\">                a[i + j + k] = (<span class=\"number\">1ll</span> * x - y + mod) % mod * inv_2 % mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fwt_not</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; a)</span> <span class=\"comment\">// 同或</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x = a[j + k], y = a[i + j + k];</span><br><span class=\"line\">                a[i + j + k] = (<span class=\"number\">1ll</span> * x + y) % mod;</span><br><span class=\"line\">                a[j + k] = (<span class=\"number\">1ll</span> * x - y + mod) % mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ifwt_not</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> inv_2 = <span class=\"number\">499122177</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i &lt;&lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j += i &lt;&lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x = a[j + k], y = a[i + j + k];</span><br><span class=\"line\">                a[i + j + k] = (<span class=\"number\">1ll</span> * x + y) * inv_2 % mod;</span><br><span class=\"line\">                a[j + k] = (<span class=\"number\">1ll</span> * x - y + mod) % mod * inv_2 % mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">FWT</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; a, std::vector&lt;<span class=\"type\">int</span>&gt; b, vector&lt;<span class=\"type\">int</span>&gt; (*f)(vector&lt;<span class=\"type\">int</span>&gt;), vector&lt;<span class=\"type\">int</span>&gt; (*g)(vector&lt;<span class=\"type\">int</span>&gt;))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>((n &amp; (n - <span class=\"number\">1</span>)) == <span class=\"number\">0</span>); <span class=\"comment\">// n是2的幂</span></span><br><span class=\"line\">    a = <span class=\"built_in\">f</span>(a);</span><br><span class=\"line\">    b = <span class=\"built_in\">f</span>(b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        a[i] = <span class=\"number\">1ll</span> * a[i] * b[i] % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">g</span>(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-4-分治NTT（NTT-CQD）\">3.4 分治NTT（NTT+CQD）</h4>\n<p>给定序列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>g</mi><mrow><mn>1</mn><mo>…</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">g_{1\\dots n - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"minner mtight\">…</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span>，求序列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mn>0</mn><mo>…</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">f_{0\\dots n - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9028em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"minner mtight\">…</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span>。</p>\n<p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>f</mi><mrow><mi>i</mi><mo>−</mo><mi>j</mi></mrow></msub><msub><mi>g</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i=\\sum_{j=1}^if_{i-j}g_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4004em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9646em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>，边界为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f_0=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>。</p>\n<p>答案对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>998244353</mn></mrow><annotation encoding=\"application/x-tex\">998244353</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">998244353</span></span></span></span> 取模。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">2\\leq n\\leq 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>g</mi><mi>i</mi></msub><mo>&lt;</mo><mn>998244353</mn></mrow><annotation encoding=\"application/x-tex\">0\\leq g_i&lt;998244353</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">998244353</span></span></span></span>​。</p>\n<p>利用CDQ分治的思想，先解决左半部分，再解决左半部分对右半部分的贡献。</p>\n<p>设当前计算区间为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>，此时先<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>D</mi><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">CDQ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">Q</span></span></span></span>已经计算出了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[l,\\ldots,mid]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">]</span></span></span></span>，考虑其对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[mid+1,\\ldots,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>的贡献。</p>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>k</mi></msub><mo stretchy=\"false\">(</mo><mi>k</mi><mo>≥</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_k(k\\ge mid+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>而言，前半部分所造成的贡献为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>+</mo><mi>j</mi><mo>=</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>≤</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><msub><mi>f</mi><mi>i</mi></msub><msub><mi>g</mi><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{i+j=k,i\\le mid}f_ig_{k-i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>也就是说，需要将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[l,mid]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">]</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(0,r-l)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span></span></span></span>卷积卷起来，对后半部分进行贡献。</p>\n<p>所以算出前半部分后，将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[l,\\ldots,mid]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">]</span></span></span></span>搞成一个多项式，卷积<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">NTT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NTT</span></span></span></span>​计算贡献，加在后面，然后递归后半部分。</p>\n<p>复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>（本例题也可利用生成函数操纵序列，多项式求逆解决，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> ）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> i64 mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; b; b /= <span class=\"number\">2</span>, a = <span class=\"number\">1LL</span> * a * a % P)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b % <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = <span class=\"number\">1LL</span> * res * a % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; rev, roots&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dft</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//见NTT</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">idft</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//见NTT</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; a, std::vector&lt;<span class=\"type\">int</span>&gt; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//见NTT</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; f, g;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">cdq</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l)</span><br><span class=\"line\">            f[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cdq</span>(l, mid);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(mid - l + <span class=\"number\">1</span>)</span>, <span class=\"title\">b</span><span class=\"params\">(r - l + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = l; i &lt;= mid; i++)</span><br><span class=\"line\">        a[i - l] = f[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= r - l; i++)</span><br><span class=\"line\">        b[i] = g[i];</span><br><span class=\"line\">    a = <span class=\"built_in\">mul</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = mid + <span class=\"number\">1</span>; i &lt;= r; i++)</span><br><span class=\"line\">        f[i] = (f[i] + a[i - l]) % P;</span><br><span class=\"line\">    <span class=\"built_in\">cdq</span>(mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    f.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    g.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; g[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cdq</span>(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; f[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-5-Poly-h-with-NTT-Modint-h\">3.5 Poly.h, with NTT&amp;Modint.h</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**   多项式相关（Poly, with. MInt &amp; MLong）</span></span><br><span class=\"line\"><span class=\"comment\"> *    2023-09-20: https://atcoder.jp/contests/arc163/submissions/45737810</span></span><br><span class=\"line\"><span class=\"comment\"> *    2024-07-28: https://codeforces.com/contest/1991/submission/273204889</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __POLYS_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __POLYS_H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;icpc-model/Modint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Modint;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Z = MInt&lt;P&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\">std::vector&lt;<span class=\"type\">int</span>&gt; rev;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P&gt;</span><br><span class=\"line\">std::vector&lt;MInt&lt;P&gt;&gt; roots&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> MInt&lt;P&gt; <span class=\"title\">findPrimitiveRoot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MInt&lt;P&gt; i = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = __builtin_ctz(P - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">power</span>(i, (P - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) != <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">power</span>(i, (P - <span class=\"number\">1</span>) &gt;&gt; k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P&gt;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> MInt&lt;P&gt; primitiveRoot = <span class=\"built_in\">findPrimitiveRoot</span>&lt;P&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;&gt;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> MInt&lt;<span class=\"number\">998244353</span>&gt; primitiveRoot&lt;<span class=\"number\">998244353</span>&gt;&#123;<span class=\"number\">31</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">void</span> <span class=\"title\">dft</span><span class=\"params\">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">int</span>(rev.<span class=\"built_in\">size</span>()) != n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = __builtin_ctz(n) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        rev.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rev[i] = rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rev[i] &lt; i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (roots&lt;P&gt;.<span class=\"built_in\">size</span>() &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = __builtin_ctz(roots&lt;P&gt;.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        roots&lt;P&gt;.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((<span class=\"number\">1</span> &lt;&lt; k) &lt; n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> e = <span class=\"built_in\">power</span>(primitiveRoot&lt;P&gt;, <span class=\"number\">1</span> &lt;&lt; (__builtin_ctz(P - <span class=\"number\">1</span>) - k - <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span> &lt;&lt; (k - <span class=\"number\">1</span>); i &lt; (<span class=\"number\">1</span> &lt;&lt; k); i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                roots&lt;P&gt;[<span class=\"number\">2</span> * i] = roots&lt;P&gt;[i];</span><br><span class=\"line\">                roots&lt;P&gt;[<span class=\"number\">2</span> * i + <span class=\"number\">1</span>] = roots&lt;P&gt;[i] * e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt; n; k *= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i += <span class=\"number\">2</span> * k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                MInt&lt;P&gt; u = a[i + j];</span><br><span class=\"line\">                MInt&lt;P&gt; v = a[i + j + k] * roots&lt;P&gt;[k + j];</span><br><span class=\"line\">                a[i + j] = u + v;</span><br><span class=\"line\">                a[i + j + k] = u - v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"type\">void</span> <span class=\"title\">idft</span><span class=\"params\">(std::vector&lt;MInt&lt;P&gt;&gt; &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    std::<span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, a.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">dft</span>(a);</span><br><span class=\"line\">    MInt&lt;P&gt; inv = (<span class=\"number\">1</span> - P) / n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] *= inv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P = <span class=\"number\">998244353</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> Poly : <span class=\"keyword\">public</span> std::vector&lt;MInt&lt;P&gt;&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> Value = MInt&lt;P&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Poly</span>() : std::<span class=\"built_in\">vector</span>&lt;Value&gt;() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">constexpr</span> <span class=\"title\">Poly</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> : std::vector&lt;Value&gt;(n) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"keyword\">constexpr</span> <span class=\"title\">Poly</span><span class=\"params\">(<span class=\"type\">const</span> std::vector&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"title\">Poly</span><span class=\"params\">(<span class=\"type\">const</span> std::initializer_list&lt;Value&gt; &amp;a)</span> : std::vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">InputIt</span>, <span class=\"keyword\">class</span> = std::_RequireInputIter&lt;InputIt&gt;&gt;</span><br><span class=\"line\">    <span class=\"keyword\">explicit</span> <span class=\"keyword\">constexpr</span> <span class=\"built_in\">Poly</span>(InputIt first, InputIt last) : std::<span class=\"built_in\">vector</span>&lt;Value&gt;(first, last) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    @brief 通过函数生成多项式</span></span><br><span class=\"line\"><span class=\"comment\">    @param n 生成的多项式的长度</span></span><br><span class=\"line\"><span class=\"comment\">    @param f 生成多项式的函数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> F&gt;</span><br><span class=\"line\">    <span class=\"keyword\">explicit</span> <span class=\"keyword\">constexpr</span> <span class=\"built_in\">Poly</span>(<span class=\"type\">int</span> n, F f) : std::<span class=\"built_in\">vector</span>&lt;Value&gt;(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (*<span class=\"keyword\">this</span>)[i] = <span class=\"built_in\">f</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    @brief 多项式位移</span></span><br><span class=\"line\"><span class=\"comment\">    @param k 位移的距离，正数表示各项乘以 x^k，负数表示各项除以 x^k</span></span><br><span class=\"line\"><span class=\"comment\">    @return 位移后的多项式</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">shift</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> b = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">            b.<span class=\"built_in\">insert</span>(b.<span class=\"built_in\">begin</span>(), k, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>() &lt;= -k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>(<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">begin</span>() + (-k), <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式重塑，将多项式的长度调整为 k</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">trunc</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Poly f = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        f.<span class=\"built_in\">resize</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式加法</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Poly &amp;a, <span class=\"type\">const</span> Poly &amp;b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">Poly <span class=\"title\">res</span><span class=\"params\">(std::max(a.size(), b.size()))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] += a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; b.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] += b[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式减法</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> Poly &amp;a, <span class=\"type\">const</span> Poly &amp;b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">Poly <span class=\"title\">res</span><span class=\"params\">(std::max(a.size(), b.size()))</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] += a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; b.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] -= b[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式取负</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> Poly &amp;a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">std::vector&lt;Value&gt; <span class=\"title\">res</span><span class=\"params\">(a.size())</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">int</span>(res.<span class=\"built_in\">size</span>()); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] = -a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式乘法，NTT快速数论变换</span></span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>*(Poly a, Poly b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span> || b.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.<span class=\"built_in\">size</span>() &lt; b.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::<span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = <span class=\"number\">1</span>, tot = a.<span class=\"built_in\">size</span>() + b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n &lt; tot)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (((P - <span class=\"number\">1</span>) &amp; (n - <span class=\"number\">1</span>)) != <span class=\"number\">0</span> || b.<span class=\"built_in\">size</span>() &lt; <span class=\"number\">128</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\">Poly <span class=\"title\">c</span><span class=\"params\">(a.size() + b.size() - <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; b.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    c[i + j] += a[i] * b[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        b.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">dft</span>(a);</span><br><span class=\"line\">        <span class=\"built_in\">dft</span>(b);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[i] *= b[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">idft</span>(a);</span><br><span class=\"line\">        a.<span class=\"built_in\">resize</span>(tot);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>*(Value a, Poly b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">int</span>(b.<span class=\"built_in\">size</span>()); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b[i] *= a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>*(Poly a, Value b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">int</span>(a.<span class=\"built_in\">size</span>()); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[i] *= b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">friend</span> Poly <span class=\"keyword\">operator</span>/(Poly a, Value b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">int</span>(a.<span class=\"built_in\">size</span>()); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[i] /= b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> Poly &amp;<span class=\"keyword\">operator</span>+=(Poly b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (*<span class=\"keyword\">this</span>) = (*<span class=\"keyword\">this</span>) + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> Poly &amp;<span class=\"keyword\">operator</span>-=(Poly b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (*<span class=\"keyword\">this</span>) = (*<span class=\"keyword\">this</span>) - b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> Poly &amp;<span class=\"keyword\">operator</span>*=(Poly b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (*<span class=\"keyword\">this</span>) = (*<span class=\"keyword\">this</span>) * b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> Poly &amp;<span class=\"keyword\">operator</span>*=(Value b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (*<span class=\"keyword\">this</span>) = (*<span class=\"keyword\">this</span>) * b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> Poly &amp;<span class=\"keyword\">operator</span>/=(Value b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (*<span class=\"keyword\">this</span>) = (*<span class=\"keyword\">this</span>) / b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式求导</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">deriv</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">Poly <span class=\"title\">res</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;size() - <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i] = (i + <span class=\"number\">1</span>) * (*<span class=\"keyword\">this</span>)[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式积分</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">integr</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Poly <span class=\"title\">res</span><span class=\"params\">(<span class=\"keyword\">this</span>-&gt;size() + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res[i + <span class=\"number\">1</span>] = (*<span class=\"keyword\">this</span>)[i] / (i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式求逆，中间m为模多项式长度，即 mod x^m</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">int</span> m)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Poly x&#123;(*<span class=\"keyword\">this</span>)[<span class=\"number\">0</span>].<span class=\"built_in\">inv</span>()&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            x = (x * (Poly&#123;<span class=\"number\">2</span>&#125; - <span class=\"built_in\">trunc</span>(k) * x)).<span class=\"built_in\">trunc</span>(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"built_in\">trunc</span>(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式求lnx</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">log</span><span class=\"params\">(<span class=\"type\">int</span> m)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">deriv</span>() * <span class=\"built_in\">inv</span>(m)).<span class=\"built_in\">integr</span>().<span class=\"built_in\">trunc</span>(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式求e^x</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">exp</span><span class=\"params\">(<span class=\"type\">int</span> m)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Poly x&#123;<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            x = (x * (Poly&#123;<span class=\"number\">1</span>&#125; - x.<span class=\"built_in\">log</span>(k) + <span class=\"built_in\">trunc</span>(k))).<span class=\"built_in\">trunc</span>(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"built_in\">trunc</span>(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式快速幂</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">pow</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span> m)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>() &amp;&amp; (*<span class=\"keyword\">this</span>)[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>() || <span class=\"number\">1LL</span> * i * k &gt;= m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>(m);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Value v = (*<span class=\"keyword\">this</span>)[i];</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> f = <span class=\"built_in\">shift</span>(-i) * v.<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (f.<span class=\"built_in\">log</span>(m - i * k) * k).<span class=\"built_in\">exp</span>(m - i * k).<span class=\"built_in\">shift</span>(i * k) * <span class=\"built_in\">power</span>(v, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式开根</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">sqrt</span><span class=\"params\">(<span class=\"type\">int</span> m)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Poly x&#123;<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            x = (x + (<span class=\"built_in\">trunc</span>(k) * x.<span class=\"built_in\">inv</span>(k)).<span class=\"built_in\">trunc</span>(k)) * CInv&lt;<span class=\"number\">2</span>, P&gt;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"built_in\">trunc</span>(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式转置乘法，计算F(x)*G(1/x)的结果，抹掉负次方项</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> Poly <span class=\"title\">mulT</span><span class=\"params\">(Poly b)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = b.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        std::<span class=\"built_in\">reverse</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((*<span class=\"keyword\">this</span>) * b).<span class=\"built_in\">shift</span>(-(n - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 多项式多点求值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">constexpr</span> std::vector&lt;Value&gt; <span class=\"title\">eval</span><span class=\"params\">(std::vector&lt;Value&gt; x)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> std::<span class=\"built_in\">vector</span>&lt;Value&gt;(x.<span class=\"built_in\">size</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = std::<span class=\"built_in\">max</span>(x.<span class=\"built_in\">size</span>(), <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"function\">std::vector&lt;Poly&gt; <span class=\"title\">q</span><span class=\"params\">(<span class=\"number\">4</span> * n)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">std::vector&lt;Value&gt; <span class=\"title\">ans</span><span class=\"params\">(x.size())</span></span>;</span><br><span class=\"line\">        x.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        std::function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; build = [&amp;](<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r - l == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                q[p] = Poly&#123;<span class=\"number\">1</span>, -x[l]&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> m = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"built_in\">build</span>(<span class=\"number\">2</span> * p, l, m);</span><br><span class=\"line\">                <span class=\"built_in\">build</span>(<span class=\"number\">2</span> * p + <span class=\"number\">1</span>, m, r);</span><br><span class=\"line\">                q[p] = q[<span class=\"number\">2</span> * p] * q[<span class=\"number\">2</span> * p + <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">        std::function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">const</span> Poly &amp;)&gt; work = [&amp;](<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">const</span> Poly &amp;num)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r - l == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (l &lt; <span class=\"built_in\">int</span>(ans.<span class=\"built_in\">size</span>()))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ans[l] = num[<span class=\"number\">0</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> m = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"built_in\">work</span>(<span class=\"number\">2</span> * p, l, m, num.<span class=\"built_in\">mulT</span>(q[<span class=\"number\">2</span> * p + <span class=\"number\">1</span>]).<span class=\"built_in\">trunc</span>(m - l));</span><br><span class=\"line\">                <span class=\"built_in\">work</span>(<span class=\"number\">2</span> * p + <span class=\"number\">1</span>, m, r, num.<span class=\"built_in\">mulT</span>(q[<span class=\"number\">2</span> * p]).<span class=\"built_in\">trunc</span>(r - m));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">work</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, n, <span class=\"built_in\">mulT</span>(q[<span class=\"number\">1</span>].<span class=\"built_in\">inv</span>(n)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P = <span class=\"number\">998244353</span>&gt;</span><br><span class=\"line\">Poly&lt;P&gt; <span class=\"built_in\">berlekampMassey</span>(<span class=\"type\">const</span> Poly&lt;P&gt; &amp;s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Poly&lt;P&gt; c;</span><br><span class=\"line\">    Poly&lt;P&gt; oldC;</span><br><span class=\"line\">    <span class=\"type\">int</span> f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> delta = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= c.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            delta -= c[j - <span class=\"number\">1</span>] * s[i - j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.<span class=\"built_in\">resize</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            f = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> d = oldC;</span><br><span class=\"line\">            d *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">            d.<span class=\"built_in\">insert</span>(d.<span class=\"built_in\">begin</span>(), <span class=\"number\">1</span>);</span><br><span class=\"line\">            MInt&lt;P&gt; df1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= d.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                df1 += d[j - <span class=\"number\">1</span>] * s[f + <span class=\"number\">1</span> - j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(df1 != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> coef = delta / df1;</span><br><span class=\"line\">            d *= coef;</span><br><span class=\"line\">            <span class=\"function\">Poly&lt;P&gt; <span class=\"title\">zeros</span><span class=\"params\">(i - f - <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">            zeros.<span class=\"built_in\">insert</span>(zeros.<span class=\"built_in\">end</span>(), d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            d = zeros;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> temp = c;</span><br><span class=\"line\">            c += d;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - temp.<span class=\"built_in\">size</span>() &gt; f - oldC.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                oldC = temp;</span><br><span class=\"line\">                f = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c.<span class=\"built_in\">insert</span>(c.<span class=\"built_in\">begin</span>(), <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> P = <span class=\"number\">998244353</span>&gt;</span><br><span class=\"line\">MInt&lt;P&gt; <span class=\"built_in\">linearRecurrence</span>(Poly&lt;P&gt; p, Poly&lt;P&gt; q, i64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m = q.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> newq = q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            newq[i] *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> newp = p * newq;</span><br><span class=\"line\">        newq = q * newq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p[i] = newp[i * <span class=\"number\">2</span> + n % <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q[i] = newq[i * <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[<span class=\"number\">0</span>] / q[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Comb</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    std::vector&lt;Z&gt; _fac;</span><br><span class=\"line\">    std::vector&lt;Z&gt; _invfac;</span><br><span class=\"line\">    std::vector&lt;Z&gt; _inv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Comb</span>() : n&#123;<span class=\"number\">0</span>&#125;, _fac&#123;<span class=\"number\">1</span>&#125;, _invfac&#123;<span class=\"number\">1</span>&#125;, _inv&#123;<span class=\"number\">0</span>&#125; &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Comb</span>(<span class=\"type\">int</span> n) : <span class=\"built_in\">Comb</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m = std::<span class=\"built_in\">min</span>(m, Z::<span class=\"built_in\">getMod</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m &lt;= n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        _fac.<span class=\"built_in\">resize</span>(m + <span class=\"number\">1</span>);</span><br><span class=\"line\">        _invfac.<span class=\"built_in\">resize</span>(m + <span class=\"number\">1</span>);</span><br><span class=\"line\">        _inv.<span class=\"built_in\">resize</span>(m + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _fac[i] = _fac[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _invfac[m] = _fac[m].<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = m; i &gt; n; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _invfac[i - <span class=\"number\">1</span>] = _invfac[i] * i;</span><br><span class=\"line\">            _inv[i] = _invfac[i] * _fac[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Z <span class=\"title\">fac</span><span class=\"params\">(<span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m &gt; n)</span><br><span class=\"line\">            <span class=\"built_in\">init</span>(<span class=\"number\">2</span> * m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _fac[m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Z <span class=\"title\">invfac</span><span class=\"params\">(<span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m &gt; n)</span><br><span class=\"line\">            <span class=\"built_in\">init</span>(<span class=\"number\">2</span> * m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _invfac[m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Z <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m &gt; n)</span><br><span class=\"line\">            <span class=\"built_in\">init</span>(<span class=\"number\">2</span> * m);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _inv[m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Z <span class=\"title\">binom</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m || m &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">fac</span>(n) * <span class=\"built_in\">invfac</span>(m) * <span class=\"built_in\">invfac</span>(n - m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; comb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Poly&lt;P&gt; <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Poly</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> f = <span class=\"built_in\">get</span>(n, m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        Z p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[n - i] += comb.<span class=\"built_in\">binom</span>(n, i) * p;</span><br><span class=\"line\">            p *= m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> f = <span class=\"built_in\">get</span>(n, m / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> fm = f;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fm[i] *= comb.<span class=\"built_in\">fac</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Poly <span class=\"title\">pw</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    pw[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pw[i] = pw[i - <span class=\"number\">1</span>] * (m / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pw[i] *= comb.<span class=\"built_in\">invfac</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fm = fm.<span class=\"built_in\">mulT</span>(pw);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fm[i] *= comb.<span class=\"built_in\">invfac</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f + fm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-6-多项式求逆\">3.6 多项式求逆</h4>\n<p>给定一个多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> ，请求出一个多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>， 满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x) * G(x) \\equiv 1 \\pmod{x^n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。系数对 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>998244353</mn></mrow><annotation encoding=\"application/x-tex\">998244353</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">998244353</span></span></span></span> 取模。</p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\leq n \\leq 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，$ 0 \\leq a_i \\leq 10^9$​。</p>\n<p>工作原理：</p>\n<p>我们不妨假设，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">n=2^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>∈</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">k\\in N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>。</p>\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><msub><mi>a</mi><mn>0</mn></msub><mo>×</mo><msub><mi>b</mi><mn>0</mn></msub><mo>≡</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mn>1</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)×B(x)≡a_0×b_0≡1(mod\\  x^1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>,其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">b_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>表示多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>和多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>的常数项。</p>\n<p>若需要求出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">b_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，直接用费马小定理求出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的乘法逆元即可。</p>\n<p>当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>时：</p>\n<p>我们假设在模<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mfrac><mi>n</mi><mn>2</mn></mfrac></msup></mrow><annotation encoding=\"application/x-tex\">x^{\\frac{n}{2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8471em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8471em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span></span></span></span>的意义下<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的逆元<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B^′(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>我们已经求得。</p>\n<p>依据定义，则有</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mfrac><mi>n</mi><mn>2</mn></mfrac></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)B^′(x)≡1(mod\\  x^{\\frac{n}{2}})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0971em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8471em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (1)</p>\n<p>对(1)式进行移项得</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mo>≡</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mfrac><mi>n</mi><mn>2</mn></mfrac></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)B^′(x)−1≡0(mod\\ x^{\\frac{n}{2}})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0971em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8471em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (2)</p>\n<p>然后对(2)式等号两边平方，得</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mrow><mtext>′</mtext><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>2</mn><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo>≡</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A^2(x)B^{′2}(x)−2A(x)B^′(x)+1≡0(mod\\  x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (3)</p>\n<p>将常数项移动到等式右侧，得</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mrow><mtext>′</mtext><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>2</mn><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A^2(x)B^{′2}(x)−2A(x)B^′(x)≡−1(mod\\  x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (4)</p>\n<p>将等式两边去相反数，得</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>A</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mrow><mtext>′</mtext><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2A(x)B^′(x)−A^2(x)B^{′2}(x)≡1(mod\\  x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (5)</p>\n<p>下面考虑回我们需要求的多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，依据定义，其满足</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>1</mn><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)B(x)≡1(mod\\ x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (6)</p>\n<p>将(5)−(6)并移项，得</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>2</mn><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mtext>′</mtext></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msup><mi>A</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mrow><mtext>′</mtext><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)B(x)≡2A(x)B^′(x)−A^2(x)B^{′2}(x)(mod\\  x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (7)</p>\n<p>等式两边约去<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，得</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>2</mn><mi>B</mi><mtext>′</mtext><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><msup><mi>B</mi><mrow><mtext>′</mtext><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)≡2B′(x)−A(x)B^{′2}(x)(mod\\  x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\">′</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (8)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;Z&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : a)</span><br><span class=\"line\">        cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"function\">Poly&lt;P&gt; <span class=\"title\">A</span><span class=\"params\">(a)</span></span>;</span><br><span class=\"line\">    Poly&lt;P&gt; invA = A.<span class=\"built_in\">inv</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : invA)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-7-多项式除法\">3.7 多项式除法</h4>\n<p><em><strong>严格注意：多项式除法不可以拿来做高精度除法！因为多项式除法做了取余数的操作！相当于扣了项的系数！</strong></em></p>\n<p>给定一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 和一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 次多项式  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> ，请求出多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，满足以下条件：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Q(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 次数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n-m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 次数小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>G</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x) = Q(x)  G(x) + R(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>所有的运算在模 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>998244353</mn></mrow><annotation encoding=\"application/x-tex\">998244353</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">998244353</span></span></span></span> 意义下进行。</p>\n<p>如果 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 不足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 次，多余的项系数补 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。</p>\n<p>对于所有数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>&lt;</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">1 \\le m &lt; n \\le 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>，给出的系数均属于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>998244353</mn><mo stretchy=\"false\">)</mo><mo>∩</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">[0, 998244353) \\cap \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">998244353</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>次多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>的系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">vector</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span></span></span></span>进行一次<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">reverse</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">erse</span></span></span></span>后表示的是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">A(\\frac{1}{x})x^N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span>的系数。</p>\n<p>故求多项式除法<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>D</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)=B(x)C(x)+D(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>时，考虑<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>N</mi></msup><mi>A</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mi>M</mi></msup><mi>B</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><msup><mi>x</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow></msup><mi>C</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mi>D</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x^NA(\\frac{1}{x})=x^MB(\\frac{1}{x})x^{N-M}C(\\frac{1}{x})+D(\\frac{1}{x})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>多项式对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{N-M+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>求模，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>消失，有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mi>N</mi><mo>−</mo><mi>M</mi></mrow></msup><mi>C</mi><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo stretchy=\"false\">)</mo><mo>≡</mo><mfrac><mrow><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><msup><mi>B</mi><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">x^{N-M}C(\\frac{1}{x})\\equiv \\frac{A^{&#x27;}(x)}{B^{&#x27;}(x)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.8765em;vertical-align:-0.61em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2665em;\"><span style=\"top:-2.565em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8928em;\"><span style=\"top:-2.8928em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.6068em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.8496em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.5556em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1164em;\"><span style=\"top:-3.1164em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.6854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9596em;\"><span style=\"top:-2.9596em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.5556em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.61em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;Z&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">b</span><span class=\"params\">(k + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : a)</span><br><span class=\"line\">        cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : b)</span><br><span class=\"line\">        cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"function\">Poly&lt;P&gt; <span class=\"title\">A</span><span class=\"params\">(a)</span>, <span class=\"title\">B</span><span class=\"params\">(b)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(A.<span class=\"built_in\">begin</span>(), A.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(B.<span class=\"built_in\">begin</span>(), B.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    A.<span class=\"built_in\">resize</span>(n - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">    B.<span class=\"built_in\">resize</span>(n - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">    Poly&lt;P&gt; C = A * (B.<span class=\"built_in\">inv</span>(n - k + <span class=\"number\">1</span>));</span><br><span class=\"line\">    C.<span class=\"built_in\">resize</span>(n - k + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(C.<span class=\"built_in\">begin</span>(), C.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : C)</span><br><span class=\"line\">        cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    Poly&lt;P&gt; D = <span class=\"built_in\">Poly</span>&lt;P&gt;(a) - <span class=\"built_in\">Poly</span>&lt;P&gt;(b) * C;</span><br><span class=\"line\">    D.<span class=\"built_in\">resize</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : D)</span><br><span class=\"line\">        cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-8-多项式对数\">3.8 多项式对数</h4>\n<p>求个导再积分就行。</p>\n<p>给定多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>使得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><mi>l</mi><mi>n</mi><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)\\equiv lnA(x)\\ (mod\\ x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，保证<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_0=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;Z&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;x : a)</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"function\">Poly&lt;P&gt; <span class=\"title\">p</span><span class=\"params\">(a)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> b = p.<span class=\"built_in\">log</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : b)</span><br><span class=\"line\">        cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-9-多项式自然指数\">3.9 多项式自然指数</h4>\n<p>给定多项式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>使得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><msup><mi>e</mi><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></msup><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">B(x)\\equiv e^{A(x)}\\ (mod\\ x^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">A</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，保证<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_0=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>​</p>\n<p>函数求导，牛顿迭代法。</p>\n<p>先从牛顿迭代讲起。</p>\n<p>已知多项式函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>，求多项式函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>满足 $$G(F(x))\\equiv0 \\pmod{x^n}$$</p>\n<p>考虑用迭代求解，假设我们已经求得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F_0(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>满足 $$G(F_0(x))\\equiv0\\pmod{x^{\\left\\lceil\\frac{n}{2}\\right\\rceil}}$$</p>\n<p>将函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><msub><mi>F</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=F_0(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>处进行泰勒展开 $$G(F(x))=\\sum_{i=1}^{\\infty}\\frac{G^i(F_0(x))}{i!}(F(x)-F_0(x))^i$$ ,其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>G</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">G^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>阶导函数.</p>\n<p>取前两项 $$G(F(x))\\equiv G(F_0(x))+G’(F_0(x))(F(x)-F_0(x))\\pmod{x^n}$$</p>\n<p>考虑到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>0</mn><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><msup><mi>x</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G(F(x))\\equiv 0\\pmod{x^n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> $$F(x)\\equiv F_0(x)-\\frac{G(F_0(x))}{G’(F_0(x))}\\pmod{x^n}$$</p>\n<p>边界条件即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mi>e</mi><msub><mi>a</mi><mn>0</mn></msub></msup></mrow><annotation encoding=\"application/x-tex\">f[0]=e^{a_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，向上迭代即可.</p>\n<p>回到本题，考虑到 $$B(x)\\equiv e^{A(x)}\\pmod{x^n}$$</p>\n<p>即 $$\\ln B(x)-A(x)\\equiv0\\pmod{x^n}$$</p>\n<p>于是令 $$G(B(x))\\equiv\\ln B(x)-A(x)\\pmod{x^n}$$</p>\n<p>由于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>为常数， $$G’(B(x))=B^{-1}(x)$$ ，套牛顿迭代 $$B(x)\\equiv B_0(x)(1-\\ln B_0(x)+A(x))\\pmod{x^n}$$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;Z&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;x : a)</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"function\">Poly&lt;P&gt; <span class=\"title\">p</span><span class=\"params\">(a)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> b = p.<span class=\"built_in\">exp</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : b)</span><br><span class=\"line\">        cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-10-多项式多点求值\">3.10 多项式多点求值</h4>\n<p>原理不会，抄就行。</p>\n<p>给定一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次多项式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> ，现在请你对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">i \\in [1,m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">]</span></span></span></span> ，求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(a_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 。<em><strong>注意是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>次，意味着有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>项</strong></em>。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>64000</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">n,m \\in [1,64000]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">64000</span><span class=\"mclose\">]</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">[</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy=\"false\">]</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>998244352</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a_i,[x^i]f(x) \\in [0,998244352]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">998244352</span><span class=\"mclose\">]</span></span></span></span> 。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy=\"false\">]</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[x^i]f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>​ 次项系数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">Poly&lt;P&gt; <span class=\"title\">f</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : f)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;Z&gt; <span class=\"title\">x</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> fx = f.<span class=\"built_in\">eval</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : fx)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; v &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-11-多项式快速插值-拉格朗日快速插值\">3.11 多项式快速插值/拉格朗日快速插值</h4>\n<p>以下默认<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mo stretchy=\"false\">⌊</mo><mfrac><mrow><mi>l</mi><mo>+</mo><mi>r</mi></mrow><mn>2</mn></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">mid=\\lfloor\\frac{l+r}{2}\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span></p>\n<p>由拉格朗日差值公式<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>y</mi><mi>i</mi></msub><msub><mo>∏</mo><mrow><mi>j</mi><mo mathvariant=\"normal\">≠</mo><mi>i</mi></mrow></msub><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub></mrow><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub></mrow></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large F(x)=\\sum_{i=1}^n y_i\\prod_{j\\neq i}\\frac{x-x_j}{x_i-x_j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.3em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathnormal sizing reset-size6 size7\">x</span><span class=\"mclose sizing reset-size6 size7\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7257em;vertical-align:-0.6505em;\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8017em;\"><span style=\"top:-2.5027em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.3147em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2973em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:-0.0359em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1656em;\"><span style=\"top:-2.5027em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.427em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.896em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1498em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2957em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5071em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2957em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5421em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span></span></span></span>化简得到</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><msub><mi>y</mi><mi>i</mi></msub><mrow><munder><mo>∏</mo><mrow><mi>j</mi><mo mathvariant=\"normal\">≠</mo><mi>i</mi></mrow></munder><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow></mfrac><munder><mo>∏</mo><mrow><mi>j</mi><mo mathvariant=\"normal\">≠</mo><mi>i</mi></mrow></munder><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large F(x)=\\sum_{i=1}^n \\frac{y_i}{\\prod_{j\\neq i}(x_i-x_j)}\\prod_{j\\neq i}(x-x_j)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.3em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathnormal sizing reset-size6 size7\">x</span><span class=\"mclose sizing reset-size6 size7\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.6548em;vertical-align:-1.6903em;\"></span><span class=\"mop op-limits sizing reset-size6 size7\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.637em;\"><span style=\"top:-2.0443em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.45em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2557em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.514em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1656em;\"><span style=\"top:-2.5027em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.427em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.43em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.877em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:-0.0359em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.113em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits sizing reset-size6 size7\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-2.021em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4086em;\"><span></span></span></span></span></span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathnormal sizing reset-size6 size7\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2356em;vertical-align:-0.3356em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size6 size7\">)</span></span></span></span></span></p>\n<p>设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large \\delta(x)=\\prod_{i=1}^n(x-x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.3em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathnormal sizing reset-size6 size7\">x</span><span class=\"mclose sizing reset-size6 size7\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3189em;vertical-align:-0.3568em;\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8017em;\"><span style=\"top:-2.5027em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.3147em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2973em;\"><span></span></span></span></span></span></span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathnormal sizing reset-size6 size7\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.3em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size6 size7\">)</span></span></span></span>，则显然有洛必达法则下，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.2em\"><msub><mo>∏</mo><mrow><mi>j</mi><mo mathvariant=\"normal\">≠</mo><mi>i</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mi>i</mi></msub></mrow></msub><mfrac><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub></mrow></mfrac><mo>=</mo><msup><mi>δ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large \\prod_{j\\neq i}(x_i-x_j)=\\lim_{x\\to x_i}\\frac{\\delta(x)}{x-x_i}=\\delta&#x27;(x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4124em;vertical-align:-0.5124em;\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1656em;\"><span style=\"top:-2.5027em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.427em;\"><span></span></span></span></span></span></span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2356em;vertical-align:-0.3356em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size6 size7\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7059em;vertical-align:-0.5339em;\"></span><span class=\"mop sizing reset-size6 size7\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1498em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2499em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9767em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1498em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4767em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4449em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.3em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7334em;\"><span style=\"top:-3.163em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size6 size7\">)</span></span></span></span></p>\n<p>对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>分治<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">NTT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NTT</span></span></span></span>（类似快速幂那种就行了），求导后多点求值得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta&#x27;(x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>接下来继续正宗分治<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">NTT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NTT</span></span></span></span>即可，设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G_{l,r}(x)=\\prod_{i=l}^r(x-x_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">H_{l,r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>l</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>l</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>r</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_l,y_l),\\cdots,(x_r,y_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>插出来的多项式，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mfrac><msub><mi>y</mi><mi>i</mi></msub><mrow><msup><mi>δ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow></mfrac><msub><mo>∏</mo><mrow><mi>j</mi><mo mathvariant=\"normal\">≠</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>l</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=l}^r \\frac{y_i}{\\delta&#x27;(x_i)}\\prod_{j\\neq i,l\\le j\\le r}(x-x_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3243em;vertical-align:-0.52em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord mtight\"><span class=\"mrel mtight\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，则有</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>G</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub><mo>=</mo><msub><mi>G</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msub><mi>G</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub><mspace linebreak=\"newline\"></mspace><msub><mi>H</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub><mo>=</mo><msub><mi>H</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub><mtext> </mtext><mo>⋅</mo><msub><mi>G</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub><mtext> </mtext><mo>+</mo><mtext> </mtext><msub><mi>H</mi><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi></mrow></msub><mtext> </mtext><mo>⋅</mo><mtext> </mtext><msub><mi>G</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">G_{l,r}=G_{l,mid}\\ \\cdot\\ G_{mid+1,r}\\\\\nH_{l,r}=H_{l,mid}\\ \\cdot G_{mid+1,r}\\ +\\ H_{mid+1,r}\\ \\cdot\\ G_{l,mid}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">mi</span><span class=\"mord mathnormal mtight\">d</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>分治<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>T</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">NTT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">NTT</span></span></span></span>即可。复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog^2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-12-二维卷积\">3.12 二维卷积</h4>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle mathsize=\"1.2em\"><msub><mi>s</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><munder><mo>∑</mo><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>∘</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mi>i</mi><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>y</mi><mn>2</mn></msub><mo>=</mo><mi>j</mi></mrow></munder><msub><mi>a</mi><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub></mrow></msub><mo>×</mo><msub><mi>b</mi><mrow><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>2</mn></msub></mrow></msub></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large s_{i,j}=\\sum_{x_1\\circ x_2=i,y_1*y_2=j}a_{x_1,y_1}\\times b_{x_2,y_2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8522em;vertical-align:-0.3356em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2897em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9224em;vertical-align:-1.6624em;\"></span><span class=\"mop op-limits sizing reset-size6 size7\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-2.0443em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">∘</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:-0.0359em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:-0.0359em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3853em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:-0.0359em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1689em;vertical-align:-0.3356em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:0em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3403em;\"><span style=\"top:-2.457em;margin-left:-0.0359em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>分5步：</p>\n<p>1.对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>的每一行做普通<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>F</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">DFT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FT</span></span></span></span>或对应<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></p>\n<p>2.对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>的每一列做普通<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>F</mi><mi>T</mi><mi mathvariant=\"normal\">/</mi><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">DFT/FWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FT</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></p>\n<p>3.新建矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><msub><mi>b</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">s_{i,j}=a_{i,j}b_{i,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>4.对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>的每一<strong>列</strong>做普通<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mi>D</mi><mi>F</mi><mi>T</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">IDFT/IFWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FT</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>(别忘了做完之后乘上每列长度的逆元)</p>\n<p>5.对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>的每一<strong>行</strong>做普通<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mi>D</mi><mi>F</mi><mi>T</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">IDFT/IFWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">FT</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>(别忘了做完之后乘上每行长度的逆元)</p>\n<p>然后<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>就是要求的结果了。</p>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-13-普通生成函数操作\">3.13 普通生成函数操作</h4>\n<p>普通生成函数操作组合数学计数问题。</p>\n<p>举一个例子：</p>\n<p>一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>的数列，从中取出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>个数，要求异或结果为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>的方案数。</p>\n<p>操纵生成函数：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>x</mi><msub><mi>a</mi><mi>i</mi></msub></msup><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x,y)=\\prod_{i=1}^n(1+x^{a_i}y)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9291em;vertical-align:-1.2777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>这里<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>为异或卷积，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>为正卷积。</p>\n<p>则答案为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msup><mi>x</mi><mi>k</mi></msup><msup><mi>y</mi><mi>s</mi></msup><mo stretchy=\"false\">]</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[x^{k}y^s]F(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>，即对应项系数。一般不会有二维的情况，二维显然无法确定单位根，一般是需要暴力卷积的。本生成函数原题<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>B</mi><mi>C</mi><mn>367</mn><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">ABC367G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">BC</span><span class=\"mord\">367</span><span class=\"mord mathnormal\">G</span></span></span></span>中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>是一个长度不超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span>​的循环卷积，问题只在快速沃尔什变换上。</p>\n<p>考虑对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><msub><mi>a</mi><mi>i</mi></msub></msup><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">1+x^{a_i}y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>进行快速沃尔什点值变换，记变换后的点值序列为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><msub><mi>a</mi><mi>i</mi></msub></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><msubsup><mi>g</mi><msub><mi>a</mi><mi>i</mi></msub><mi>w</mi></msubsup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">FWT(x^{a_i})=\\{g_{a_i}^{w}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0971em;vertical-align:-0.3471em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3471em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>，则由于将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>于此维度视作常数，由于沃尔什变换线性性有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>x</mi><msub><mi>a</mi><mi>i</mi></msub></msup><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo>+</mo><msubsup><mi>g</mi><msub><mi>a</mi><mi>i</mi></msub><mi>w</mi></msubsup><mi>y</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">FWT(1+x^{a_i}y)=\\{1+g_{a_i}^{w}y\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0971em;vertical-align:-0.3471em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3471em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">}</span></span></span></span>​.</p>\n<p>由于沃尔什变换特性，幂次函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>的沃尔什变换序列只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>两种情况，所以沃尔什序列对应位置点值相乘后有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>w</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><msup><mi>y</mi><mn>0</mn></msup><mo stretchy=\"false\">]</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><msub><mi>c</mi><mi>w</mi></msub></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>n</mi><mo>−</mo><msub><mi>c</mi><mi>w</mi></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">FWT(F(x,y))_w=[y^0]\\prod_{i=1}^n(1+y)^{c_w}(1-y)^{n-c_w}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1138em;vertical-align:-0.2997em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0213em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>w</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><msub><mi>a</mi><mi>i</mi></msub></msub><msub><mo stretchy=\"false\">)</mo><mi>w</mi></msub></mrow><annotation encoding=\"application/x-tex\">FWT(x_{a_i})_w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>的数量。关于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>w</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>显然有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>w</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><msub><mi>c</mi><mi>w</mi></msub><mo stretchy=\"false\">)</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mi>h</mi><msub><mi>a</mi><mi>i</mi></msub><mi>w</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">c_w+(n-c_w)\\times(-1)=\\sum_{i=1}^nh_{a_i}^w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1514em;vertical-align:-0.3471em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3471em;\"><span></span></span></span></span></span></span></span></span></span>，等式右边可以由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msup><mi>x</mi><msub><mi>a</mi><mi>i</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^nx^{a_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>快速沃尔什变换得到（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>W</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">FWT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>线性性）</p>\n<p>由于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>​维度很小，暴力卷积卷出来，最后快速沃尔什逆变换后就是结果多项式，直接锁结果就行了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; f, a, b, finalans;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; presum, presum2;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    f.<span class=\"built_in\">assign</span>(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        f[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a = <span class=\"built_in\">fwt_xor</span>(f);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[i] = ((n + a[i]) % mod * (<span class=\"number\">499122177</span>)) % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 暴力预处理循环卷积(1+y)^a 以及(1-y)^a</span></span><br><span class=\"line\">    presum.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m + <span class=\"number\">1</span>)), presum2 = presum;</span><br><span class=\"line\">    presum[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = presum2[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            presum[i][j] = (presum[i][j] + presum[i - <span class=\"number\">1</span>][j]) % mod;                              <span class=\"comment\">//(1+y)</span></span><br><span class=\"line\">            presum[i][(j + <span class=\"number\">1</span>) % m] = (presum[i][(j + <span class=\"number\">1</span>) % m] + presum[i - <span class=\"number\">1</span>][j]) % mod;          <span class=\"comment\">//(1+y)</span></span><br><span class=\"line\">            presum2[i][j] = (presum2[i][j] + presum2[i - <span class=\"number\">1</span>][j]) % mod;                           <span class=\"comment\">//(1-y)</span></span><br><span class=\"line\">            presum2[i][(j + <span class=\"number\">1</span>) % m] = (presum2[i][(j + <span class=\"number\">1</span>) % m] - presum2[i - <span class=\"number\">1</span>][j] + mod) % mod; <span class=\"comment\">//(1-y)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    finalans.<span class=\"built_in\">assign</span>(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>); i++) <span class=\"comment\">// 快速沃尔什变换第i位的值</span></span><br><span class=\"line\">    &#123;                                   <span class=\"comment\">//(1+y)^(a[i])*(1-y)^(n-a[i])</span></span><br><span class=\"line\">                                        <span class=\"comment\">// 求y^0，即y^m项</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            finalans[i] = (finalans[i] + (presum[a[i]][j] * presum2[n - a[i]][(m - j) % m] % mod)) % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b = ifwt_xor(finalans);</span><br><span class=\"line\">    i64 ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = (ans + b[i] * <span class=\"built_in\">power</span>(i, k) % mod) % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他见<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>I</mi><mo>−</mo><mi>W</mi><mi>i</mi><mi>k</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">OI-Wiki</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Wiki</span></span></span></span></p>\n<h4 id=\"3-14-指数生成函数操作\">3.14 指数生成函数操作</h4>\n<p>操纵排列数学计数问题。</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"4-计算几何相关\">4. 计算几何相关</h3>\n<h4 id=\"4-1-平面几何（with-Complex\">4.1 平面几何（with Complex)</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**   平面几何（with. complex）</span></span><br><span class=\"line\"><span class=\"comment\"> *    2023-09-04: https://qoj.ac/submission/164445</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> Point = std::complex&lt;<span class=\"type\">long</span> <span class=\"type\">double</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x real</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y imag</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">dot</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a, <span class=\"type\">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (std::<span class=\"built_in\">conj</span>(a) * b).<span class=\"built_in\">x</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">cross</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a, <span class=\"type\">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (std::<span class=\"built_in\">conj</span>(a) * b).<span class=\"built_in\">y</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">length</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::<span class=\"built_in\">sqrt</span>(<span class=\"built_in\">dot</span>(a, a));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">dist</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a, <span class=\"type\">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">length</span>(a - b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a, <span class=\"type\">const</span> Point &amp;b, <span class=\"type\">const</span> Point &amp;c, <span class=\"type\">const</span> Point &amp;d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> e = a + (b - a) * <span class=\"built_in\">cross</span>(c - a, d - a) / <span class=\"built_in\">cross</span>(b - a, d - c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dist</span>(d, e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-二维凸包-旋转卡壳（凸包直径）\">4.2 二维凸包+旋转卡壳（凸包直径）</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">// #define DEBUG 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> d32 double</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    i64 x, y;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> node &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == a.x ? y &lt; a.y : x &lt; a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> node &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == a.x &amp;&amp; y == a.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> node &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;x - a.x, y - a.y&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i64 <span class=\"keyword\">operator</span>*(<span class=\"type\">const</span> node &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x * a.y - y * a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i64 <span class=\"keyword\">operator</span>^(<span class=\"type\">const</span> node &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x * a.x + y * a.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> node &amp;a) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;x + a.x, y + a.y&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> d32 <span class=\"title\">dis</span><span class=\"params\">(node a, node b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sqrtl</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> i64 <span class=\"title\">dis2</span><span class=\"params\">(node a, node b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> stk[N], tp = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> used[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回的vector0位空出，最后一位为第一个点</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;node&gt; <span class=\"title\">get_convex</span><span class=\"params\">(node p[], <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// stk[] 是整型，存的是下标</span></span><br><span class=\"line\">    <span class=\"comment\">// p[] 存储向量或点</span></span><br><span class=\"line\">    <span class=\"comment\">// h[] 存储凸包上的点</span></span><br><span class=\"line\">    <span class=\"comment\">// used[] 标记是否在凸包上</span></span><br><span class=\"line\">    <span class=\"comment\">// tp 栈顶指针</span></span><br><span class=\"line\">    tp = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\">            <span class=\"comment\">// 标记是否在凸包上</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        used[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::<span class=\"built_in\">sort</span>(p + <span class=\"number\">1</span>, p + <span class=\"number\">1</span> + n); <span class=\"comment\">// 对点进行排序</span></span><br><span class=\"line\">    stk[++tp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 栈内添加第一个元素，且不更新 used，使得 1 在最后封闭凸包时也对单调栈更新</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tp &gt;= <span class=\"number\">2</span> <span class=\"comment\">// 下一行 * 操作符被重载为叉积</span></span><br><span class=\"line\">               &amp;&amp; (p[stk[tp]] - p[stk[tp - <span class=\"number\">1</span>]]) * (p[i] - p[stk[tp]]) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            used[stk[tp--]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        used[i] = <span class=\"number\">1</span>; <span class=\"comment\">// used 表示在凸壳上</span></span><br><span class=\"line\">        stk[++tp] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = tp; <span class=\"comment\">// tmp 表示下凸壳大小</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!used[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ↓求上凸壳时不影响下凸壳</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (tp &gt; tmp &amp;&amp; (p[stk[tp]] - p[stk[tp - <span class=\"number\">1</span>]]) * (p[i] - p[stk[tp]]) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                used[stk[tp--]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            used[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            stk[++tp] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    vector&lt;node&gt; h;</span><br><span class=\"line\">    h.<span class=\"built_in\">push_back</span>(&#123;-INF, -INF&#125;);    <span class=\"comment\">// 从 1 开始存储凸包上的点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tp; ++i) <span class=\"comment\">// 复制到新数组中去</span></span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(p[stk[i]]);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = tp - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> is[N];</span><br><span class=\"line\"><span class=\"comment\">// 求凸包直径，返回直径的平方</span></span><br><span class=\"line\"><span class=\"function\">i64 <span class=\"title\">get_longest</span><span class=\"params\">(vector&lt;node&gt; sta)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;-------------------DEBUG-------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;points in convex hull:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : sta)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; i.x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; i.y &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;-------------------DEBUG-------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    i64 mx = <span class=\"number\">0</span>;               <span class=\"comment\">// 求凸包直径</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top = sta.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; <span class=\"comment\">// 将凸包上的节点编号存在栈里，第一个和最后一个节点编号相同</span></span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx = <span class=\"built_in\">dis2</span>(sta[<span class=\"number\">1</span>], sta[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; top; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((sta[i + <span class=\"number\">1</span>] - sta[i]) * (sta[j] - sta[i + <span class=\"number\">1</span>]) &lt;= (sta[i + <span class=\"number\">1</span>] - sta[i]) * (sta[j % top + <span class=\"number\">1</span>] - sta[i + <span class=\"number\">1</span>]))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;-------------------DEBUG-------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; j=&quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;sta[i]=&quot;</span> &lt;&lt; sta[i].x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; sta[i].y &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;sta[i+1]=&quot;</span> &lt;&lt; sta[i + <span class=\"number\">1</span>].x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; sta[i + <span class=\"number\">1</span>].y &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;sta[j]=&quot;</span> &lt;&lt; sta[j].x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; sta[j].y &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;sta[j%top+1]=&quot;</span> &lt;&lt; sta[j % top + <span class=\"number\">1</span>].x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; sta[j % top + <span class=\"number\">1</span>].y &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;-------------------DEBUG-------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">            j = j % top + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;-------------------DEBUG-------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;mx=&quot;</span> &lt;&lt; mx &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;dis2(sta[&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;],sta[&quot;</span> &lt;&lt; j &lt;&lt; <span class=\"string\">&quot;])=&quot;</span> &lt;&lt; <span class=\"built_in\">dis2</span>(sta[i], sta[j]) &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;dis2(sta[&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;],sta[&quot;</span> &lt;&lt; j &lt;&lt; <span class=\"string\">&quot;])=&quot;</span> &lt;&lt; <span class=\"built_in\">dis2</span>(sta[i + <span class=\"number\">1</span>], sta[j]) &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;-------------------DEBUG-------------------&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, <span class=\"built_in\">max</span>(<span class=\"built_in\">dis2</span>(sta[i], sta[j]), <span class=\"built_in\">dis2</span>(sta[i + <span class=\"number\">1</span>], sta[j])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">node a[N + <span class=\"number\">1</span>], b[N + <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;node&gt; h = <span class=\"built_in\">get_convex</span>(a, n);</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = h.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>;</span><br><span class=\"line\">    d32 C = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        C += <span class=\"built_in\">dis</span>(h[i], h[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; b[i].x &gt;&gt; b[i].y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    h = <span class=\"built_in\">get_convex</span>(b, n);</span><br><span class=\"line\">    d32 D = <span class=\"built_in\">sqrtl</span>(<span class=\"built_in\">get_longest</span>(h));</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; C &lt;&lt; endl;</span></span><br><span class=\"line\">    cout &lt;&lt; fixed &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">10</span>) &lt;&lt; C + <span class=\"number\">2</span> * M_PI * D &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"5-组合数学相关\">5. 组合数学相关</h3>\n<h4 id=\"5-1-组合数杨辉三角-线性递推逆元\">5.1 组合数杨辉三角+线性递推逆元</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> f[<span class=\"number\">1005</span>][<span class=\"number\">1005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)</span><br><span class=\"line\">            f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    cout&lt;&lt;f[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> mod;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">6e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> inv[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; mod;</span><br><span class=\"line\">    inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= a; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class=\"line\">        cout &lt;&lt; inv[i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"5-2-卢卡斯定理-扩展卢卡斯定理\">5.2 卢卡斯定理/扩展卢卡斯定理</h4>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>=</mo><msubsup><mi>C</mi><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><mi>p</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>m</mi><mi>p</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow></msubsup><mo>⋅</mo><msubsup><mi>C</mi><mrow><mi>n</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><mrow><mi>m</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></msubsup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">C_n^{m}\\ mod\\ p=C_{\\lfloor \\frac{n}{p}\\rfloor}^{\\lfloor \\frac{m}{p}\\rfloor}\\cdot C_{n\\ mod\\ p}^{m\\ mod\\ p}\\ mod \\ p\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9614em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.886em;vertical-align:-0.6782em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2078em;\"><span style=\"top:-2.6598em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4829em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span><span class=\"mclose mtight\">⌋</span></span></span></span><span style=\"top:-3.6828em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6915em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4829em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span><span class=\"mclose mtight\">⌋</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6782em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4044em;vertical-align:-0.4374em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.967em;\"><span style=\"top:-2.3987em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.1809em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4374em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">p</span></span></span></span></span></p>\n<p>强制要求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>为质数。复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>+</mo><mi>T</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(p+Tlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Tl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n,<span class=\"type\">long</span> <span class=\"type\">long</span> m,<span class=\"type\">long</span> <span class=\"type\">long</span> mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m&gt;n&amp;&amp;n==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((frac[n]*invq[m]%mod)*invq[n-m])%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//阶乘的值和逆元预处理是线性的递推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">Lucas</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> n, <span class=\"type\">long</span> <span class=\"type\">long</span> m, <span class=\"type\">long</span> <span class=\"type\">long</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">C</span>(n % p, m % p, p) * <span class=\"built_in\">Lucas</span>(n / p, m / p, p)) % p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于扩展卢卡斯定理，不再要求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>必须是质数，原理见<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>I</mi><mo>−</mo><mi>W</mi><mi>i</mi><mi>k</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">OI-Wiki</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Wiki</span></span></span></span>。注意，单次询问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(plogp)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">pl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span>复杂度，基本不可能支持大量次数询问。模板也是仅支持查询一次的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> ExLucas</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\">    ll n, m, p;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">power</span><span class=\"params\">(ll a, ll b, <span class=\"type\">const</span> ll p = LLONG_MAX)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ll ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                ans = ans * a % p;</span><br><span class=\"line\">            a = a * a % p;</span><br><span class=\"line\">            b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">fac</span><span class=\"params\">(<span class=\"type\">const</span> ll n, <span class=\"type\">const</span> ll p, <span class=\"type\">const</span> ll pk)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        ll ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; pk; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % p)</span><br><span class=\"line\">                ans = ans * i % pk;</span><br><span class=\"line\">        ans = <span class=\"built_in\">power</span>(ans, n / pk, pk);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n % pk; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % p)</span><br><span class=\"line\">                ans = ans * i % pk;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans * <span class=\"built_in\">fac</span>(n / p, p, pk) % pk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">exgcd</span><span class=\"params\">(<span class=\"type\">const</span> ll a, <span class=\"type\">const</span> ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll xx, yy, g = <span class=\"built_in\">exgcd</span>(b, a % b, xx, yy);</span><br><span class=\"line\">        x = yy;</span><br><span class=\"line\">        y = xx - a / b * yy;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">const</span> ll a, <span class=\"type\">const</span> ll p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ll x, y;</span><br><span class=\"line\">        <span class=\"built_in\">exgcd</span>(a, p, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x % p + p) % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">const</span> ll n, <span class=\"type\">const</span> ll m, <span class=\"type\">const</span> ll p, <span class=\"type\">const</span> ll pk)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; m)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll f1 = <span class=\"built_in\">fac</span>(n, p, pk), f2 = <span class=\"built_in\">fac</span>(m, p, pk), f3 = <span class=\"built_in\">fac</span>(n - m, p, pk), cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = n; i; i /= p)</span><br><span class=\"line\">            cnt += i / p;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = m; i; i /= p)</span><br><span class=\"line\">            cnt -= i / p;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = n - m; i; i /= p)</span><br><span class=\"line\">            cnt -= i / p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f1 * <span class=\"built_in\">inv</span>(f2, pk) % pk * <span class=\"built_in\">inv</span>(f3, pk) % pk * <span class=\"built_in\">power</span>(p, cnt, pk) % pk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll a[N], c[N];</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">CRT</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ll M = <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)</span><br><span class=\"line\">            M *= c[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt; i++)</span><br><span class=\"line\">            ans = (ans + a[i] * (M / c[i]) % M * <span class=\"built_in\">inv</span>(M / c[i], c[i]) % M) % M;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">exlucas</span><span class=\"params\">(<span class=\"type\">const</span> ll n, <span class=\"type\">const</span> ll m, ll p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ll tmp = <span class=\"built_in\">sqrt</span>(p);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; p &gt; <span class=\"number\">1</span> &amp;&amp; i &lt;= tmp; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ll tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                p /= i, tmp *= i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                a[cnt] = <span class=\"built_in\">C</span>(n, m, i, tmp), c[cnt++] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            a[cnt] = <span class=\"built_in\">C</span>(n, m, p, p), c[cnt++] = p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">CRT</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">exlucas</span>(n, m, p);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zyt::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"5-3-Catlan数与Fibonacci数列\">5.3 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>a</mi><mi>t</mi><mi>l</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">Catlan</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">tl</span><span class=\"mord mathnormal\">an</span></span></span></span>数与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>c</mi><mi>c</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">Fibonacci</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">ib</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">na</span><span class=\"mord mathnormal\">cc</span><span class=\"mord mathnormal\">i</span></span></span></span>数列</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><mn>2</mn><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo separator=\"true\">,</mo><mi>n</mi><mo>≥</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">H_n=\\frac{2n!}{n+1},n\\ge 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2834em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>，维护一种绝对大于等于的关系，比如固定入栈顺序，有多少种出栈顺序（保证栈内元素数量一定大于等于总出栈元素数量）​</p>\n<p>数列皮亚诺周期不超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">6k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">6</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>​为模数。强行解周期可以考虑矩阵原根计算，因为矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">mod</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>最小周期是皮亚诺周期，所以根号开<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mn>6</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt {6k+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1494em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8906em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">6</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.8506em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1494em;\"><span></span></span></span></span></span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> umap unordered_map</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\">string S;</span><br><span class=\"line\">ll MOD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> L = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> ull BASE = <span class=\"number\">13331</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">    ll M[L<span class=\"number\">+1</span>][L<span class=\"number\">+1</span>];</span><br><span class=\"line\">    ll *<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> M[p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(M, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> M);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= L; i++)</span><br><span class=\"line\">            M[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Matrix <span class=\"keyword\">friend</span> <span class=\"keyword\">operator</span>*(Matrix A, Matrix B) &#123;</span><br><span class=\"line\">        Matrix C; C.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= L; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= L; k++)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= L; j++)</span><br><span class=\"line\">                    (C[i][j] += A[i][k] * B[k][j] % MOD) %= MOD;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ull <span class=\"title\">hs</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// hash</span></span><br><span class=\"line\">        ull ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= L; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= L; j++)</span><br><span class=\"line\">                ret = ret * BASE + M[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">Matrix <span class=\"title\">qpow</span><span class=\"params\">(Matrix A, ll b)</span> </span>&#123;</span><br><span class=\"line\">    Matrix Ret; Ret.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            Ret = Ret * A;</span><br><span class=\"line\">        A = A * A;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">BSGS</span><span class=\"params\">(Matrix A, Matrix B)</span> </span>&#123;</span><br><span class=\"line\">    umap&lt;ull, ll&gt; mp;</span><br><span class=\"line\">    ll t = <span class=\"built_in\">sqrt</span>(MOD * <span class=\"number\">6</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    Matrix Cur; Cur.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">        mp[(Cur * B).<span class=\"built_in\">hs</span>()] = i<span class=\"number\">-1</span>;</span><br><span class=\"line\">        Cur = A * Cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Matrix Cur2 = Cur;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= t; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp.<span class=\"built_in\">find</span>(Cur<span class=\"number\">2.</span><span class=\"built_in\">hs</span>()) != mp.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i * t - mp[Cur<span class=\"number\">2.</span><span class=\"built_in\">hs</span>()];</span><br><span class=\"line\">        Cur2 = Cur * Cur2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix A, I;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>; A[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    A[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>; A[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    I[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>; I[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    I[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>; I[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">fib</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(A, n<span class=\"number\">-1</span>)[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123; ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>); cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; S &gt;&gt; MOD;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (MOD == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    ll pi = <span class=\"built_in\">BSGS</span>(A, I);</span><br><span class=\"line\">    ll n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> c : S)</span><br><span class=\"line\">        n = (n * <span class=\"number\">10</span> + (c - <span class=\"string\">&#x27;0&#x27;</span>)) % pi;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">fib</span>(n) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>I</mi><mo>−</mo><mi>W</mi><mi>i</mi><mi>k</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">OI-Wiki</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">Wiki</span></span></span></span>​</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"6-位运算相关技巧杂谈\">6. 位运算相关技巧杂谈</h3>\n<ol>\n<li>异或是特殊的矩阵加法，在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><msubsup><mi>Z</mi><mn>2</mn><mi>n</mi></msubsup><mo separator=\"true\">,</mo><mi>x</mi><mi>o</mi><mi>r</mi><mo separator=\"true\">,</mo><mi>a</mi><mi>n</mi><mi>d</mi><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;Z_2^n,xor,and&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9425em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>下。</li>\n<li>连续从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>的异或和是有规律的，对于模<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>剩余下有余<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，余<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，余<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，余<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>​.</li>\n<li>区间异或和可表示两个前缀异或的异或和。</li>\n<li>带递归形式的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mfrac><mi>x</mi><mn>3</mn></mfrac><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=f(\\frac{x}{3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span>等之类的关注位运算进制表示规律。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>2</mn><mo stretchy=\"false\">(</mo><mi>a</mi><mi mathvariant=\"normal\">&amp;</mi><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⊕</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a+b=2(a\\&amp;b)+(a\\oplus b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">&amp;</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span></li>\n</ol>\n<div style=\"page-break-after: always;\"></div>\n<h1>Part 3. 杂项技巧</h1>\n<h3 id=\"3-1-普通莫队\">3.1 普通莫队</h3>\n<p>假设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n=m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>,那么对于序列上的区间询问问题,如果从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>的答案能够<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>扩展到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l-1,r],[l+1,r],[l,r+1],[l,r-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>（即与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>相邻的区间）的答案,那么可以在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\sqrt n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>​的复杂度内求出所有询问的答案。</p>\n<p>莫队需要相当牛逼的卡常，基本上禁用一切<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>p</mi><mi>S</mi><mi>T</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">mapSTL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">pST</span><span class=\"mord mathnormal\">L</span></span></span></span>，实在必要需要手搓哈希表。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> i64 long long</span></span><br><span class=\"line\"><span class=\"type\">int</span> block; <span class=\"comment\">// 莫队分块大小</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r, id;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> node &amp;x) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l / block != x.l / block)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l &lt; x.l;</span><br><span class=\"line\">        <span class=\"comment\">// 注意下面两行不能写小于（大于）等于，否则会出错（详见下面的小细节）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((l / block) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r &lt; x.r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r &gt; x.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">1e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> mp[inf];</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mp[a[pos]])</span><br><span class=\"line\">        sum--;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        sum++;</span><br><span class=\"line\">    mp[a[pos]] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mp[a[pos]])</span><br><span class=\"line\">        sum--;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        sum++;</span><br><span class=\"line\">    mp[a[pos]] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    block = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        mp[a[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;node&gt; qs;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        qs.<span class=\"built_in\">push_back</span>(&#123;l, r, i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(q)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(qs.<span class=\"built_in\">begin</span>(), qs.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++)<span class=\"comment\">//莫队算法灵魂</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; qs[i].l)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(--l);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; qs[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(++r);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; qs[i].l)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(l++);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; qs[i].r)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(r--);</span><br><span class=\"line\">        ans[qs[i].id] = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-2-带修改莫队\">3.2 带修改莫队</h3>\n<p>普通莫队算法不支持修改，需要带修改的莫队。带修改莫队唯一的区别就是加上了一个时间戳维度，变成了多维莫队。</p>\n<p>然后跳时间戳就行了，改少了就多改，改多了就改回去。</p>\n<p>注意，带修改莫队常数较大，分块<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mfrac><mn>2</mn><mn>3</mn></mfrac></msup></mrow><annotation encoding=\"application/x-tex\">n^{\\frac{2}{3}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.954em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span></span></span></span>，时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mfrac><mn>5</mn><mn>3</mn></mfrac></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{\\frac{5}{3}})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.204em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.954em;\"><span style=\"top:-3.363em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8443em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.384em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.344em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，不要带奇偶排序​</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> i64 mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> block;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">qnode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r, id, t;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> qnode &amp;x) <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l / block != x.l / block)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l &lt; x.l;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r / block != x.r / block)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r &lt; x.r;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t &lt; x.t;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;array&lt;<span class=\"type\">int</span>, 2&gt;&gt; <span class=\"built_in\">upd</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mp</span><span class=\"params\">(<span class=\"number\">1e7</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mp[x]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mp[x] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        sum++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mp[x]--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mp[x] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        sum--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, q;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    block = <span class=\"built_in\">pow</span>(n, <span class=\"number\">2.0</span> / <span class=\"number\">3</span>);</span><br><span class=\"line\">    vector&lt;qnode&gt; query;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>; i &lt; q; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> op;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"string\">&#x27;Q&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            query.<span class=\"built_in\">emplace_back</span>((qnode)&#123;l - <span class=\"number\">1</span>, r - <span class=\"number\">1</span>, cnt, upd.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">            upd.<span class=\"built_in\">push_back</span>(&#123;x - <span class=\"number\">1</span>, y&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(query.size())</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(query.<span class=\"built_in\">begin</span>(), query.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">-1</span>, t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    stack&lt;array&lt;<span class=\"type\">int</span>, 2&gt;&gt; stk;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : query)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &gt; i.l)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a[--l]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &lt; i.r)</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a[++r]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; i.l)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(a[l++]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (r &gt; i.r)</span><br><span class=\"line\">            <span class=\"built_in\">del</span>(a[r--]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &lt; i.t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &lt;= upd[t][<span class=\"number\">0</span>] &amp;&amp; upd[t][<span class=\"number\">0</span>] &lt;= r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(a[upd[t][<span class=\"number\">0</span>]]);</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(upd[t][<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stk.<span class=\"built_in\">push</span>(&#123;upd[t][<span class=\"number\">0</span>], a[upd[t][<span class=\"number\">0</span>]]&#125;);</span><br><span class=\"line\">            a[upd[t][<span class=\"number\">0</span>]] = upd[t][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t &gt; i.t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &lt;= upd[t][<span class=\"number\">0</span>] &amp;&amp; upd[t][<span class=\"number\">0</span>] &lt;= r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(a[upd[t][<span class=\"number\">0</span>]]);</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(stk.<span class=\"built_in\">top</span>()[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a[upd[t][<span class=\"number\">0</span>]] = stk.<span class=\"built_in\">top</span>()[<span class=\"number\">1</span>];</span><br><span class=\"line\">            stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            t--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[i.id] = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : ans)</span><br><span class=\"line\">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; t;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-3-树上莫队\">3.3 树上莫队</h3>\n<p>给定一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>个节点的树，每个节点表示一个整数，问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>的路径上有多少个不同的整数。</p>\n<p>转成欧拉序区间问题。</p>\n<p>具体做法：设每个点的编号<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>首次出现的位置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">first[a]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">rs</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">]</span></span></span></span>，最后出现的位置为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">last[a]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">]</span></span></span></span>，那么对于路径<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x→y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>，设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mo>≤</mo><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">first[x]\\le first[y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">rs</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">rs</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span>（不满足则<code>swap</code>，这个操作的意义在于，如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>在一条链上，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>一定是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的祖先或等于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>），如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>c</mi><mi>a</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">lca(x,y)=x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，则直接把<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>y</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[first[x],first[y]]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">rs</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">rs</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]]</span></span></span></span>的区间扯过来用，反之使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>y</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[last[x],first[y]]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">rs</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]]</span></span></span></span>区间，但这个区间内不包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的最近公共祖先，查询的时候加上即可。</p>\n<div style=\"page-break-after: always;\"></div>\n<h1>Part 4. 图论</h1>\n<h2 id=\"1-最短路\">1. 最短路</h2>\n<p>最短路，图上问题，分层图最短路，最短路形式优化<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>​.</p>\n<p>最短路具有类似<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>的最优子结构性质，判定一条边<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(u,v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span>属于最短路<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>→</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i\\to j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>的一条边，当且仅当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><msub><mi>s</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>u</mi></mrow></msub><mo>+</mo><mi>w</mi><mo>+</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">dis_{i,u}+w+dis_{v,j}=dis_{i,j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">u</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"1-1-Dijkstra\">1.1 Dijkstra</h3>\n<p>稀疏图堆优化，复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O((n+m)logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，只能处理完全正边权图。如果有负边权需要参考费用流中对偶<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Dijkstra</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">ijk</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span></span></span></span>，使用势能函数进行评估。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mlogn</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span><span class=\"comment\">//处理完全正权有向图，可以有环</span></span></span><br><span class=\"line\"><span class=\"comment\">//将结点分为两类，不断松弛，但注意确定一个节点后我们便不再进行更新这个节点了（所以这是dij的短视性），所以无法处理负权，因为负权可能会更新我们已加入的节点。</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">1e5</span><span class=\"number\">+2</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,s,u,v,sum;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;vector&lt;node&gt; &gt;edge;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,inf,<span class=\"built_in\">sizeof</span>(dis));<span class=\"comment\">//初始化</span></span><br><span class=\"line\">    dis[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt;&gt;q;<span class=\"comment\">//小根堆启动</span></span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);<span class=\"comment\">//距离在前，点在后，因为pair默认先排前面的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        P k=q.<span class=\"built_in\">top</span>();q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[k.second])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[k.second]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j:edge[k.second])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[j.to]&gt;dis[k.second]+j.val)&#123;</span><br><span class=\"line\">                dis[j.to]=<span class=\"built_in\">min</span>(dis[j.to],dis[k.second]+j.val);</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;dis[j.to],j.to&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//对所有相邻顶点进行松弛，dis是到源点的距离</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class=\"line\">    edge.<span class=\"built_in\">resize</span>(n<span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;sum;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(&#123;v,sum&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])cout&lt;&lt;(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>)<span class=\"number\">-1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//说明不相连</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;dis[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-2-Floyed\">1.2  Floyed</h3>\n<p>以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的方式暴力预处理所有的最短路，本质是连通矩阵的传递闭包。适合数据范围极小的大量的最短路询问操作。曾经在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>t</mi><mi>c</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">Atcoder</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">er</span></span></span></span>​出现过。</p>\n<p>暴力枚举顺序千万别反了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i!=j)a[i][j]=inf;<span class=\"comment\">//初始化</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> a[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;sum;</span><br><span class=\"line\">        a[u][v]=<span class=\"built_in\">min</span>(a[u][v],sum);<span class=\"comment\">//应付重边</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;k++)<span class=\"comment\">//先枚举每个中间点，来更新i，j，必须先这么做</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">                a[i][j]=<span class=\"built_in\">min</span>(a[i][j],a[i][k]+a[k][j]);<span class=\"comment\">//核心过程：借助每个中间点进行松弛操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[s][i]==inf)cout&lt;&lt;(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>)<span class=\"number\">-1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>;<span class=\"comment\">//说明不相连</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;a[s][i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-SPFA-Bellman-Ford\">1.3  SPFA/Bellman-Ford</h3>\n<p>关于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>P</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">SPFA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">SPF</span><span class=\"mord mathnormal\">A</span></span></span></span>——他死了。</p>\n<p>极端条件下会被菊花图卡成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">nm</span><span class=\"mclose\">)</span></span></span></span>的算法。可以用于普适性的带负边权的图，可以检测负环。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis, inf, <span class=\"built_in\">sizeof</span>(dis)); <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(cnt));   <span class=\"comment\">// 负环计数器</span></span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[s] = <span class=\"number\">1</span>; <span class=\"comment\">// 注意 vis数组代表在不在队列中，在这里点是可以重复入队的</span></span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        vis[u] = <span class=\"number\">0</span>; <span class=\"comment\">// 取出队列中的元素，故vis为0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : edge[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[i.to] &gt; dis[u] + i.val)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cnt[i.to]++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cnt[i.to] &gt; n)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                dis[i.to] = dis[u] + i.val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (vis[i.to] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    vis[i.to] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(i.to);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>判断负环方式：当一个点被松弛了超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>次，意味着其中一定有经过它的负环。</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-4-差分约束\">1.4 差分约束</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>r</mi></msub><mo>−</mo><msub><mi>x</mi><mi>l</mi></msub><mo>≤</mo><mi>c</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>a</mi><mi>d</mi><mi>d</mi><mi>E</mi><mi>d</mi><mi>g</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_r-x_l\\le c\\iff addEdge(l,r,c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">dd</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>r</mi></msub><mo>−</mo><msub><mi>x</mi><mi>l</mi></msub><mo>≥</mo><mi>c</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>a</mi><mi>d</mi><mi>d</mi><mi>E</mi><mi>d</mi><mi>g</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>l</mi><mo separator=\"true\">,</mo><mo>−</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_r-x_l\\ge c\\iff addEdge(r,l,-c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">dd</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>跑最短路求可行解即可，使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>f</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">Spfa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Sp</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span></span></span></span>跑最短路。有负环则无解。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\">vector&lt;vector&lt;array&lt;<span class=\"type\">int</span>, 2&gt;&gt;&gt; con;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    con[x].<span class=\"built_in\">push_back</span>(&#123;y, z&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; dist, vis, tot;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;dist, <span class=\"type\">int</span> st)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dist.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, LONG_LONG_MIN / <span class=\"number\">2</span>);</span><br><span class=\"line\">    vis.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    tot.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    dist[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 判负环，看上面的</span></span><br><span class=\"line\">        <span class=\"type\">int</span> cur = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        vis[cur] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [v, w] : con[cur])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[cur] + w &gt; dist[v])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dist[v] = dist[cur] + w;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">                    tot[v]++;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tot[v] &gt;= n)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    con.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, vector&lt;array&lt;<span class=\"type\">int</span>, <span class=\"number\">2</span>&gt;&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        <span class=\"built_in\">addedge</span>(u, v, w);</span><br><span class=\"line\">        <span class=\"built_in\">addedge</span>(v, u, -w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">addedge</span>(<span class=\"number\">0</span>, i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">spfa</span>(dist, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cout &lt;&lt; dist[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"1-5-分层图最短路\">1.5 分层图最短路</h3>\n<p>对于特定的一些限制条件，可以通过拆分分层图，用不同图层表示不同的状态。</p>\n<h4 id=\"示例1：k次机会不消耗花费通过某条边的最短路\">示例1：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>次机会不消耗花费通过某条边的最短路</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span><span class=\"comment\">//解决问题：我们有k次机会0代价的通过某条路下的最短路</span></span></span><br><span class=\"line\"><span class=\"comment\">//分层图：当我们使用一次机会时，相当于我们进入下一张图</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2</span>*<span class=\"number\">1e5</span><span class=\"number\">+2</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,k,s,t,u,v,sum;</span><br><span class=\"line\">vector&lt;P&gt;edge[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//常规不必再说</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,inf,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">    dis[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt;&gt;q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        P k=q.<span class=\"built_in\">top</span>();q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[k.second])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[k.second]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j:edge[k.second])dis[j.first]=<span class=\"built_in\">min</span>(dis[j.first],dis[k.second]+j.second),q.<span class=\"built_in\">push</span>(&#123;dis[j.first],j.first&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s&gt;&gt;t;</span><br><span class=\"line\">    s++;t++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;sum;</span><br><span class=\"line\">        u++;v++;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(&#123;v,sum&#125;);<span class=\"comment\">//原始层</span></span><br><span class=\"line\">        edge[v].<span class=\"built_in\">push_back</span>(&#123;u,sum&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=k;j++)&#123;<span class=\"comment\">//一共有k+1层，某个点在每个层s，s+n,s+2n,...,s+kn</span></span><br><span class=\"line\">            edge[u+j*n].<span class=\"built_in\">push_back</span>(&#123;v+j*n,sum&#125;);<span class=\"comment\">//每个层都是一样的</span></span><br><span class=\"line\">            edge[v+j*n].<span class=\"built_in\">push_back</span>(&#123;u+j*n,sum&#125;);</span><br><span class=\"line\">            edge[v+(j<span class=\"number\">-1</span>)*n].<span class=\"built_in\">push_back</span>(&#123;u+j*n,<span class=\"number\">0</span>&#125;);<span class=\"comment\">//使用特权：即换层</span></span><br><span class=\"line\">            edge[u+(j<span class=\"number\">-1</span>)*n].<span class=\"built_in\">push_back</span>(&#123;v+j*n,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=k;i++)edge[t+(i<span class=\"number\">-1</span>)*n].<span class=\"built_in\">push_back</span>(&#123;t+i*n,<span class=\"number\">0</span>&#125;);<span class=\"comment\">//把终点从上到小连起来，这样即使没有用完n次机会我们也是从t+nk中读答案</span></span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>();<span class=\"comment\">//正常跑最短路</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,dis[t+k*n]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"示例2：地铁换乘问题\">示例2：地铁换乘问题</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//坐地铁问题：一共m条线路，n个地铁站，有换乘等问题，那就建m+1*n个点，在5e5左右，因为每层图之间的边权不同所以要把站点拆开成m个，再建立虚层连接不同层代表模拟换乘的过程</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">510000</span>,INF = <span class=\"number\">0x3f3f3f3f</span>;  <span class=\"comment\">//注意数据范围</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,s,t;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,val;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;node&gt;edge[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dis[N],vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span> <span class=\"comment\">//加边函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;w&lt;&lt;endl;</span></span><br><span class=\"line\">    edge[u].<span class=\"built_in\">push_back</span>(&#123;v,w&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"type\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,INF,<span class=\"built_in\">sizeof</span>(dis));<span class=\"comment\">//初始化</span></span><br><span class=\"line\">    dis[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt;&gt;q;<span class=\"comment\">//小根堆启动</span></span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);<span class=\"comment\">//距离在前，点在后，因为pair默认先排前面的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        P k=q.<span class=\"built_in\">top</span>();q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[k.second])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[k.second]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j:edge[k.second])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[j.to]&gt;dis[k.second]+j.val)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//if(j.to==8)cout&lt;&lt;k.second&lt;&lt;&quot; &quot;&lt;&lt;dis[k.second]&lt;&lt;endl;</span></span><br><span class=\"line\">                dis[j.to]=<span class=\"built_in\">min</span>(dis[j.to],dis[k.second]+j.val);</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;dis[j.to],j.to&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> price,ad,num,pre,cur;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; price &gt;&gt; ad &gt;&gt; num;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt;num;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>((i<span class=\"number\">-1</span>)*n+pre,(i<span class=\"number\">-1</span>)*n+cur,ad);    </span><br><span class=\"line\">                <span class=\"built_in\">add</span>((i<span class=\"number\">-1</span>)*n+cur,(i<span class=\"number\">-1</span>)*n+pre,ad);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>((i<span class=\"number\">-1</span>)*n+cur,n*m+cur,<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(n*m+cur,(i<span class=\"number\">-1</span>)*n+cur,price); </span><br><span class=\"line\">            pre = cur;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>(n*m+s);    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[n*m+t] == INF)   </span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; dis[n*m+t] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"示例3：一些相类似的移动方式集合到一起（2023澳门区域赛）\">示例3：一些相类似的移动方式集合到一起（2023澳门区域赛）</h4>\n<p>题意概括：</p>\n<p>有一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>个节点的环，编号<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0\\to n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>. 你初始在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>号节点。给一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>的数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>。你每一次可以进行以下操作：</p>\n<ol>\n<li>从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>立即传送：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>→</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mspace></mspace><mspace width=\"0.4444em\"/><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333em\"/><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i\\to (a_i+i)\\pmod{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>修改当前<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>→</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_i\\to a_i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ol>\n<p>给定一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，询问最少经过多少次操作能够从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>到达<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>\n<p>这里要看你怎么看待这个修改。在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>加<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>等价于直接跳到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">a_i+i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>后又花费一次机会向后走。因为你永远不可能走回头路，就是第二次经过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>这个点，所以这个抽象是合理的。而我们又不可能直接在原图上把所有的点全部直接串起来。</p>\n<p>所以开一个分层图，额外新建立一个有向环模拟后跳跃这个操作，然后一次操作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>就从原图的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>向环上的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">i+a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>连边。环上的点向原图的自己连一条代价为0的单向有向边。</p>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"2-网络流\">2. 网络流</h2>\n<p>解决网络流模型问题。</p>\n<h3 id=\"2-1-MaxFlow-h\">2.1 MaxFlow.h</h3>\n<p>Jiangly最新最大流模板，点编号从0开始。费用流同理。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MaxFlow</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_Edge</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to;</span><br><span class=\"line\">        T cap;</span><br><span class=\"line\">        _Edge(<span class=\"type\">int</span> to, T cap) : <span class=\"built_in\">to</span>(to), <span class=\"built_in\">cap</span>(cap) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    std::vector&lt;_Edge&gt; e;</span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; g;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; cur, h;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MaxFlow</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">MaxFlow</span>(<span class=\"type\">int</span> n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        e.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        g.<span class=\"built_in\">assign</span>(n, &#123;&#125;);</span><br><span class=\"line\">        cur.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        h.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        h.<span class=\"built_in\">assign</span>(n, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        std::queue&lt;<span class=\"type\">int</span>&gt; que;</span><br><span class=\"line\">        h[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        que.<span class=\"built_in\">push</span>(s);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> u = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : g[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> [v, c] = e[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c &gt; <span class=\"number\">0</span> &amp;&amp; h[v] == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    h[v] = h[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v == t)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    que.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> t, T f)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u == t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = f;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> &amp;i = cur[u]; i &lt; <span class=\"built_in\">int</span>(g[u].<span class=\"built_in\">size</span>()); ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> j = g[u][i];</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [v, c] = e[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &gt; <span class=\"number\">0</span> &amp;&amp; h[v] == h[u] + <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = <span class=\"built_in\">dfs</span>(v, t, std::<span class=\"built_in\">min</span>(r, c));</span><br><span class=\"line\">                e[j].cap -= a;</span><br><span class=\"line\">                e[j ^ <span class=\"number\">1</span>].cap += a;</span><br><span class=\"line\">                r -= a;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f - r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, T c)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        g[u].<span class=\"built_in\">push_back</span>(e.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        e.<span class=\"built_in\">emplace_back</span>(v, c);</span><br><span class=\"line\">        g[v].<span class=\"built_in\">push_back</span>(e.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        e.<span class=\"built_in\">emplace_back</span>(u, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">flow</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        T ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">bfs</span>(s, t))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cur.<span class=\"built_in\">assign</span>(n, <span class=\"number\">0</span>);</span><br><span class=\"line\">            ans += <span class=\"built_in\">dfs</span>(s, t, std::numeric_limits&lt;T&gt;::<span class=\"built_in\">max</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">minCut</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">std::vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">c</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c[i] = (h[i] != <span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> from;</span><br><span class=\"line\">        <span class=\"type\">int</span> to;</span><br><span class=\"line\">        T cap;</span><br><span class=\"line\">        T flow;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::vector&lt;Edge&gt; a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e.<span class=\"built_in\">size</span>(); i += <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge x;</span><br><span class=\"line\">            x.from = e[i + <span class=\"number\">1</span>].to;</span><br><span class=\"line\">            x.to = e[i].to;</span><br><span class=\"line\">            x.cap = e[i].cap + e[i + <span class=\"number\">1</span>].cap;</span><br><span class=\"line\">            x.flow = e[i + <span class=\"number\">1</span>].cap;</span><br><span class=\"line\">            a.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-2-MinCostFlow-h\">2.2 MinCostFlow.h</h3>\n<p>支持负数费用，不支持负数流量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *@brief 费用流（Jiangly）</span></span><br><span class=\"line\"><span class=\"comment\"> *@note 时间复杂度O(F(n+m)log(n+m)),F(n+m)表示流量和，n表示点数，m表示边数</span></span><br><span class=\"line\"><span class=\"comment\"> *@note 空间复杂度O(n+m)</span></span><br><span class=\"line\"><span class=\"comment\"> *@tparam Cap 流量数据类型</span></span><br><span class=\"line\"><span class=\"comment\"> *@tparam Cost 费用数据类型</span></span><br><span class=\"line\"><span class=\"comment\"> *@note  复杂度估算可同最大流，点数不超过2000，最坏上界估算O(n^3)到O(n^4)，基本不会TLE</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MinCostFlow</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">_Edge</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to;</span><br><span class=\"line\">        T cap;</span><br><span class=\"line\">        T cost;</span><br><span class=\"line\">        _Edge(<span class=\"type\">int</span> to_, T cap_, T cost_) : <span class=\"built_in\">to</span>(to_), <span class=\"built_in\">cap</span>(cap_), <span class=\"built_in\">cost</span>(cost_) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    std::vector&lt;_Edge&gt; e;</span><br><span class=\"line\">    std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; g;</span><br><span class=\"line\">    std::vector&lt;T&gt; h, dis;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; pre;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        dis.<span class=\"built_in\">assign</span>(n, std::numeric_limits&lt;T&gt;::<span class=\"built_in\">max</span>());</span><br><span class=\"line\">        pre.<span class=\"built_in\">assign</span>(n, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        std::priority_queue&lt;std::pair&lt;T, <span class=\"type\">int</span>&gt;, std::vector&lt;std::pair&lt;T, <span class=\"type\">int</span>&gt;&gt;, std::greater&lt;std::pair&lt;T, <span class=\"type\">int</span>&gt;&gt;&gt; que;</span><br><span class=\"line\">        dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        que.<span class=\"built_in\">emplace</span>(<span class=\"number\">0</span>, s);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            T d = que.<span class=\"built_in\">top</span>().first;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = que.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">            que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[u] != d)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : g[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> v = e[i].to;</span><br><span class=\"line\">                T cap = e[i].cap;</span><br><span class=\"line\">                T cost = e[i].cost;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cap &gt; <span class=\"number\">0</span> &amp;&amp; dis[v] &gt; d + h[u] - h[v] + cost)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dis[v] = d + h[u] - h[v] + cost;</span><br><span class=\"line\">                    pre[v] = i;</span><br><span class=\"line\">                    que.<span class=\"built_in\">emplace</span>(dis[v], v);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dis[t] != std::numeric_limits&lt;T&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">MinCostFlow</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">MinCostFlow</span>(<span class=\"type\">int</span> n_)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>(n_);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n_)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        n = n_;</span><br><span class=\"line\">        e.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        g.<span class=\"built_in\">assign</span>(n, &#123;&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addEdge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, T cap, T cost)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        g[u].<span class=\"built_in\">push_back</span>(e.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        e.<span class=\"built_in\">emplace_back</span>(v, cap, cost);</span><br><span class=\"line\">        g[v].<span class=\"built_in\">push_back</span>(e.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        e.<span class=\"built_in\">emplace_back</span>(u, <span class=\"number\">0</span>, -cost);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">std::pair&lt;T, T&gt; <span class=\"title\">flow</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        T flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">        T cost = <span class=\"number\">0</span>;</span><br><span class=\"line\">        h.<span class=\"built_in\">assign</span>(n, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">dijkstra</span>(s, t))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                h[i] += dis[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            T aug = std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = t; i != s; i = e[pre[i] ^ <span class=\"number\">1</span>].to)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                aug = std::<span class=\"built_in\">min</span>(aug, e[pre[i]].cap);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = t; i != s; i = e[pre[i] ^ <span class=\"number\">1</span>].to)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                e[pre[i]].cap -= aug;</span><br><span class=\"line\">                e[pre[i] ^ <span class=\"number\">1</span>].cap += aug;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            flow += aug;</span><br><span class=\"line\">            cost += aug * h[t];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> std::<span class=\"built_in\">make_pair</span>(flow, cost);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> from;</span><br><span class=\"line\">        <span class=\"type\">int</span> to;</span><br><span class=\"line\">        T cap;</span><br><span class=\"line\">        T cost;</span><br><span class=\"line\">        T flow;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;Edge&gt; <span class=\"title\">edges</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        std::vector&lt;Edge&gt; a;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e.<span class=\"built_in\">size</span>(); i += <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge x;</span><br><span class=\"line\">            x.from = e[i + <span class=\"number\">1</span>].to;</span><br><span class=\"line\">            x.to = e[i].to;</span><br><span class=\"line\">            x.cap = e[i].cap + e[i + <span class=\"number\">1</span>].cap;</span><br><span class=\"line\">            x.cost = e[i].cost;</span><br><span class=\"line\">            x.flow = e[i + <span class=\"number\">1</span>].cap;</span><br><span class=\"line\">            a.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-3-Dinic-朱\">2.3 Dinic (朱)</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 理论上界为n2m，处理1e4-1e5的数据</span></span><br><span class=\"line\"><span class=\"comment\">// 三个优化：多路增广，当前弧，炸点</span></span><br><span class=\"line\"><span class=\"comment\">// 少做几次bfs，一次dfs进行多次增广</span></span><br><span class=\"line\"><span class=\"comment\">// 建图时不用考虑点的变化，过程中没有用到点数这个信息，只需把边建出来就能跑</span></span><br><span class=\"line\"><span class=\"comment\">// 多测的时候记得清空e[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 检查这条边是不是满流：是的话这条边的len变成0（没有剩余流量）</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">10010</span>, M = <span class=\"number\">200010</span>, INF = <span class=\"number\">1e15</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ed;</span><br><span class=\"line\">    <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;edge&gt; e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, S, T;</span><br><span class=\"line\"><span class=\"type\">int</span> dep[N], cur[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> <span class=\"comment\">// bfs分层</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> dep);</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(S);</span><br><span class=\"line\">    dep[S] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e[t].<span class=\"built_in\">size</span>(); i = i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ed = e[t][i].ed;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dep[ed] == <span class=\"number\">-1</span> &amp;&amp; e[t][i].len) <span class=\"comment\">// 如果这个点没有被定义层次，且还有剩余流量</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dep[ed] = dep[t] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(ed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cur, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(cur));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[T] == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> st, <span class=\"type\">int</span> limit)</span> <span class=\"comment\">// limit最大可增加的流量</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (st == T)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"type\">int</span> nowflow = <span class=\"number\">0</span>;                                   <span class=\"comment\">// 定义当前节点的流量,多路增广优化，找满当前能找的limit流量上界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cur[st]; i &lt; e[st].<span class=\"built_in\">size</span>(); i = i + <span class=\"number\">1</span>) <span class=\"comment\">// 当前弧优化，如果一个点有很多出边，有些出边可能无法再推流了，我们就记录第一条可以推流的边</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cur[st] = i; <span class=\"comment\">// 当前弧优化</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ed = e[st][i].ed;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[ed] == dep[st] + <span class=\"number\">1</span> &amp;&amp; e[st][i].len) <span class=\"comment\">// 这条边能推且，深度为更深一层（为了找最短的增广路）</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = <span class=\"built_in\">dfs</span>(ed, <span class=\"built_in\">min</span>(e[st][i].len, limit - nowflow)); <span class=\"comment\">// 是为了限制后面点的流量不能大于limit-nowflow</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t)                                               <span class=\"comment\">// 走下去能推流</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                e[st][i].len -= t;           <span class=\"comment\">// 减去相应的</span></span><br><span class=\"line\">                e[ed][e[st][i].id].len += t; <span class=\"comment\">// 反边+相应的</span></span><br><span class=\"line\">                nowflow += t;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nowflow == limit)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nowflow;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nowflow)</span><br><span class=\"line\">        dep[st] = <span class=\"number\">-1</span>; <span class=\"comment\">// 如果这个点不能延申，那就删掉这个点（炸点优化）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nowflow;   <span class=\"comment\">// 会返回本次bfs（）后所有增广路能加的最多流量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">        r += <span class=\"built_in\">dfs</span>(S, INF);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;w&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sti = e[u].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> edi = e[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    e[u].<span class=\"built_in\">push_back</span>((edge)&#123;v, w, edi&#125;); <span class=\"comment\">// 建边</span></span><br><span class=\"line\">    e[v].<span class=\"built_in\">push_back</span>((edge)&#123;u, <span class=\"number\">0</span>, sti&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(u, v, w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">dinic</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-4-ISAP-朱\">2.4 ISAP (朱)</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 理论上界为n2m，处理1e4-1e5的数据</span></span><br><span class=\"line\"><span class=\"comment\">// 只做一次bfs</span></span><br><span class=\"line\"><span class=\"comment\">// 建图时注意n的改变，运行过程中有跟点数相关</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">10010</span>, INF = <span class=\"number\">1e15</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ed;</span><br><span class=\"line\">    <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;edge&gt; e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, S, T;</span><br><span class=\"line\"><span class=\"type\">int</span> dep[N], gap[N], cur[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> <span class=\"comment\">// bfs分层</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> dep);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(gap, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(gap));</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(T);</span><br><span class=\"line\">    dep[T] = <span class=\"number\">0</span>; <span class=\"comment\">// T为层数为0的点</span></span><br><span class=\"line\">    gap[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// 层数为0的点有一个</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e[t].<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ed = e[t][i].ed;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dep[ed] == <span class=\"number\">-1</span>) <span class=\"comment\">// 如果这个点没有被定义层次就考虑（在这里不在乎这条边的流量是否为0！只负责分层)</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dep[ed] = dep[t] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                gap[dep[ed]]++;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(ed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> st, <span class=\"type\">int</span> limit)</span> <span class=\"comment\">// limit最大可增加的流量</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (st == T)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"type\">int</span> nowflow = <span class=\"number\">0</span>;                                   <span class=\"comment\">// 定义当前节点的流量,多路增广优化，找满当前能找的limit流量上界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cur[st]; i &lt; e[st].<span class=\"built_in\">size</span>(); i = i + <span class=\"number\">1</span>) <span class=\"comment\">// 当前弧优化，如果一个点有很多出边，有些出边可能无法再推流了，我们就记录第一条可以推流的边</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cur[st] = i; <span class=\"comment\">// 当前弧优化</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ed = e[st][i].ed;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[ed] + <span class=\"number\">1</span> == dep[st] &amp;&amp; e[st][i].len) <span class=\"comment\">// 这条边能推且，深度为更深一层（为了找最短的增广路）</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = <span class=\"built_in\">dfs</span>(ed, <span class=\"built_in\">min</span>(e[st][i].len, limit - nowflow)); <span class=\"comment\">// 是为了限制后面点的流量不能大于limit-nowflow</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t)                                               <span class=\"comment\">// 走下去能推流</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                e[st][i].len -= t;           <span class=\"comment\">// 减去相应的</span></span><br><span class=\"line\">                e[ed][e[st][i].id].len += t; <span class=\"comment\">// 反边+相应的</span></span><br><span class=\"line\">                nowflow += t;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nowflow == limit)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nowflow;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 到这说明这个点还有剩余流量，层数就+1</span></span><br><span class=\"line\">    --gap[dep[st]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (gap[dep[st]] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        dep[S] = n + <span class=\"number\">1</span>; <span class=\"comment\">// 出现断层，无法到达t了，直接结束</span></span><br><span class=\"line\">    dep[st]++;          <span class=\"comment\">// 层++</span></span><br><span class=\"line\">    gap[dep[st]]++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nowflow; <span class=\"comment\">// 会返回本次bfs（）后所有增广路能加的最多流量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ISAP</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (dep[S] &lt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cur, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(cur)); <span class=\"comment\">// 每一次开始dfs前都要注意cur数组的清空！与dinic不同，因为这里只需要一次bfs</span></span><br><span class=\"line\">        flow += <span class=\"built_in\">dfs</span>(S, INF);         <span class=\"comment\">// 初始流量为无穷大</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;w&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sti = e[u].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> edi = e[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    e[u].<span class=\"built_in\">push_back</span>((edge)&#123;v, w, edi&#125;); <span class=\"comment\">// 建边</span></span><br><span class=\"line\">    e[v].<span class=\"built_in\">push_back</span>((edge)&#123;u, <span class=\"number\">0</span>, sti&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        <span class=\"type\">int</span> sti = e[u].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> edi = e[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        e[u].<span class=\"built_in\">push_back</span>((edge)&#123;v, w, edi&#125;); <span class=\"comment\">// 建边</span></span><br><span class=\"line\">        e[v].<span class=\"built_in\">push_back</span>((edge)&#123;u, <span class=\"number\">0</span>, sti&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">ISAP</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-5-预流推进（AmiyaCast）\">2.5 预流推进（AmiyaCast）</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> pii make_pair</span></span><br><span class=\"line\"><span class=\"type\">const</span> ll inf = <span class=\"number\">1145141919810</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, s, t;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Dinic</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tp, s, t, n, m;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        ll cap;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    vector&lt;ll&gt; dis;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; cur, que;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; v;</span><br><span class=\"line\">    vector&lt;Edge&gt; e, _e;</span><br><span class=\"line\">    <span class=\"built_in\">Dinic</span>(<span class=\"type\">int</span> _n, <span class=\"type\">int</span> _s, <span class=\"type\">int</span> <span class=\"type\">_t</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n = _n, s = _s, t = <span class=\"type\">_t</span>;</span><br><span class=\"line\">        dis.<span class=\"built_in\">resize</span>(_n + <span class=\"number\">1</span>), cur.<span class=\"built_in\">resize</span>(_n + <span class=\"number\">1</span>), que.<span class=\"built_in\">resize</span>(_n + <span class=\"number\">1</span>),</span><br><span class=\"line\">            v.<span class=\"built_in\">resize</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, ll w)</span> </span>&#123; _e.<span class=\"built_in\">push_back</span>(&#123;x, y, w&#125;); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> flw)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        e.<span class=\"built_in\">push_back</span>(Edge&#123;x, y, flw&#125;), e.<span class=\"built_in\">push_back</span>(Edge&#123;y, x, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        v[x].<span class=\"built_in\">push_back</span>(e.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        dis.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, inf);</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        que[<span class=\"number\">1</span>] = s, dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> p = que[l++], to;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : v[p])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e[i].cap &amp;&amp; dis[to = e[i].v] &gt;= inf)</span><br><span class=\"line\">                    dis[to] = dis[p] + <span class=\"number\">1</span>, que[++r] = to;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dis[t] &lt; inf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> p, ll a)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == t || !a)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">        <span class=\"type\">int</span> sf = <span class=\"number\">0</span>, flw;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> &amp;i = cur[p], to; i &lt; (<span class=\"type\">int</span>)v[p].<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge &amp;E = e[v[p][i]];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[to = E.v] == dis[p] + <span class=\"number\">1</span> &amp;&amp; (flw = <span class=\"built_in\">dfs</span>(to, <span class=\"built_in\">min</span>(a,</span><br><span class=\"line\">                                                                  E.cap))))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                E.cap -= flw;</span><br><span class=\"line\">                e[v[p][i] ^ <span class=\"number\">1</span>].cap += flw;</span><br><span class=\"line\">                a -= flw;</span><br><span class=\"line\">                sf += flw;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!a)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">dinic</span><span class=\"params\">(<span class=\"type\">int</span> tp = <span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;tp = tp;</span><br><span class=\"line\">        <span class=\"type\">int</span> flw = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">            cur.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>), flw += <span class=\"built_in\">dfs</span>(s, inf);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flw;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">get_ans</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        m = _e.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(_e.<span class=\"built_in\">begin</span>(), _e.<span class=\"built_in\">end</span>(), [](Edge a, Edge b)</span><br><span class=\"line\">             &#123; <span class=\"keyword\">return</span> a.cap &gt;</span><br><span class=\"line\">                      b.cap; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> rp = <span class=\"number\">0</span>; rp &lt;= <span class=\"number\">1</span>; ++rp)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>, i = <span class=\"number\">0</span>; p; p /=</span><br><span class=\"line\">                                            <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; i &lt; m &amp;&amp; _e[i].cap &gt;= p; ++i)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rp)</span><br><span class=\"line\">                        v[_e[i].v].<span class=\"built_in\">push_back</span>(i * <span class=\"number\">2</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        <span class=\"built_in\">Add</span>(_e[i].u, _e[i].v, _e[i].cap);</span><br><span class=\"line\">                ans += <span class=\"built_in\">dinic</span>(rp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"function\">Dinic <span class=\"title\">d</span><span class=\"params\">(n, s, t)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        ll w;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class=\"line\">        d.<span class=\"built_in\">add</span>(x, y, w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; d.<span class=\"built_in\">get_ans</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-6-最小费用最大流（朱）\">2.6 最小费用最大流（朱）</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//理论上界为n2m，处理1e4-1e5的数据</span></span><br><span class=\"line\"><span class=\"comment\">//每条边流过去多了一个成本</span></span><br><span class=\"line\"><span class=\"comment\">//bfs换成了spfa跑最短路即可,0号点得空出来</span></span><br><span class=\"line\"><span class=\"comment\">//最大费用最大流：建边时把c反着建，照样跑板子，最后答案也反过来就行，类似最长路</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">10010</span>, M = <span class=\"number\">200010</span>, INF = <span class=\"number\">1e15</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ed;</span><br><span class=\"line\">    <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"type\">int</span> cost;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;edge&gt; e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, S, T;</span><br><span class=\"line\"><span class=\"type\">int</span> dep[N], dis[N], vis[N],ans ,res;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0x3f</span>,<span class=\"built_in\">sizeof</span>(dis));<span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">    dis[T]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[T]=<span class=\"number\">1</span>;<span class=\"comment\">//vis数组代表在不在队列中</span></span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt;q;q.<span class=\"built_in\">push_back</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u=q.<span class=\"built_in\">front</span>();q.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        vis[u]=<span class=\"number\">0</span>;<span class=\"comment\">//取出队列中的元素，故vis为0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e[u].<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ed = e[u][i].ed;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e[ed][e[u][i].id].len &amp;&amp; dis[ed]&gt;dis[u]-e[u][i].cost)&#123;<span class=\"comment\">//取反向边是因为我们要保证正流，但是SPFA是倒着跑的，所以说我们要求e[u][i]的对应反向边是正的，</span></span><br><span class=\"line\">                dis[ed]=dis[u]-e[u][i].cost;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[ed])&#123;</span><br><span class=\"line\">                    vis[ed]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (q.<span class=\"built_in\">empty</span>() || dis[ed]&gt;=dis[q.<span class=\"built_in\">front</span>()])q.<span class=\"built_in\">push_back</span>(ed);<span class=\"comment\">//一个lis优化spfa的</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> q.<span class=\"built_in\">push_front</span>(ed);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[S]&lt;dis[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> st, <span class=\"type\">int</span> limit)</span></span>&#123;</span><br><span class=\"line\">    vis[st]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (st == T||limit==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"type\">int</span> nowflow=<span class=\"number\">0</span>;<span class=\"comment\">//定义当前节点的流量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e[st].<span class=\"built_in\">size</span>(); i = i + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ed = e[st][i].ed;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dis[ed] == dis[st] - e[st][i].cost &amp;&amp; e[st][i].len&amp;&amp;!vis[ed])<span class=\"comment\">//这条边能推且，深度为更深一层，且没走过</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = <span class=\"built_in\">dfs</span>(ed, <span class=\"built_in\">min</span>(e[st][i].len, limit-nowflow));<span class=\"comment\">//是为了限制后面点的流量不能大于limit-nowflow</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t)<span class=\"comment\">//走下去能推流</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res+=t*e[st][i].cost;<span class=\"comment\">//统计答案，经过这一条边</span></span><br><span class=\"line\">                e[st][i].len -= t;</span><br><span class=\"line\">                e[ed][e[st][i].id].len += t;</span><br><span class=\"line\">                nowflow+=t;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nowflow==limit)<span class=\"keyword\">return</span> nowflow;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!nowflow)dep[st]=<span class=\"number\">-1</span>;<span class=\"comment\">//如果这个点不能延申，那就删掉这个点（炸点优化）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nowflow;<span class=\"comment\">//会返回本次bfs（）后所有增广路能加的最多流量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">spfa</span>())&#123;</span><br><span class=\"line\">        vis[T]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(vis[T])&#123;<span class=\"comment\">//如果dfs完已经走不到t了那说明这一轮结束</span></span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\">            ans+=<span class=\"built_in\">dfs</span>(S,INF);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w,<span class=\"type\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;w&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sti = e[u].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> edi = e[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    e[u].<span class=\"built_in\">push_back</span>((edge)&#123;v, w, edi, c&#125;);<span class=\"comment\">//建边</span></span><br><span class=\"line\">    e[v].<span class=\"built_in\">push_back</span>((edge)&#123;u, <span class=\"number\">0</span>, sti, -c&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;S&gt;&gt;T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u,v,w,c;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"type\">int</span> sti = e[u].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> edi = e[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        e[u].<span class=\"built_in\">push_back</span>((edge)&#123;v, w, edi, c&#125;);<span class=\"comment\">//建边</span></span><br><span class=\"line\">        e[v].<span class=\"built_in\">push_back</span>((edge)&#123;u, <span class=\"number\">0</span>, sti, -c&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dinic</span>();</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-7-网络流结论\">2.7 网络流结论</h3>\n<h4 id=\"2-7-1-二分图博弈\">2.7.1 二分图博弈</h4>\n<p>二分图博弈，给出一张二分图和起始点 H，A 和 B轮流操作，每次只能选与上个被选择的点（第一回合则是点 H）相邻的点，且不能选择已选择过的点，无法选点的人输掉。</p>\n<p>具体来说，就是所有的状态可以被分为两类，每次操作必定是从一个状态到另一类状态，不能操作的人输</p>\n<p>做法，如果二分图的所有最大匹配都经过H，那么先手必胜，否则必败</p>\n<p>建图后判断H是不是必须点即可（跑两次，第一次不带H点，跑一次，再带上H点，看看能不能有新增流量，若有则是必须点，先手必胜，否则必败）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;m&gt;&gt;n&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)e[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(sp,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(sp));</span><br><span class=\"line\">    <span class=\"type\">int</span> M=a[m];S=M<span class=\"number\">+1</span>;T=M<span class=\"number\">+2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x ;cin&gt;&gt;x; sp[x] = <span class=\"number\">1</span>;<span class=\"comment\">//禁止访问的状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++) &#123;<span class=\"comment\">//每个状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sp[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(odd[i] == odd[s]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">calc</span>(i);<span class=\"comment\">//i的后继状态连边</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != s) <span class=\"built_in\">add</span>(S, i, <span class=\"number\">1</span>);<span class=\"comment\">//起点先不连</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(i, T, <span class=\"number\">1</span>);   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dinic</span>();<span class=\"comment\">//如何判断这个点是不是最大匹配的必须点？先不加这个点跑一次，再加上跑一次，看能不能有新流即可</span></span><br><span class=\"line\">    <span class=\"built_in\">add</span>(S, s, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dinic</span>())</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;Alice&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;Bob&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-2-最小路径覆盖与偏序集合Dilworth定理\">2.7.2 最小路径覆盖与偏序集合Dilworth定理</h4>\n<h5 id=\"2-7-2-1-最小路径覆盖\">2.7.2.1 最小路径覆盖</h5>\n<p>最小路径覆盖问题是指用最少的<strong>不相交</strong>路径，使得路径覆盖整个有向图的所有点。</p>\n<p>本质是二分图的最大匹配。</p>\n<p>目标是覆盖所有的点，这些路径不要求非得共用起点和终点。初始考虑每个点都被一条自环唯一覆盖，那么一条边连通两个点就意味着这条边同时覆盖了这两个点，同时因为不相交路径的属性确保了如果点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>连向了点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>，那么一定不会再有点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>连向任何一个点。确保一个点只连接一条出边，就是二分图的最大匹配问题。建图跑最大匹配后找出最大可化简数量，结果就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">n-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">−</span></span></span></span>最大流。</p>\n<p><strong>示例1：（模板题)</strong></p>\n<p>给定有向图 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G=(V,E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> 。设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 的一个简单路（顶点不相交）的集合。如果 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> 中每个定点恰好在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> 的一条路上，则称 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 的一个路径覆盖。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> 中路径可以从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> 的任何一个定点开始，长度也是任意的，特别地，可以为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 的最小路径覆盖是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 所含路径条数最少的路径覆盖。设计一个有效算法求一个 DAG（有向无环图）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 的最小路径覆盖。</p>\n<p><strong>输入格式</strong></p>\n<p>第一行有两个正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 是给定 DAG（有向无环图）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 的顶点数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> 的边数。接下来的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 行，每行有两个正整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 表示一条有向边 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p><strong>输出格式</strong></p>\n<p>从第一行开始，每行输出一条路径。文件的最后一行是最少路径数。</p>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">100\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">100%</span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>150</mn></mrow><annotation encoding=\"application/x-tex\">1\\leq n\\leq 150</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">150</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>6000</mn></mrow><annotation encoding=\"application/x-tex\">1\\leq m\\leq 6000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6000</span></span></span></span>​​。</p>\n<p>记录路径在dfs中维护一个nxt数组表示这个点的下一个。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">10010</span>, M = <span class=\"number\">200010</span>, INF = <span class=\"number\">1e15</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ed;</span><br><span class=\"line\">    <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;edge&gt; e[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, S, T;</span><br><span class=\"line\"><span class=\"type\">int</span> dep[N], cur[N], p[N], net[N], d[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> <span class=\"comment\">// bfs分层</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> dep);</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(S);</span><br><span class=\"line\">    dep[S] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; e[t].<span class=\"built_in\">size</span>(); i = i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ed = e[t][i].ed;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dep[ed] == <span class=\"number\">-1</span> &amp;&amp; e[t][i].len) <span class=\"comment\">// 如果这个点没有被定义层次，且还有剩余流量</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dep[ed] = dep[t] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(ed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cur, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(cur));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dep[T] == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> st, <span class=\"type\">int</span> limit)</span> <span class=\"comment\">// limit最大可增加的流量</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (st == T)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"type\">int</span> nowflow = <span class=\"number\">0</span>;                                   <span class=\"comment\">// 定义当前节点的流量,多路增广优化，找满当前能找的limit流量上界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cur[st]; i &lt; e[st].<span class=\"built_in\">size</span>(); i = i + <span class=\"number\">1</span>) <span class=\"comment\">// 当前弧优化，如果一个点有很多出边，有些出边可能无法再推流了，我们就记录第一条可以推流的边</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cur[st] = i; <span class=\"comment\">// 当前弧优化</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ed = e[st][i].ed;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dep[ed] == dep[st] + <span class=\"number\">1</span> &amp;&amp; e[st][i].len) <span class=\"comment\">// 这条边能推且，深度为更深一层（为了找最短的增广路）</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = <span class=\"built_in\">dfs</span>(ed, <span class=\"built_in\">min</span>(e[st][i].len, limit - nowflow)); <span class=\"comment\">// 是为了限制后面点的流量不能大于limit-nowflow</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t)                                               <span class=\"comment\">// 走下去能推流</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                e[st][i].len -= t;           <span class=\"comment\">// 减去相应的</span></span><br><span class=\"line\">                e[ed][e[st][i].id].len += t; <span class=\"comment\">// 反边+相应的</span></span><br><span class=\"line\">                nowflow += t;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t)</span><br><span class=\"line\">                    net[st] = ed - n;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nowflow == limit)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nowflow;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nowflow)</span><br><span class=\"line\">        dep[st] = <span class=\"number\">-1</span>; <span class=\"comment\">// 如果这个点不能延申，那就删掉这个点（炸点优化）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nowflow;   <span class=\"comment\">// 会返回本次bfs（）后所有增广路能加的最多流量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">        r += <span class=\"built_in\">dfs</span>(S, INF);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;w&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sti = e[u].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> edi = e[v].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    e[u].<span class=\"built_in\">push_back</span>((edge)&#123;v, w, edi&#125;); <span class=\"comment\">// 建边</span></span><br><span class=\"line\">    e[v].<span class=\"built_in\">push_back</span>((edge)&#123;u, <span class=\"number\">0</span>, sti&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (net[x] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(net[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    S = <span class=\"number\">0</span>;</span><br><span class=\"line\">    T = <span class=\"number\">2</span> * n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(u, v + n, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(S, i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i + n, T, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxflow = <span class=\"built_in\">dinic</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (net[i])</span><br><span class=\"line\">            d[net[i]]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!d[i])</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(i), cout &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; n - maxflow;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h5 id=\"2-7-2-2-Dilworth定理\">2.7.2.2 Dilworth定理</h5>\n<p>根据<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>l</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">Dilworth</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">lw</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span>定理，偏序集合的<strong>最长链长度</strong>等于其<strong>最小的反链覆盖</strong>。</p>\n<p><strong>链</strong>：一条链是一些<strong>点的集合</strong>，点集中任意两个点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>能到达<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>或是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>能到达<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>（存在偏序关系），则称该点集为一条链。</p>\n<p><strong>反链</strong>：一条反链是一些<strong>点的集合</strong>，点集中任意两个点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>，满足<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>不能到达<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>不能到达<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>​，则称该点集为一条反链。</p>\n<p><strong>最小链覆盖</strong>是指在有向图中用<strong>可以相交</strong>的若干条路径覆盖整个图且路径数最少。</p>\n<p><strong>求出有向图的传递闭包之后即可按照示例一不相交路径求解，二分图最大匹配即可。</strong></p>\n<p>如果有向图是一个<strong>完备</strong>的<strong>偏序集合哈斯图</strong>（即其传递闭包等于自身），则<strong>最小链覆盖等价于最小路径覆盖</strong>。此时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>l</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">Dilworth</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">lw</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span>定理可重新表述为<strong>最大链长度等于最小的反链划分</strong>。</p>\n<p><strong>示例1：ABC237Ex Hakata</strong></p>\n<p>我们有一个由小写英文字母组成的字符串 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> 。Bob 每天都在思考回文。他决定从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> 中选择一些回文子串并告诉 Anna。</p>\n<p>如果 Bob 告诉的回文之一是另一个回文的子串，Anna 会生气。Bob 可以选择最多多少个回文而不会让 Anna 生气？</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>≤</mo><mn>300</mn></mrow><annotation encoding=\"application/x-tex\">N\\le 300</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">300</span></span></span></span></p>\n<p>显然，包含是一个偏序关系。我们要求解的是<strong>最长的互相不包含的回文串序列长度</strong>，实际上就是<strong>最长的反链长度</strong>。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>l</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">Dilworth</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">lw</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">or</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span>定理转<strong>最小的反链覆盖</strong>。由于我们能够建立出完备的偏序哈斯图（实际上都可以），又转<strong>最小反链划分</strong>，即<strong>最小路径覆盖</strong>。</p>\n<p>求二分图最大匹配，参考示例1，作差即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    vector&lt;string&gt; pali;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; i + j &lt;= s.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string t = s.<span class=\"built_in\">substr</span>(i, j);</span><br><span class=\"line\">            string r = t;</span><br><span class=\"line\">            <span class=\"built_in\">reverse</span>(r.<span class=\"built_in\">begin</span>(), r.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t == r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                pali.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(pali.<span class=\"built_in\">begin</span>(), pali.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    pali.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(pali.<span class=\"built_in\">begin</span>(), pali.<span class=\"built_in\">end</span>()), pali.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> sz = pali.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"function\">MaxFlow&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mf</span><span class=\"params\">(<span class=\"number\">2</span> * sz + <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> S = <span class=\"number\">2</span> * sz, T = <span class=\"number\">2</span> * sz + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mf.<span class=\"built_in\">addEdge</span>(S, i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        mf.<span class=\"built_in\">addEdge</span>(sz + i, T, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sz; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pali[i].<span class=\"built_in\">find</span>(pali[j]) != string::npos)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mf.<span class=\"built_in\">addEdge</span>(i, sz + j, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sz - mf.<span class=\"built_in\">flow</span>(S, T) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-3-最大流最小割定理\">2.7.3 最大流最小割定理</h4>\n<p>最大流=最小割。</p>\n<p>割集好比是一个恐怖分子 把你家和自来水厂之间的水管网络砍断了一些 然后自来水厂无论怎么放水 水都只能从水管断口哗哗流走了 你家就停水了 割的大小应该是恐怖分子应该关心的事 毕竟细管子好割一些 而最小割花的力气最小</p>\n<p>网络的最大流等于最小割</p>\n<p>具体的证明分三部分</p>\n<ol>\n<li>任意一个流都小于等于任意一个割。</li>\n</ol>\n<p>这个很好理解，自来水公司随便给你家通点水构成一个流，恐怖分子随便砍几刀，砍出一个割，由于容量限制，每一根的被砍的水管子流出的水流量都小于管子的容量，每一根被砍的水管的水本来都要到你家的，现在流到外面，加起来得到的流量还是等于原来的流。管子的容量加起来就是割，所以流小于等于割。由于上面的流和割都是任意构造的，所以任意一个流小于任意一个割。</p>\n<ol start=\"2\">\n<li>构造出一个流等于一个割。</li>\n</ol>\n<p>当达到最大流时，根据增广路定理，残留网络中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>已经没有通路了，否则还能继续增广。我们把<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>能到的的点集设为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>，不能到的点集为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>，构造出一个割集<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">C[S,T]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>的边必然满流，否则就能继续增广，这些满流边的流量和就是当前的流即最大流。把这些满流边作为割，就构造出了一个和最大流相等的割。</p>\n<ol start=\"3\">\n<li>最大流等于最小割。</li>\n</ol>\n<p>设相等的流和割分别为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，则因为任意一个流小于等于任意一个割，任意<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>≤</mo><mi>F</mi><mi>m</mi><mo>=</mo><mi>C</mi><mi>m</mi><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">F≤Fm=Cm≤</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span></span></span></span>任意<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> 。</p>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-4-最大权闭合子图\">2.7.4 最大权闭合子图</h4>\n<p>最大权闭合子图：给定一个有向图, 顶点带权值. 你可以选中一些顶点, 要求当选中一个点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> 的时候, 若存在边 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>→</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">u\\rightarrow v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> 则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>​ 也必须选中. 最大化选中的点的总权值.</p>\n<p>建模：负点权点向重点连边，源点向正点权点连边，图中原先的点连无穷大边，跑最小割即可，最终结果就是所有正点权之和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span></span></span></span>最小割。</p>\n<p>示例：<strong>CFedu171 Best Subsequence</strong></p>\n<p>给定一个整数数组 $$a$$ ，大小为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 。</p>\n<p>我们将数组的值定义为其大小减去数组所有元素按位或中的设置位数。</p>\n<p>例如，对于数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1, 0, 1, 2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span> ，按位或为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> (包含 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 个设置位)，数组的值为 $$4-2=2$$ 。</p>\n<p>您的任务是计算给定数组的某个子序列的最大可能值。</p>\n<p>显然是最大权闭合子图问题，或者可以理解为二者选其一问题。该点要被选择，这些位置都要被扣1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;i64&gt; <span class=\"title\">a</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxFlow&lt;i64&gt; f;</span><br><span class=\"line\">    <span class=\"type\">int</span> sz = n + <span class=\"number\">60</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">    f.<span class=\"built_in\">init</span>(sz);</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> s = n + <span class=\"number\">60</span>, t = n + <span class=\"number\">60</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f.<span class=\"built_in\">addEdge</span>(s, i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">59</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((a[i] &gt;&gt; j) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f.<span class=\"built_in\">addEdge</span>(i, n + j, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">59</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f.<span class=\"built_in\">addEdge</span>(n + j, t, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i64 ans = f.<span class=\"built_in\">flow</span>(s, t);</span><br><span class=\"line\">    cout &lt;&lt; n - ans &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-5-二者选其一问题\">2.7.5  二者选其一问题</h4>\n<p>将若干元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>e</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_1,e_2,…,e_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>划分到两个集合<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A,B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>中。对于元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>,它被划分到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>中分别能获得一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><msub><mi>e</mi><mi>i</mi></msub></msub></mrow><annotation encoding=\"application/x-tex\">a_{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6807em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><msub><mi>e</mi><mi>i</mi></msub></msub></mrow><annotation encoding=\"application/x-tex\">b_{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9445em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span>的分值。除此之外,还给出若干个组合<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>∈</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">C_i\\in E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>,当组合中的元素被同时划分到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>时,可以获得额外的分值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">b&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>。求最大的分值。</p>\n<p>基本模型是设立两个超级源点，每个物品分别连，最大收益就是收益总和-最小割</p>\n<p>对于同属于一遍的额外组合，则新建节点，超级源点（以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>示例）向该新节点流额外收益<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，为保证后续节点必定在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>部，该新节点向该组合的中间点连无穷大边，迫使最小割如果保留了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">a&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>边，就必须隔断所有和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>的边，以达成正确性。</p>\n<img src=\"https://pic4.zhimg.com/v2-3f06c22d87598fc1b5c1774376d303c3_r.jpg\" alt=\"img\" style=\"zoom:25%;\" />\n<p>示例：<strong>2024杭电多校（5）猫咪们狂欢</strong></p>\n<p>猫咪们生活在树上。</p>\n<p>具体来说，有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 只猫咪和两棵大小为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>的树。猫咪编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1∼n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> ，每棵树上的节点编号也为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1∼n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>（编号各不相同） 。</p>\n<p>今晚，每只猫咪要分别选择一棵树，并待在与其编号相同的节点。</p>\n<p>在这 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 只猫咪之中，有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 只猫咪是狂欢猫。狂欢猫晚上不会睡觉，而是会选择开party。其他猫咪则会选择睡觉。</p>\n<p>每条树边都有一个狂欢值，如果这条边连接的两个节点在晚上都有狂欢猫待着，这个狂欢值就会被累加到总狂欢值上。</p>\n<p>最大化今晚的总狂欢值，并输出这个值。</p>\n<p>显然是二者选其一问题，每只猫咪有选择左还是选择右的问题，有最多<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>组组合会有额外收益。狂欢猫只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>只，涉及到的狂欢猫才形成组队节点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cat</span><span class=\"params\">(k + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; cat[i];</span><br><span class=\"line\">        mp[cat[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> s = <span class=\"number\">0</span>, t = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\">MaxFlow&lt;i64&gt; <span class=\"title\">flow</span><span class=\"params\">(<span class=\"number\">4</span> * n + <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> virp = n + <span class=\"number\">2</span>;</span><br><span class=\"line\">    i64 ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[u] &amp;&amp; mp[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flow.<span class=\"built_in\">addEdge</span>(s, virp, w);</span><br><span class=\"line\">            flow.<span class=\"built_in\">addEdge</span>(virp, u, INT_MAX / <span class=\"number\">2</span>);</span><br><span class=\"line\">            flow.<span class=\"built_in\">addEdge</span>(virp, v, INT_MAX / <span class=\"number\">2</span>);</span><br><span class=\"line\">            ans += w;</span><br><span class=\"line\">            virp++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[u] &amp;&amp; mp[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flow.<span class=\"built_in\">addEdge</span>(virp, t, w);</span><br><span class=\"line\">            flow.<span class=\"built_in\">addEdge</span>(u, virp, INT_MAX / <span class=\"number\">2</span>);</span><br><span class=\"line\">            flow.<span class=\"built_in\">addEdge</span>(v, virp, INT_MAX / <span class=\"number\">2</span>);</span><br><span class=\"line\">            ans += w;</span><br><span class=\"line\">            virp++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans - flow.<span class=\"built_in\">flow</span>(s, t) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-6-二分图最大边权匹配\">2.7.6 二分图最大边权匹配</h4>\n<p>二分图的最大权匹配是指二分图中边权和最大的匹配。数据保证有解。</p>\n<p>考虑费用流。</p>\n<p>与 <strong>二分图最大匹配</strong>类似，二分图的最大权匹配也可以转化为网络流问题来求解。</p>\n<p>首先，在图中新增一个源点和一个汇点。</p>\n<p>从源点向二分图的每个左部点连一条流量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的边，从二分图的每个右部点向汇点连一条流量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的边。</p>\n<p>接下来对于二分图中每一条连接左部点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> 和右部点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> ，边权为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 的边，则连一条从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>，流量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 的边。</p>\n<p>另外，考虑到<em><strong>最大权匹配下</strong></em>，<em><strong>匹配边的数量不一定与最大匹配的匹配边数量相等（不一定最大流）</strong></em>，因此对于每个左部点，还需向汇点连一条流量为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的边。</p>\n<p>求这个网络的 <strong>最大费用最大流</strong>即可得到答案。此时，该网络的最大流量一定为左部点的数量，而最大流量下的最大费用即对应一个最大权匹配方案。最大费用最大流可以直接负费用的最小费，Jiangly模板支持。</p>\n<h4 id=\"2-7-7-二分图最小边权点覆盖\">2.7.7 二分图最小边权点覆盖</h4>\n<p>二分图的最小边权点覆盖指找到一个边权和最小的顶点覆盖。数据保证有解。</p>\n<p>考虑最小覆盖的一种构造方式：</p>\n<p>选择一个匹配边集合<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，所有不属于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>包含的点集<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">V_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的点选择一条与自己相邻的点中边权最小的那一个点，添加对应边（<strong>允许重边</strong>）。可以证明最优解一定可以被这种构造方式构造，且是否是最优解一定取决于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的选择。</p>\n<p>设点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>为端点的边的最小边权为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><msub><mi>m</mi><mi>u</mi></msub></mrow><annotation encoding=\"application/x-tex\">wm_u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，则有一个非常简单的化简：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>C</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>e</mi><mo>∈</mo><msub><mi>E</mi><mn>1</mn></msub></mrow></munder><mi>c</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>+</mo><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>V</mi><mi mathvariant=\"normal\">\\</mi><msub><mi>V</mi><mn>1</mn></msub></mrow></munder><mi>w</mi><msub><mi>m</mi><mi>v</mi></msub><mo>=</mo><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>V</mi></mrow></munder><mi>w</mi><msub><mi>m</mi><mi>v</mi></msub><mo>+</mo><munder><mo>∑</mo><mrow><mi>e</mi><mo>∈</mo><msub><mi>E</mi><mn>1</mn></msub></mrow></munder><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi></mrow></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>w</mi><msub><mi>m</mi><mi>u</mi></msub><mo>−</mo><mi>w</mi><msub><mi>m</mi><mi>v</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Cost=\\sum_{e\\in E_1}c(e)+\\sum_{v\\in V\\backslash V_1}wm_v=\\sum_{v\\in V}wm_v+\\sum_{e\\in E_1}(c(e_{u,v})-wm_u-wm_v)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4444em;vertical-align:-1.3944em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8557em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0576em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3944em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.566em;vertical-align:-1.516em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.809em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mtight\">\\</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.2222em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.516em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.3717em;vertical-align:-1.3217em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8557em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">V</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3217em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4444em;vertical-align:-1.3944em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8557em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0576em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3944em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>最小化第二项成本即可。构建以下网络流二分图跑最小费用流：</p>\n<ul>\n<li>从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> 向每个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 添加一条边，容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，成本为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li>对于每个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>Y</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X_i,Y_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> ，从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 向 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">Y_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> 添加一条边，容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，成本为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">(</mo><msub><mi>e</mi><mrow><msub><mi>X</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>Y</mi><mi>i</mi></msub></mrow></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>w</mi><msub><mi>m</mi><msub><mi>X</mi><mi>i</mi></msub></msub><mo>−</mo><mi>w</mi><msub><mi>m</mi><msub><mi>Y</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(c(e_{X_i,Y_i})-wm_{X_i}-wm_{Y_i})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0785em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.2222em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8334em;vertical-align:-0.2501em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.0785em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3281em;\"><span style=\"top:-2.357em;margin-left:-0.2222em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>从每个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Y_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 向 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> 添加一条边，容量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，成本为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>.</li>\n<li>另外，考虑到<em><strong>最小费匹配下</strong></em>，<em><strong>匹配边的数量不一定与最大匹配的匹配边数量相等（不一定最大流，这个带有负成本的更为明显）</strong></em>，因此对于每个左部点，还需向汇点连一条流量为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，费用为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的边。</li>\n</ul>\n<p>直接跑<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>i</mi><mi>n</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>F</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi mathvariant=\"normal\">.</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">MincostFlow.h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">cos</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">tFl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">h</span></span></span></span>就行，Jiangly模板支持负数费用。</p>\n<p>示例1：<strong>ABC231H - Minimum Coloring</strong></p>\n<p>我们有一个网格，有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> 行和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> 列。令 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> 表示从顶部算起第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行和从左侧算起第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列的方格。</p>\n<p>在这个网格上，有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 个白色棋子，编号为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 。棋子 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 位于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A_i,B_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 上。</p>\n<p>您可以支付 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的费用来将棋子 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 改为黑色棋子。</p>\n<p>找出在每一行和每一列中至少有一个黑色棋子所需的最小总费用。</p>\n<p>裸的板子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> s = n + m, t = n + m + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\">MinCostFlow&lt;i64&gt; <span class=\"title\">mcf</span><span class=\"params\">(n + m + <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n + m + <span class=\"number\">10</span>, INT_MAX / <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;array&lt;<span class=\"type\">int</span>, 3&gt;&gt; <span class=\"built_in\">e</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        u--;</span><br><span class=\"line\">        v--;</span><br><span class=\"line\">        e[i] = &#123;u, v, w&#125;;</span><br><span class=\"line\">        a[u] = <span class=\"built_in\">min</span>(a[u], w);</span><br><span class=\"line\">        a[n + v] = <span class=\"built_in\">min</span>(a[n + v], w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i64 ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mcf.<span class=\"built_in\">addEdge</span>(s, i, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        mcf.<span class=\"built_in\">addEdge</span>(i, t, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        ans += a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mcf.<span class=\"built_in\">addEdge</span>(n + j, t, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        ans += a[n + j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [u, v, w] = e[i];</span><br><span class=\"line\">        mcf.<span class=\"built_in\">addEdge</span>(u, n + v, <span class=\"number\">1</span>, w - a[u] - a[n + v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> [flow, cost] = mcf.<span class=\"built_in\">flow</span>(s, t);</span><br><span class=\"line\">    cout &lt;&lt; ans + cost &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-8-剩余物品互不相同问题\">2.7.8 剩余物品互不相同问题</h4>\n<p>操作后剩余互不相同，可以通过列举出所有剩余物品种类之后每个只向超级汇点连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>的边，以确保每种物品只会出现一次。</p>\n<p>剩余数量限制为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>​的时候同理，限制容量大小即可。</p>\n<p><strong>示例1：（2024成都站K)</strong></p>\n<p>您有一个神奇的集合，最初包含 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个不同的整数。您发现这些数字可以通过除以它们的因数来产生能量。在每个步骤中，您可以从集合中选择任何大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的数字，将其删除，然后插入它的一个因数。您插入的因数不得等于原始数字。此外，由于神奇集合的不稳定性，您的操作必须确保集合中的数字保持不同。</p>\n<p>每个操作都会产生一个能量单位，您的目标是通过执行尽可能多的操作来最大化产生的总能量。给定集合中的初始数字，确定可以产生的最大能量，即可执行的最大操作数。</p>\n<p>显然每个数都会尽可能的按步数分解，最大的操作数一定取决于随后剩余的因数组合问题。规约到二分图最大权匹配即可。</p>\n<p>分解因数，超级源点向初始数连一条容量为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>、费用为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>的边；初始数字向对应因数连容量为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>、对应消耗次数的费用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>；对应因数向超级终点连容量为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>、费用为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>的边。跑最大费用流即可。</p>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"2-7-9-其他记录\">2.7.9 其他记录</h4>\n<p>1.小M的作物(最小割) 巧妙将问题转化为最小割</p>\n<p>2.奶牛的电信Telecowmunication 最小割边转化为最小割点，方法是拆点把一个点拆成两个点，用1的边长连起来，两个不同点之间的连线用INF连起来，这样的最小割就只能割1的点，相当于割点了</p>\n<p>3.教辅的组成 也是拆点，我们限制一个点通过的流量，就是把这个点拆成两个点，中间连一条我们要限制的流量的大小的边</p>\n<p>4.狼捉兔子 可以直接网络流 也可以最小割转平面图最短路（平面图最小割=对偶图的最短路）</p>\n<p>5.方格取数问题，有条件的最值。二分图点权最大独立集</p>\n<p>把方格根据i+j的奇偶性分为两类点，发现保留一个点的代价是取走周围的另一类的点，转化为最小割。</p>\n<p>S连白点，容量为点权，黑点连T同理，同时一个点向周围四个点连边，边权为inf，这样跑出来的最小割，舍弃一个点为断开他与一个源点的连接，意思就是不要这个点，保留下来的点就是最大的，sum-dinic()即可</p>\n<p>套路：方格中的点看看能不能分为两类，即分为一个二分图，同类的点是可以共存的，然后不能共存的一定是两类之间，中间连inf边跑最大流，答案就是总和减去最小割。</p>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"3-生成树\">3. 生成树</h2>\n<h4 id=\"3-1-两种最小生成树\">3.1 两种最小生成树</h4>\n<h5 id=\"3-1-1-Prim\">3.1.1 Prim</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\">sizeof</span>(dis));</span><br><span class=\"line\">    priority_queue&lt;node&gt;q;<span class=\"comment\">//所以这里其实是小根堆，存的是边（每次抉择时待选的边）</span></span><br><span class=\"line\">    node t;t.to=<span class=\"number\">1</span>,t.val=<span class=\"number\">0</span>;dis[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(t);<span class=\"comment\">//（最开始选择起点）</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        node now=q.<span class=\"built_in\">top</span>();q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[now.to]==<span class=\"number\">1</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[now.to]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        ans+=now.val;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[now.to])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vis[i.to]&amp;&amp;dis[i.to]&gt;i.val)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//有更新的边，都是可能要被选的边，加入队列中，这里的判断只有边权，因为dis是到当前集合的距离</span></span><br><span class=\"line\">                dis[i.to]=i.val;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-1-2-Kruskal\">3.1.2 Kruskal</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)fa[i]=i;<span class=\"comment\">//并查集维护是否在生成树里</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v&gt;&gt;sum;</span><br><span class=\"line\">        a[i].x=u,a[i].y=v,a[i].val=sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a<span class=\"number\">+1</span>,a<span class=\"number\">+1</span>+m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[<span class=\"built_in\">find</span>(a[i].x)]==fa[<span class=\"built_in\">find</span>(a[i].y)])<span class=\"keyword\">continue</span>;<span class=\"comment\">//已经加入了那就不要了</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">unions</span>(a[i].x,a[i].y);<span class=\"comment\">//加边</span></span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            ans+=a[i].val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k==n<span class=\"number\">-1</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k&lt;n<span class=\"number\">-1</span>)cout&lt;&lt;<span class=\"string\">&quot;orz&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> cout&lt;&lt;ans;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"3-2-Kruskal重构树\">*3.2 Kruskal重构树</h4>\n<p>Kruskal 重构树就是基于 Kruskal 的最小生成树算法在无向图中得出的树所构造而成的树。</p>\n<p><strong>性质</strong></p>\n<ul>\n<li>是一棵二叉树。</li>\n<li>如果是按最小生成树建立的话是一个大根堆。</li>\n<li><strong>强大性质</strong>：原图中两个点间所有路径上的边最大权值的最小值 == 最小生成树上两点简单路径的边最大权值 == <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>r</mi><mi>u</mi><mi>s</mi><mi>k</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Kruskal</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">Kr</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">ka</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 重构树上两点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">LCA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span></span></span></span> 的点权。</li>\n</ul>\n<p>利用这个性质，我们可以找到到点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的简单路径上的边最大权值的最小值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">≤ val</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>的所有点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>。可以发现都在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>r</mi><mi>u</mi><mi>s</mi><mi>k</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Kruskal</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">Kr</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">ka</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 重构树上的某一棵子树内，且恰好为该子树的所有叶节点。</p>\n<p><strong>具体细节</strong></p>\n<p>我们在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>r</mi><mi>u</mi><mi>s</mi><mi>k</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Kruskal</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">Kr</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">ka</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 重构树上找到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 到根的路径上权值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">≤val</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 的最浅的节点,这就是那棵子树的根节点。这个到时候类似求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>C</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">LCA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span></span></span></span>由高到低倍增跳就行了，一般这种情况下还有树上线段树合并或者书上主席树之类的。</p>\n<ul>\n<li>如果题目要求最小权值最大值，可以建最大生成树的重构树从而达到一样的效果。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Ex_Kruskal</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt=n;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e<span class=\"number\">+1</span>,e+m<span class=\"number\">+1</span>,cmp);<span class=\"comment\">//对边排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;<span class=\"number\">2</span>*n;++i) f[i]=i;<span class=\"comment\">//预处理并查集</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u=<span class=\"built_in\">get</span>(e[i].x),v=<span class=\"built_in\">get</span>(e[i].y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u!=v)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt;<span class=\"comment\">//新点</span></span><br><span class=\"line\">            f[u]=f[v]=cnt;<span class=\"comment\">//初始化</span></span><br><span class=\"line\">            val[cnt]=e[i].z;<span class=\"comment\">//新点权为这个边权</span></span><br><span class=\"line\">            <span class=\"built_in\">add</span>(cnt,u);<span class=\"built_in\">add</span>(cnt,v);<span class=\"comment\">//连边</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt==<span class=\"number\">2</span>*n<span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;<span class=\"comment\">//一共2*n-1个点，建好退出</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"4-二分图最大匹配-二分图最小点覆盖\">4.  二分图最大匹配/二分图最小点覆盖</h2>\n<p>匈牙利算法，或者网络流。</p>\n<p>匈牙利算法,判断二分图：并查集/dfs（即染色法/并查集）</p>\n<p>二分图是什么？节点由两个集合组成，且两个集合内部没有边的图。这张图上的所有边的两个端点，都分属不同的部分，无向图</p>\n<p>最大匹配：要求选出一些边，使得这些边没有公共顶点，且边的数量最大。</p>\n<p>二分图中，最小点覆盖 = 最大匹配  最小点覆盖：指的是在一个图中：一个点覆盖与之连接的边，求用最少的点可以覆盖图。</p>\n<p>二分图中，最大独立集 = $n- $最小点覆盖</p>\n<p>最大独立集：一个点集，里面的点两两不相邻</p>\n<p>算法步骤：如果后来的和以前的发生矛盾，则以前的被绿优先退让。</p>\n<p>如果以前的退让之后没有cp可处，则以前的拒绝退让，新来的去寻找下一个匹配。</p>\n<p>如果新来的谁也匹配不上了，那就这么单着吧。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//O(nm),但是Dinic可以sqrt(n)*m</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2</span>*<span class=\"number\">1e5</span><span class=\"number\">+2</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,e,u,v,ans;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;edge[<span class=\"number\">505</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> vis[<span class=\"number\">505</span>],match[<span class=\"number\">505</span>];<span class=\"comment\">//match：为右部点建立的数组，存的是与它匹配的左部点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[x])&#123;<span class=\"comment\">//枚举每一个右部点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;<span class=\"comment\">//没访问过</span></span><br><span class=\"line\">            vis[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!match[i]||<span class=\"built_in\">check</span>(match[i]))&#123;<span class=\"comment\">//可以直接匹配or原先的i可以换人</span></span><br><span class=\"line\">                match[i]=x;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;e;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=e;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(vis));<span class=\"comment\">//对于每一个u的研究，对另一外一半只能访问一次，故每次都要清空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i))ans++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"5-树上问题\">5.树上问题</h2>\n<h3 id=\"5-1-树上LCA\">5.1  树上LCA</h3>\n<p>关于倍增法以及欧拉序<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">ST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">ST</span></span></span></span>表在线做法参见数据结构部分。这里只给出离线<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>a</mi><mi>r</mi><mi>j</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">Tarjan</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">jan</span></span></span></span>算法，实现<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>​复杂度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span><span class=\"comment\">//Tarjan离线算法</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5</span>*<span class=\"number\">1e5</span><span class=\"number\">+2</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">point</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt;edge;</span><br><span class=\"line\">vector&lt;vector&lt;point&gt; &gt;q;</span><br><span class=\"line\"><span class=\"type\">int</span> dep[N],fa[N],vis[N],ans[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"comment\">//路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[x]!=x)&#123;</span><br><span class=\"line\">        fa[x]=<span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unions</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;<span class=\"comment\">//x合并到y上</span></span><br><span class=\"line\">    fa[<span class=\"built_in\">find</span>(x)]=fa[<span class=\"built_in\">find</span>(y)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> f)</span></span>&#123;<span class=\"comment\">/***1.**以s为根节点，从根节点开始。</span></span><br><span class=\"line\"><span class=\"comment\">**2.**遍历该点u所有子节点v，并标记这些子节点v已被访问过。</span></span><br><span class=\"line\"><span class=\"comment\">**3.**若是v还有子节点，返回2，否则下一步。</span></span><br><span class=\"line\"><span class=\"comment\">**4.**合并v到u上。</span></span><br><span class=\"line\"><span class=\"comment\">**5.**寻找与当前点u有询问关系的点v。</span></span><br><span class=\"line\"><span class=\"comment\">**6.**若是v已经被访问过了，则可以确认u和v的最近公共祖先为v被合并到的父亲节点a。*/</span></span><br><span class=\"line\">    vis[x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=f)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,x);</span><br><span class=\"line\">            <span class=\"built_in\">unions</span>(i,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t:q[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[t.x])ans[t.i]=<span class=\"built_in\">find</span>(t.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,m,s;<span class=\"type\">int</span> x,y;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class=\"line\">    edge.<span class=\"built_in\">resize</span>(n<span class=\"number\">+1</span>);</span><br><span class=\"line\">    q.<span class=\"built_in\">resize</span>(n<span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        edge[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">        edge[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        q[x].<span class=\"built_in\">push_back</span>(&#123;y,i&#125;);<span class=\"comment\">//另一个相关点和组数</span></span><br><span class=\"line\">        q[y].<span class=\"built_in\">push_back</span>(&#123;x,i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(s,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)cout&lt;&lt;ans[i]&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*一个熊孩子Link从一棵有根树的最左边最底下的结点灌岩浆，Link表示很讨厌这种倒着长的树。</span></span><br><span class=\"line\"><span class=\"comment\">岩浆会不断的注入，直到注满整个树…</span></span><br><span class=\"line\"><span class=\"comment\">如果岩浆灌满了一棵子树，Link发现树的另一边有一棵更深的子树，Link会先去将那棵子树灌满。</span></span><br><span class=\"line\"><span class=\"comment\">岩浆只有在迫不得已的情况下才会向上升高，找到一个新的子树继续注入。</span></span><br><span class=\"line\"><span class=\"comment\">机(yu)智(chun)的Link发现了找LCA的好方法，即如果两个结点都被岩浆烧掉时，他们的LCA即为那棵子树上岩浆最高的位置*/</span></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"5-2-树链剖分\">5.2 树链剖分</h3>\n<p>参见数据结构部分静态树章节，对于长链、重链都有。</p>\n<p>这里贴出重链剖分头文件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>L</mi><mi>D</mi><mi mathvariant=\"normal\">.</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">HLD.h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">h</span></span></span></span>。这个是从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>开始的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 重链剖分(jiangly)版本</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 时间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"comment\">     *@brief 空间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">HLD</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        std::vector&lt;<span class=\"type\">int</span>&gt; siz, top, dep, parent, dfn, enddfn, rk;</span><br><span class=\"line\">        std::vector&lt;std::vector&lt;<span class=\"type\">int</span>&gt;&gt; adj;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur;</span><br><span class=\"line\">        <span class=\"built_in\">HLD</span>() &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">HLD</span>(<span class=\"type\">int</span> n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">            siz.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            top.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            dep.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            parent.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            dfn.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            enddfn.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            rk.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">            cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">            adj.<span class=\"built_in\">assign</span>(n, &#123;&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edges</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            adj[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">            adj[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @brief 重链剖分（jiangly），只能剖一次，不支持动态树，节点编号和树剖编号都是从0开始。</span></span><br><span class=\"line\"><span class=\"comment\">         * @param root 根节点</span></span><br><span class=\"line\"><span class=\"comment\">         * @note 重链剖分前需要先调用init函数,调用重链剖分后，邻接表vector中存储的是重链剖分后的树，没有指向父节点的边</span></span><br><span class=\"line\"><span class=\"comment\">         * @note 重链剖分后，dfn数组中存储的是节点的dfs序，rk数组中存储的是dfs序对应的节点，enddfn数组中存储的是节点所对应子树的dfs序的结束位置的后一个（左闭右开）。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"type\">int</span> root = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            top[root] = root;</span><br><span class=\"line\">            dep[root] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            parent[root] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs1</span>(root);</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parent[u] != <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                adj[u].<span class=\"built_in\">erase</span>(std::<span class=\"built_in\">find</span>(adj[u].<span class=\"built_in\">begin</span>(), adj[u].<span class=\"built_in\">end</span>(), parent[u]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            siz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : adj[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parent[v] = u;</span><br><span class=\"line\">                dep[v] = dep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v);</span><br><span class=\"line\">                siz[u] += siz[v];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (siz[v] &gt; siz[adj[u][<span class=\"number\">0</span>]])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    std::<span class=\"built_in\">swap</span>(v, adj[u][<span class=\"number\">0</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            dfn[u] = cur++;</span><br><span class=\"line\">            rk[dfn[u]] = u;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : adj[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                top[v] = v == adj[u][<span class=\"number\">0</span>] ? top[u] : v;</span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            enddfn[u] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @brief 返回u到v的最近公共祖先</span></span><br><span class=\"line\"><span class=\"comment\">         * @param u 起点</span></span><br><span class=\"line\"><span class=\"comment\">         * @param v 终点</span></span><br><span class=\"line\"><span class=\"comment\">         * @return 返回u到v的最近公共祖先节点</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (top[u] != top[v])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dep[top[u]] &gt; dep[top[v]])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    u = parent[top[u]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    v = parent[top[v]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @brief 返回u到v的距离</span></span><br><span class=\"line\"><span class=\"comment\">         * @param u 起点</span></span><br><span class=\"line\"><span class=\"comment\">         * @param v 终点</span></span><br><span class=\"line\"><span class=\"comment\">         * @return 返回u到v的距离</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dist</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dep[u] + dep[v] - <span class=\"number\">2</span> * dep[<span class=\"built_in\">lca</span>(u, v)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @brief 跳跃</span></span><br><span class=\"line\"><span class=\"comment\">         * @param u 起点</span></span><br><span class=\"line\"><span class=\"comment\">         * @param k 跳跃距离</span></span><br><span class=\"line\"><span class=\"comment\">         * @return 返回跳跃后的节点</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">jump</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dep[u] &lt; k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> d = dep[u] - k;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (dep[top[u]] &gt; d)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                u = parent[top[u]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> rk[dfn[u] - dep[u] + d];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * @brief 判断u是否是v的祖先</span></span><br><span class=\"line\"><span class=\"comment\">         * @param u 起点</span></span><br><span class=\"line\"><span class=\"comment\">         * @param v 终点</span></span><br><span class=\"line\"><span class=\"comment\">         * @return 返回u是否是v的祖先</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isAncester</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dfn[u] &lt;= dfn[v] &amp;&amp; dfn[v] &lt; enddfn[u];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        int rootedParent(int u, int v)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            std::swap(u, v);</span></span><br><span class=\"line\"><span class=\"comment\">            if (u == v)</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return u;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            if (!isAncester(u, v))</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return parent[u];</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            auto it = std::upper_bound(adj[u].begin(), adj[u].end(), v, [&amp;](int x, int y)</span></span><br><span class=\"line\"><span class=\"comment\">                                       &#123; return dfn[x] &lt; dfn[y]; &#125;) -</span></span><br><span class=\"line\"><span class=\"comment\">                      1;</span></span><br><span class=\"line\"><span class=\"comment\">            return *it;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        int rootedSize(int u, int v)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if (u == v)</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return n;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            if (!isAncester(v, u))</span></span><br><span class=\"line\"><span class=\"comment\">            &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                return siz[v];</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            return n - siz[rootedParent(u, v)];</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        int rootedLca(int a, int b, int c)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return lca(a, b) ^ lca(b, c) ^ lca(c, a);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;*/</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"5-3-树的直径\">5.3 树的直径</h3>\n<p>树形<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>，求出每个点的最长路和次长路。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum1=<span class=\"number\">0</span>,sum2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    f[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=fa)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,u);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f[i]&gt;sum1)sum2=sum1,sum1=f[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(f[i]&gt;sum2)sum2=f[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[u]+sum1+sum2&gt;ans)ans=f[u]+sum1+sum2;</span><br><span class=\"line\">    f[u]+=sum1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-树的重心\">5.4 树的重心</h3>\n<p>无根树的重心点定义为树种的点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>，使得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>相邻的所有子树的子树大小均不大于树大小的一半。显然一棵树最多只有两个重心（当树节点为奇数时），且两个重心必定相邻。根据这个可以进行一定的二分（2024南京站G）</p>\n<p><strong>性质1</strong></p>\n<p>某个点是树的<strong>重心</strong>等价于它最大子树大小<strong>不大于</strong>整棵树大小的<strong>一半</strong>。</p>\n<p><strong>性质2</strong></p>\n<p>树<strong>至多有两个</strong>重心。如果树有两个重心，那么它们<strong>相邻</strong>。此时树一定有<strong>偶数</strong>个节点，且可以被划分为两个大小相等的分支，每个分支各自包含一个重心。</p>\n<p><strong>性质3</strong></p>\n<p>树中所有点到某个点的距离和中，到重心的距离和是最小的；如果有两个重心，那么到它们的距离和一样。反过来，距离和最小的点一定是重心。</p>\n<p><strong>性质4</strong></p>\n<p>往树上增加或减少一个叶子，如果原节点数是奇数，那么重心可能增加一个，原重心仍是重心；如果原节点数是偶数，重心可能减少一个，另一个重心仍是重心</p>\n<p><strong>性质5</strong></p>\n<p>把两棵树通过一条边相连得到一棵新的树，则新的重心在较大的一棵树一侧的连接点与原重心之间的简单路径上。如果两棵树大小一样，则重心就是两个连接点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, sz[MAXN], mss[MAXN]; <span class=\"comment\">// n：总结点数（请从外部传入），sz：树的大小，mss：最大子树大小</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ctr; <span class=\"comment\">// 重心</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> fa = <span class=\"number\">0</span>)</span> <span class=\"comment\">// 找重心</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sz[p] = <span class=\"number\">1</span>, mss[p] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [to, w] : edges[p])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (to != fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(to, p);</span><br><span class=\"line\">            mss[p] = <span class=\"built_in\">max</span>(mss[p], sz[to]);</span><br><span class=\"line\">            sz[p] += sz[to];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    mss[p] = <span class=\"built_in\">max</span>(mss[p], n - sz[p]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mss[p] &lt;= n / <span class=\"number\">2</span>) ctr.<span class=\"built_in\">push_back</span>(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-树上差分\">5.5 树上差分</h3>\n<p>见数据结构静态树部分。</p>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"5-6-树上启发式合并\">5.6 树上启发式合并</h3>\n<p>树上启发式合并是一种暴力的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">Trick</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，通过小子树信息向大子树合并，实现和并查集按秩合并一样的亚线性复杂度。估算按照<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">nlogn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span></span></span></span>​算就行，也是一种乱搞做法。</p>\n<p>示例1: <strong>2024杭电多校1 树</strong></p>\n<p>给一棵根为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的有根树，点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 具有一个权值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 。</p>\n<p>定义一个点对的值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mi>u</mi></msub><mo separator=\"true\">,</mo><msub><mi>A</mi><mi>v</mi></msub><mo stretchy=\"false\">)</mo><mo>×</mo><mi mathvariant=\"normal\">∣</mi><msub><mi>A</mi><mi>u</mi></msub><mo>−</mo><msub><mi>A</mi><mi>v</mi></msub><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">f(u,v)=max(A_u,A_v)×|A_u−A_v|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span> 。</p>\n<p>你需要对于每个节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> ，计算 $ans_i=∑_{u∈subtree(i),v∈subtree(i)}f(u,v) $，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">subtree(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">ree</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 的子树。</p>\n<p>请你输出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mn>64</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">⊕(ans_i\\ mod\\ 2^{64})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">⊕</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">an</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">64</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> ，其中 ⊕ 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi>O</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">XOR</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">XOR</span></span></span></span>​​.</p>\n<p>显然硬按着结点不好想。</p>\n<p>考虑两个子树合并，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">ans_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的信息是一定要继承<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>n</mi><msub><mi>s</mi><mi>u</mi></msub><mo separator=\"true\">,</mo><mi>u</mi><mo>∈</mo><mi>s</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ans_{u},u\\in son(i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">an</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">so</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span>的。考虑不同属于两个子树的点如何处理。</p>\n<p>权值树合并，权值树区间合并的时候，一定是左部分的区间点权小于右部分的区间点权。所以两部分合并的时候右半区间的每一个点会额外产生</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mo>∑</mo><mo>−</mo><mi>s</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>l</mi><mi>s</mi><mi>o</mi><mi>n</mi><mi>s</mi></mrow></msub><mo>×</mo><mi>v</mi><mi>a</mi><msub><mi>l</mi><msub><mi>r</mi><mi>i</mi></msub></msub><mo>+</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mrow><mi>l</mi><mi>s</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>×</mo><mi>v</mi><mi>a</mi><msubsup><mi>l</mi><msub><mi>r</mi><mi>i</mi></msub><mn>2</mn></msubsup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large\\sum -sum_{lsons}\\times val_{r_i}+cnt_{lson}\\times val_{r_i}^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.92em;vertical-align:-0.66em;\"></span><span class=\"mop op-symbol large-op sizing reset-size6 size7\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sizing reset-size6 size7\">−</span><span class=\"mord mathnormal sizing reset-size6 size7\">s</span><span class=\"mord mathnormal sizing reset-size6 size7\">u</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.313em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">so</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1332em;vertical-align:-0.2999em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal sizing reset-size6 size7\">a</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:-0.0197em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:-0.0278em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1498em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2499em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9181em;vertical-align:-0.18em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\">c</span><span class=\"mord mathnormal sizing reset-size6 size7\">n</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.313em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">so</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4274em;vertical-align:-0.4163em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal sizing reset-size6 size7\">a</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8426em;\"><span style=\"top:-2.553em;margin-left:-0.0197em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4502em;margin-left:-0.0278em;margin-right:0.0625em;\"><span class=\"pstrut\" style=\"height:2.6em;\"></span><span class=\"sizing reset-size4 size2 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1498em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.213em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3469em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>线段树结点维护区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span>、区间数个数、区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">sum^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>即可。然后<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">nlogn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span></span></span></span>​线段树树上启发式合并即可。</p>\n<div style=\"page-break-after: always;\"></div>\n<p>示例2：<strong>2024杭电多校3 旅行</strong></p>\n<p>有一棵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个结点的无根树，每个结点都有对应的类型 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">c_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和权重 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ，你需要在这棵树上规划若干次旅行。</p>\n<p>对于一次旅行，你将从一个树上的一个结点出发，沿着树上的边进行旅行，最终到达另一个和起点类型相同的结点。</p>\n<p>你会进行很多次旅行，但你希望对于每个结点，在所有旅行路线中最多只会经过一次。</p>\n<p>一次旅行的价值是起始点和终止点的权重和，你需要规划旅行的方案使得旅行的总权重和最大。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mi>n</mi><mo>≤</mo><mn>2</mn><mi>e</mi><mn>5</mn><mo separator=\"true\">,</mo><msub><mi>c</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><msub><mi>w</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">\\sum n\\le 2e5,c_i\\le n,w_i \\le 1e6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">6</span></span></span></span>​</p>\n<p>和子树有关，考虑子树合并。</p>\n<p>一个子树内最优解为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding=\"application/x-tex\">dp_u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，那么其和另一个子树<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mi>v</mi></msub></mrow><annotation encoding=\"application/x-tex\">dp_v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>进行合并更新。那么有两种更新方式：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathsize=\"1.2em\"><mi>d</mi><msub><mi>p</mi><mi>u</mi></msub><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>d</mi><msub><mi>p</mi><mi>u</mi></msub><mo>+</mo><mi>d</mi><msub><mi>p</mi><mi>v</mi></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">{</mo><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\large dp_u=max(dp_u+dp_v,\\{f_{u,c}+f_{v,c}\\})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0667em;vertical-align:-0.2333em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\">d</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.3em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\">ma</span><span class=\"mord mathnormal sizing reset-size6 size7\">x</span><span class=\"mopen sizing reset-size6 size7\">(</span><span class=\"mord mathnormal sizing reset-size6 size7\">d</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2356em;vertical-align:-0.3356em;\"></span><span class=\"mord mathnormal sizing reset-size6 size7\">d</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:0em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct sizing reset-size6 size7\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen sizing reset-size6 size7\">{</span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:-0.1076em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin sizing reset-size6 size7\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2356em;vertical-align:-0.3356em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.137em;\"><span style=\"top:-2.65em;margin-left:-0.1076em;margin-right:0.0417em;\"><span class=\"pstrut\" style=\"height:2.8em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2796em;\"><span></span></span></span></span></span></span><span class=\"mclose sizing reset-size6 size7\">})</span></span></span></span></p>\n<p>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">f_{u,c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>表示<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>子树上传一个颜色为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>的路径接口所能提供的最大权值和。显然<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding=\"application/x-tex\">dp_u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是不提供上传路径的。</p>\n<p>对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">f_{u,c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>​的更新有下列式子，出于启发式合并，如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>上传路径穿过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>，则不能使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding=\"application/x-tex\">dp_u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub><mo>+</mo><mi>d</mi><msub><mi>p</mi><mi>v</mi></msub><mo separator=\"true\">,</mo><msub><mi>f</mi><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow></msub><mo>+</mo><msub><mo>∑</mo><mrow><mi>t</mi><mo>∈</mo><mi>s</mi><mi>o</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo></mrow></msub><mi>d</mi><msub><mi>p</mi><mi>t</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_{u,c}=max(f_{u,c}+dp_v,f_{v,c}+\\sum_{t\\in son(u)} dp_t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">so</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>​</p>\n<p>启发式线段树合并即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> GCC optimize(3, <span class=\"string\">&quot;Ofast&quot;</span>, <span class=\"string\">&quot;inline&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> i64 = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> i64 mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">    i64 f;</span><br><span class=\"line\">    i64 lz = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">3e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">node tree[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">    tree[tot] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[rt].f = <span class=\"built_in\">max</span>(tree[tree[rt].l].f, tree[tree[rt].r].f);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pushd</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[rt].lz)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].l)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[tree[rt].l].f += tree[rt].lz;</span><br><span class=\"line\">            tree[tree[rt].l].lz += tree[rt].lz;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree[rt].r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[tree[rt].r].f += tree[rt].lz;</span><br><span class=\"line\">            tree[tree[rt].r].lz += tree[rt].lz;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tree[rt].lz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> pos, <span class=\"type\">int</span> val, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt)</span><br><span class=\"line\">        rt = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[rt].f = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushd</span>(rt);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tree[rt].l, pos, val, cl, mid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tree[rt].r, pos, val, mid + <span class=\"number\">1</span>, cr);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;i64&gt; dp, dpson, w, c;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; con;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; root;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merges</span><span class=\"params\">(<span class=\"type\">int</span> &amp;rt1, <span class=\"type\">int</span> &amp;rt2, <span class=\"type\">int</span> cl, <span class=\"type\">int</span> cr, i64 &amp;ans, i64 dpv, i64 dpson)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt1 || !rt2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rt1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt1].f += dpv;</span><br><span class=\"line\">            tree[rt1].lz += dpv;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tree[rt2].f += dpson;</span><br><span class=\"line\">            tree[rt2].lz += dpson;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rt1 |= rt2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl == cr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, tree[rt1].f + tree[rt2].f);</span><br><span class=\"line\">        tree[rt1].f = <span class=\"built_in\">max</span>(tree[rt1].f + dpv, tree[rt2].f + dpson);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (cl + cr) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">pushd</span>(rt1), <span class=\"built_in\">pushd</span>(rt2);</span><br><span class=\"line\">    <span class=\"built_in\">merges</span>(tree[rt1].l, tree[rt2].l, cl, mid, ans, dpv, dpson);</span><br><span class=\"line\">    <span class=\"built_in\">merges</span>(tree[rt1].r, tree[rt2].r, mid + <span class=\"number\">1</span>, cr, ans, dpv, dpson);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">upd</span>(root[u], c[u], w[u], <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    dp[u] = <span class=\"number\">0</span>, dpson[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;v : con[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == f)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">        i64 tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">merges</span>(root[u], root[v], <span class=\"number\">1</span>, n, tmp, dp[v], dpson[u]);</span><br><span class=\"line\">        dp[u] = <span class=\"built_in\">max</span>(dp[u] + dp[v], tmp);</span><br><span class=\"line\">        dpson[u] += dp[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    dp.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    dpson.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    w.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    c.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    root.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; c[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; w[i];</span><br><span class=\"line\">    con.<span class=\"built_in\">assign</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        con[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        con[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout &lt;&lt; dp[<span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(&quot;1002.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(&quot;1.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<p>示例3：（未知来源，朱的例题）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理子树相关的问题，不支持修改，nlogn的复杂度，离线算法</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LL long long </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>(); <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;<span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>; c = <span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> N, col[MAXN], son[MAXN], siz[MAXN], cnt[MAXN], Mx, Son;</span><br><span class=\"line\">LL sum = <span class=\"number\">0</span>, ans[MAXN];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    siz[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v[x].<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = v[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(to, x);</span><br><span class=\"line\">        siz[x] += siz[to];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[to] &gt; siz[son[x]]) son[x] = to;<span class=\"comment\">//轻重链剖分</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> fa,<span class=\"type\">int</span> c)</span> </span>&#123;<span class=\"comment\">//暴力计算x的子树颜色和，不考虑重边，</span></span><br><span class=\"line\">    cnt[col[x]] +=c;<span class=\"comment\">//这里可能会因题目而异</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt[col[x]] &gt; Mx) Mx = cnt[col[x]], sum = col[x];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cnt[col[x]] == Mx) sum += (LL)col[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v[x].<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = v[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa || to == Son) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(to, x,c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> fa, <span class=\"type\">int</span> opt)</span> </span>&#123;<span class=\"comment\">//处理当前节点的答案</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v[x].<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> to = v[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(to != son[x]) <span class=\"built_in\">dfs2</span>(to, x, <span class=\"number\">0</span>);<span class=\"comment\">//简单的往轻边走算轻边的答案，opt = 0表示递归完成后消除对该点的影响</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x]) <span class=\"built_in\">dfs2</span>(son[x], x, <span class=\"number\">1</span>), Son = son[x];<span class=\"comment\">//统计重儿子的贡献，不消除影响</span></span><br><span class=\"line\">    <span class=\"comment\">//这时候的sum和Mx都是只考虑重儿子计算出来的</span></span><br><span class=\"line\">    <span class=\"built_in\">add</span>(x, fa,<span class=\"number\">1</span>); Son = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//暴力统计所有轻儿子的贡献，会递归所有轻儿子，除了当前节点的重儿子，而不是son[x]，因为轻儿子的重儿子是需要计算的，这里只是不需要计算x的重儿子</span></span><br><span class=\"line\">    ans[x] = sum;<span class=\"comment\">//更新答案</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!opt) <span class=\"built_in\">add</span>(x,fa,<span class=\"number\">-1</span>), sum = <span class=\"number\">0</span>, Mx = <span class=\"number\">0</span>;<span class=\"comment\">//如果需要删除贡献的话就删掉</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    N = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) col[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"built_in\">read</span>(), y = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        v[x].<span class=\"built_in\">push_back</span>(y); v[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%I64d &quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"6-图的连通性\">6.图的连通性</h2>\n<h3 id=\"6-1-无向图连通性\">6.1 无向图连通性</h3>\n<p>无向图的连通性主要关于点双联通分量和边双联通分量，用于操作缩点以及缩边，从而把无向图中的环删掉。</p>\n<h4 id=\"6-1-1-割点\">6.1.1 割点</h4>\n<p>对于一个无向图，如果把一个点删除后这个图的极大连通分量数增加了，那么这个点就是这个图的割点（又称割顶）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2e4</span><span class=\"number\">+1e3</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,ans;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; g[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> cut[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N],low[N],cnt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> root)</span></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++cnt;</span><br><span class=\"line\">    <span class=\"type\">int</span> child=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:g[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v,root),low[u]=<span class=\"built_in\">min</span>(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(low[v]&gt;=dfn[u]&amp;&amp;u!=root) cut[u]=<span class=\"literal\">true</span>;<span class=\"comment\">//如果儿子的low值大于等于dfn，则代表其为儿子与其他非子树点相连的唯一途径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u==root) child++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=<span class=\"built_in\">min</span>(low[u],dfn[v]);<span class=\"comment\">//注意这里是dfn[v]</span></span><br><span class=\"line\">    <span class=\"comment\">//因为割点判定法则是小于等于号，所以在求割点时，不必考虑父节点和重边的问题，从x出发能访问到的所有点的时间戳都可以用来更新 lowx</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(child&gt;=<span class=\"number\">2</span>&amp;&amp;u==root)cut[u]=<span class=\"literal\">true</span>;<span class=\"comment\">//对根的处理,大于两个子树</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        g[u].<span class=\"built_in\">pb</span>(v);g[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[i]) <span class=\"built_in\">tarjan</span>(i,i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cut[i]) ans++;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cut[i]) cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-1-2-割边\">6.1.2 割边</h4>\n<p>对于一个无向图，如果删掉一条边后图中的连通分量数增加了，则称这条边为桥或者割边。严谨来说，就是：假设有连通图 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G=(V,E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>​，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>​是其中一条边（即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">e\\in E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>​)，如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>−</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">G-e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>​ 是不连通的，则边 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>​是图<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>​的一条割边（桥)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">200</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,sum;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> cut[N];</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N],low[N],cnt,fa[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x,y;</span><br><span class=\"line\">&#125; edge[<span class=\"number\">5001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">struct</span> Edge a,<span class=\"keyword\">struct</span> Edge b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x==b.x)<span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> v=<span class=\"number\">1</span>; v&lt;=n; v++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!a[u][v])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">            fa[v]=u,<span class=\"built_in\">tarjan</span>(v),low[u]=<span class=\"built_in\">min</span>(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(low[v]&gt;dfn[u]) edge[++sum].x=u, edge[sum].y=v;<span class=\"comment\">//儿子回不到父亲以上的位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v!=fa[u])low[u]=<span class=\"built_in\">min</span>(low[u],dfn[v]);<span class=\"comment\">//注意这里不能是fa[u],不然上面的if那里一定取不了大于号！</span></span><br><span class=\"line\">        <span class=\"comment\">//low的意思这里是不经过父亲能回到的最早的点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        a[u][v]=a[v][u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[i])<span class=\"built_in\">tarjan</span>(i);<span class=\"comment\">//tarjan</span></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(edge<span class=\"number\">+1</span>,edge+sum<span class=\"number\">+1</span>,cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=sum; i++) &#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">min</span>(edge[i].x,edge[i].y)&lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt;<span class=\"built_in\">max</span>(edge[i].x,edge[i].y)&lt;&lt;endl;<span class=\"comment\">//输出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>封装风格：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">map&lt;array&lt;<span class=\"type\">int</span>, 3&gt;, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dfn</span><span class=\"params\">(n)</span>, <span class=\"title\">low</span><span class=\"params\">(n)</span>, <span class=\"title\">fa</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>)&gt; tarjan = [&amp;](<span class=\"type\">int</span> u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dfn[u] = low[u] = ++cnt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [v, w] : newcon[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fa[v] = u, <span class=\"built_in\">tarjan</span>(v), low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (low[v] &gt; dfn[u])</span><br><span class=\"line\">                    mp[&#123;u, v, w&#125;] = mp[&#123;v, u, w&#125;] = <span class=\"number\">1</span>; <span class=\"comment\">// 割边</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v != fa[u])</span><br><span class=\"line\">                low[u] = <span class=\"built_in\">min</span>(low[u], dfn[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i);</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-1-3-点双\">6.1.3 点双</h4>\n<p>若一个无向图中的去掉任意一个点都不会改变此图的连通性，即不存在割点，则称作点双连通图。一个无向图中的每一个极大点双连通子图称作此无向图的点双连通分量。</p>\n<p>对于两个点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">u,v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>，如果删除除他们自己外哪一个点都不能使其不联通，则称两点之间双联通。点双联通不具有传递性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*点双连通：若对于一个无向图，其任意一个节点对于这个图本身而言都不是割点，则称其点双连通。也就是说，删除任意点及其相关边后，整个图仍然属于一个连通分量。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">点双连通分量：无向图中，极大的点双连通子图。与连通分量类似，抽离出一些点及它们之间的边，使得抽离出的图是一个点双连通图，在这个前提下，使得抽离出的图越大越好。*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*桥（割边）不属于任何 e-DCC（边双连通分量），但是割点可能属于多个 v-DCC*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000010</span>, M = <span class=\"number\">5000010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N], low[N], stack[N],cut[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, tot = <span class=\"number\">1</span>, num, root, top, sum, cnt;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; dcc[N * <span class=\"number\">2</span>];<span class=\"comment\">//dcc[i] 存储编号为 i 的 v-DCC 中的所有节点</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; edge[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不用特别根节点是不是割点，它一定属于它儿子的点双中，无论是不是割点</span></span><br><span class=\"line\">    dfn[u] = low[u] = ++cnt;</span><br><span class=\"line\">    stack[++top] = u;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == root &amp;&amp; edge[u].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//孤立点直接处理</span></span><br><span class=\"line\">        dcc[++sum].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:edge[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v,root);low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v] &gt;= dfn[u]) &#123;<span class=\"comment\">//u为割点，把栈里u前的都要出去</span></span><br><span class=\"line\">                sum++;</span><br><span class=\"line\">                <span class=\"type\">int</span> z;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;<span class=\"comment\">//弹栈</span></span><br><span class=\"line\">                    z = stack[top--];</span><br><span class=\"line\">                    dcc[sum].<span class=\"built_in\">push_back</span>(z);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (z != v);<span class=\"comment\">//把v弹走后目前栈顶为u(u为割点)，u不能弹走因为它属于多个点双（至少2）</span></span><br><span class=\"line\">                dcc[sum].<span class=\"built_in\">push_back</span>(u);<span class=\"comment\">//单独加入u</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u] = <span class=\"built_in\">min</span>(low[u], dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u!=v)edge[u].<span class=\"built_in\">push_back</span>(v),edge[v].<span class=\"built_in\">push_back</span>(u);<span class=\"comment\">//判自环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])<span class=\"built_in\">tarjan</span>(i,i);</span><br><span class=\"line\">    <span class=\"comment\">//for (int i=1;i&lt;=n;i++)cout&lt;&lt;low[i]&lt;&lt;endl;</span></span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=sum;i++) &#123; </span><br><span class=\"line\">        cout&lt;&lt;dcc[i].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j:dcc[i])</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; j;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-1-4-边双\">6.1.4 边双</h4>\n<p>若一个无向图中的去掉任意一条边都不会改变此图的连通性，即不存在割桥，则称作边双连通图。一个无向图中的每一个极大边双连通子图称作此无向图的边双连通分量。</p>\n<p>在一张连通的无向图中，对于两个点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>，如果无论删去哪条边（只能删去一条）都不能使它们不连通，我们就说<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> <strong>边双连通</strong>。边双联通具有传递性</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//边双连通分量，很显然，边双连通分量中没有割边，所以只需要去掉所有桥边剩下的就是边双，跑dfs即可</span></span><br><span class=\"line\"><span class=\"comment\">//注意这里可能有重边，所以我们存图的时候额外存一下每边的数量（map），找桥的时候正常找，如果非桥边有多个不影响，桥边有多个就说明额外连起来了两个v-ecc，所以我们找到桥边就数量-1，dfs的时候正常dfs，如果桥边还有那就走，没有的话就说明是一个v-ecc</span></span><br><span class=\"line\"><span class=\"comment\">//用于无向图的缩点</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5e5</span><span class=\"number\">+10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,sum;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N],low[N],cnt,fa[N],vis[N];</span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;mp[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;edge[N],ans[N];<span class=\"comment\">//ans即是bcc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:edge[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[v])&#123;</span><br><span class=\"line\">            fa[v]=u,<span class=\"built_in\">tarjan</span>(v),low[u]=<span class=\"built_in\">min</span>(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(low[v]&gt;dfn[u]) mp[u][v]--,mp[v][u]--;<span class=\"comment\">//儿子回不到父亲以上的位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v!=fa[u])low[u]=<span class=\"built_in\">min</span>(low[u],dfn[v]);<span class=\"comment\">//注意这里不能是fa[u],不然上面的if那里一定取不了大于号！</span></span><br><span class=\"line\">        <span class=\"comment\">//low的意思这里是不经过父亲能回到的最早的点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    ans[k].<span class=\"built_in\">emplace_back</span>(u);</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:edge[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[v]&amp;&amp;mp[u][v])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(v,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u==v)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp[u].<span class=\"built_in\">find</span>(v)==mp[u].<span class=\"built_in\">end</span>()||mp[v].<span class=\"built_in\">find</span>(u)==mp[v].<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">            edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">            edge[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">            mp[u][v]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            mp[v][u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  mp[u][v]++,mp[v][u]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[i])<span class=\"built_in\">tarjan</span>(i);<span class=\"comment\">//tarjan</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])&#123;</span><br><span class=\"line\">            sum++;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=sum;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;ans[i].<span class=\"built_in\">size</span>()&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j:ans[i])cout&lt;&lt;j&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-1-5-圆方树\">*6.1.5 圆方树</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点双的关键性质:对于一个点双中的两点，它们之间简单路径的并集，恰好完全等于这个点双。</span></span><br><span class=\"line\"><span class=\"comment\">//即同一个点双中的两不同点 u,v 之间一定存在一条简单路径经过给定的在同一个点双内的另一点 w。所以看到简单路径的时候，可以考虑圆方树</span></span><br><span class=\"line\"><span class=\"comment\">//圆方树：点双当作一个点，这个点和所有点连边形成的树，这样不同点双会靠割点联系起来形成一棵树</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span><span class=\"comment\">//交互题就删</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m, cnt;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N], low[N], dfc;</span><br><span class=\"line\"><span class=\"type\">int</span> stk[N], tp;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; G[N], T[N * <span class=\"number\">2</span>];<span class=\"comment\">//相关数组开两倍！！！</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    low[u] = dfn[u] = ++dfc; <span class=\"comment\">//dfs序</span></span><br><span class=\"line\">    stk[++tp] = u; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v : G[u]) &#123; <span class=\"comment\">// 遍历 u 的相邻节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v]) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v); low[u] = <span class=\"built_in\">min</span>(low[u], low[v]); </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v] == dfn[u]) &#123; <span class=\"comment\">// 找到一个以 u 为根的点双连通分量</span></span><br><span class=\"line\">                ++cnt; <span class=\"comment\">// 增加方点个数</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x != v; --tp) &#123;<span class=\"comment\">// 将点双中除了 u 的点退栈，并在圆方树中连边</span></span><br><span class=\"line\">                    x = stk[tp];</span><br><span class=\"line\">                    T[cnt].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">                    T[x].<span class=\"built_in\">push_back</span>(cnt);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                T[cnt].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">                T[u].<span class=\"built_in\">push_back</span>(cnt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u] = <span class=\"built_in\">min</span>(low[u], dfn[v]); <span class=\"comment\">// 已访问的和 dfn 取 min</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    cnt = n; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v); </span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理非连通图</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> u = <span class=\"number\">1</span>; u &lt;= n; ++u)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[u]) <span class=\"built_in\">tarjan</span>(u), --tp;</span><br><span class=\"line\">        <span class=\"comment\">// 注意到退出 Tarjan 时栈中还有一个元素即根，将其退栈</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"6-2-有向图连通性\">6.2 有向图连通性</h3>\n<h4 id=\"6-2-1-强连通分量\">6.2.1 强连通分量</h4>\n<p>强连通的定义是：有向图 G 强连通是指，G 中任意两个结点连通。</p>\n<p>强连通分量（Strongly Connected Components，SCC）的定义是：极大的强连通子图</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span> <span class=\"comment\">//O(n+m)</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, u, v, cnt, sum;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N], low[N], vis[N], belong[N], flag[N]; <span class=\"comment\">// belong的含义是这个点是否属于一个强连通分量，low[x] x能通过有向边能回溯到的最早时间段</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; edge[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; q[N];</span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// tarjan算法，处理x所在的连通块的强连通分量</span></span><br><span class=\"line\">    dfn[x] = low[x] = ++cnt;</span><br><span class=\"line\">    vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : edge[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i), low[x] = <span class=\"built_in\">min</span>(low[i], low[x]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!belong[i])</span><br><span class=\"line\">            low[x] = <span class=\"built_in\">min</span>(dfn[i], low[x]);</span><br><span class=\"line\">        <span class=\"comment\">// 如果这个点不属于任何一个强连通分量，说明在栈中，即需要考虑更新low值</span></span><br><span class=\"line\">        <span class=\"comment\">// 不在栈里说明不可能存在于一个强连通分量(访问过了又不在栈里，说明已经是一个强连通分量出去了)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low[x] == dfn[x])</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 回溯时把（x到栈顶的点）全归为一个强连通分量</span></span><br><span class=\"line\">        ++sum;</span><br><span class=\"line\">        q[sum].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">        vis[x] = <span class=\"number\">0</span>; <span class=\"comment\">// 退栈</span></span><br><span class=\"line\">        belong[x] = sum;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s.<span class=\"built_in\">top</span>() != x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            q[sum].<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">            belong[t] = sum;</span><br><span class=\"line\">            vis[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i);</span><br><span class=\"line\">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(q[belong[i]].<span class=\"built_in\">begin</span>(), q[belong[i]].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : q[belong[i]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                cout &lt;&lt; j &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-2-2-缩点\">6.2.2 缩点</h4>\n<p>缩点的本质就是一个环可以等效处理成一个点时，我们把旧图的每一个强连通分量当作一个点建立一个新图，并把一个环的信息全部统计到一个新点上。</p>\n<p>给定一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>个点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 条边有向图，每个点有一个权值，求一条路径，使路径经过的点权值之和最大。你只需要求出这个权值和。</p>\n<p>允许多次经过一条边或者一个点，但是，重复经过的点，权值只计算一次。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span> <span class=\"comment\">//缩点的本质就是一个环可以等效处理成一个点时，我们把旧图的每一个强连通分量当作一个点建立一个新图，并把一个环的信息全部统计到一个新点上</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, u, v, cnt, sum, k;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N], low[N], vis[N], belong[N], a[N], b[N], in[N], c[N], f[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; edge[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; out[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; inn[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; q[N];</span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">topo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sum; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!in[i])</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        c[++k] = u;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : out[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            in[j]--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!in[j])</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// tarjan算法</span></span><br><span class=\"line\">    dfn[x] = low[x] = ++cnt;</span><br><span class=\"line\">    vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : edge[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i), low[x] = <span class=\"built_in\">min</span>(low[i], low[x]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vis[i])</span><br><span class=\"line\">            low[x] = <span class=\"built_in\">min</span>(low[i], low[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low[x] == dfn[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++sum;</span><br><span class=\"line\">        q[sum].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">        vis[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        belong[x] = sum;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s.<span class=\"built_in\">top</span>() != x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            q[sum].<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">            belong[t] = sum;</span><br><span class=\"line\">            vis[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i);</span><br><span class=\"line\">    <span class=\"comment\">// 现在有sum个强连通分量，接下来将每个强连通分量的信息统计到一个点上</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sum; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : q[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            b[i] += a[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// b数组储存了每个强连通分量的权值和，统计完毕后建立新图</span></span><br><span class=\"line\">    <span class=\"comment\">// 建图时注意考虑，两个强连通分量之间可能会有多重边！！搜索时注意vis数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : edge[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (belong[i] == belong[j])</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            out[belong[i]].<span class=\"built_in\">push_back</span>(belong[j]);</span><br><span class=\"line\">            inn[belong[j]].<span class=\"built_in\">push_back</span>(belong[i]);</span><br><span class=\"line\">            in[belong[j]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">topo</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 拓扑排序来决定dp转移顺序，因为一个点的最优解是从它的所有来边转移过来的，拓扑排序决定了在处理当前点时，它的来边已经全部处理好了</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = c[i];</span><br><span class=\"line\">        f[u] = b[u];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : inn[u])</span><br><span class=\"line\">        &#123; <span class=\"comment\">// 直接转移就可以</span></span><br><span class=\"line\">            f[u] = <span class=\"built_in\">max</span>(f[u], f[j] + b[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++)</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, f[i]);</span><br><span class=\"line\">    cout &lt;&lt; ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h4 id=\"6-2-3-2-SAT适定性问题\">*6.2.3 2-SAT适定性问题</h4>\n<p>有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个布尔变量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∼</mo></mrow><annotation encoding=\"application/x-tex\">\\sim</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">∼</span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，另有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 个需要满足的条件，每个条件的形式都是 「<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为 <code>true</code> / <code>false</code> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> 为 <code>true</code> / <code>false</code>」。比如 「<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为真或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为假」、「<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>7</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为假或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为假」。</p>\n<p>2-SAT 问题的目标是给每个变量赋值使得所有条件得到满足。</p>\n<p><strong>输入格式</strong></p>\n<p>第一行两个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>，意义如题面所述。</p>\n<p>接下来 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 行每行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，表示 「<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7167em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> 为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>」(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">a, b\\in \\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>)</p>\n<p><strong>输出格式</strong></p>\n<p>如无解，输出 <code>IMPOSSIBLE</code>；否则输出 <code>POSSIBLE</code>。</p>\n<p>下一行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>∼</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_1\\sim x_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">x_i\\in\\{0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>），表示构造出的解。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\leq n, m\\leq 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*实际的问题里往往是给出一个更细致的情景，而且题干信息中</span></span><br><span class=\"line\"><span class=\"comment\">会有二选一的标志，此时可以考虑往2-sat模型上考虑。考虑过程，即</span></span><br><span class=\"line\"><span class=\"comment\">去寻找题目中的限制，把二选一等信息，转化为一个蕴含关系，即</span></span><br><span class=\"line\"><span class=\"comment\">a ⇒ b 这样的式子*/</span></span><br><span class=\"line\"><span class=\"comment\">// 其中一个不成立则另一个一定成立</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span> <span class=\"comment\">//O(n+m)</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">2e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, u, v, cnt, sum;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N], low[N], vis[N], belong[N], flag[N]; <span class=\"comment\">// belong的含义是这个点是否属于一个强连通分量，low[x] x能通过有向边能回溯到的最早时间段</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; edge[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; q[N];</span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">// tarjan算法，处理x所在的连通块的强连通分量</span></span><br><span class=\"line\">    dfn[x] = low[x] = ++cnt;</span><br><span class=\"line\">    vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : edge[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i), low[x] = <span class=\"built_in\">min</span>(low[i], low[x]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!belong[i])</span><br><span class=\"line\">            low[x] = <span class=\"built_in\">min</span>(dfn[i], low[x]);</span><br><span class=\"line\">        <span class=\"comment\">// 如果这个点不属于任何一个强连通分量，说明在栈中，即需要考虑更新low值</span></span><br><span class=\"line\">        <span class=\"comment\">// 不在栈里说明不可能存在于一个强连通分量(访问过了又不在栈里，说明已经是一个强连通分量出去了)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low[x] == dfn[x])</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 回溯时把（x到栈顶的点）全归为一个强连通分量</span></span><br><span class=\"line\">        ++sum;</span><br><span class=\"line\">        q[sum].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">        vis[x] = <span class=\"number\">0</span>; <span class=\"comment\">// 退栈</span></span><br><span class=\"line\">        belong[x] = sum;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s.<span class=\"built_in\">top</span>() != x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            q[sum].<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">            belong[t] = sum;</span><br><span class=\"line\">            vis[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[a].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, x, y;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; x; <span class=\"comment\">// 第a个数为x或第b个数为y</span></span><br><span class=\"line\">        cin &gt;&gt; b &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span> &amp;&amp; y == <span class=\"number\">0</span>) <span class=\"comment\">//&quot;如果第a个数为0或第b个数为0&quot;至少满足其一</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a + n, b); <span class=\"comment\">// a=1则b=0</span></span><br><span class=\"line\">            <span class=\"built_in\">add</span>(b + n, a); <span class=\"comment\">// b=1则a=0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span> &amp;&amp; y == <span class=\"number\">1</span>) <span class=\"comment\">//&quot;如果第a个数为0或第b个数为1&quot;至少满足其一</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a + n, b + n); <span class=\"comment\">// a=1则b=1</span></span><br><span class=\"line\">            <span class=\"built_in\">add</span>(b, a);         <span class=\"comment\">// b=0则a=0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> &amp;&amp; y == <span class=\"number\">0</span>) <span class=\"comment\">//&quot;如果第a个数为1或第b个数为0&quot;至少满足其一</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a, b);         <span class=\"comment\">// a=0则b=0</span></span><br><span class=\"line\">            <span class=\"built_in\">add</span>(b + n, a + n); <span class=\"comment\">// b=1则a=1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">1</span> &amp;&amp; y == <span class=\"number\">1</span>) <span class=\"comment\">//&quot;如果第a个数为1或第b个数为1&quot;至少满足其一</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(a, b + n); <span class=\"comment\">// a=0则b=1</span></span><br><span class=\"line\">            <span class=\"built_in\">add</span>(b, a + n); <span class=\"comment\">// b=0则a=1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i); <span class=\"comment\">// 两倍</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (belong[i] == belong[i + n]) <span class=\"comment\">// 同一变量的两种取值在同一强联通分量里,说明无解</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;POSSIBLE&quot;</span> &lt;&lt; endl; <span class=\"comment\">// 否则就是有解</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (belong[i] &gt; belong[i + n])</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>; <span class=\"comment\">// 两种取值中选择拓扑序较大的那个值，而强联通分量编号越小 -&gt; 拓扑序越大 -&gt; 越优</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"7-基环树\">*7. 基环树</h2>\n<p>基环树，只有一个环的树，边数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 暴力删边</span></span><br><span class=\"line\"><span class=\"comment\">//每次断开环上的一条边跑一遍答案，然后取最大值  适用于:数据较小，且环不会影响答案的题目</span></span><br><span class=\"line\"><span class=\"comment\">//eg：旅行，每次的旅行一定是走n-1条边，直接暴力枚举删掉某一条边，跑一次答案 ，n^2过</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span><span class=\"comment\">//交互题就删</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">2e5</span><span class=\"number\">+10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,x[N],y[N],ans[N],cnt,tx,ty,sum[N],vis[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;edge[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    ans[++cnt]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=fa)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    sum[++cnt]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=fa)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i==tx&amp;&amp;u==ty)||(i==ty&amp;&amp;u==tx)||vis[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(i,u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum[i]==ans[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sum[i]&gt;ans[i])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> u,v,i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;u&gt;&gt;v;</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        edge[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">        x[i]=u;y[i]=v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(edge[i].<span class=\"built_in\">begin</span>(),edge[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m==n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">            cout&lt;&lt;ans[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">        tx=x[i],ty=y[i];cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt&lt;n)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[<span class=\"number\">1</span>]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)ans[j]=sum[j];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>())</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)ans[j]=sum[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        cout&lt;&lt;ans[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2. 断边跑两次</span></span><br><span class=\"line\"><span class=\"comment\">//骑士，每个人有个讨厌的人，那么就是n个点n条边，形成了基环树，注意到环上的某一条边，意味着u和v不能同时选，我们计算两种情况，选u和选v</span></span><br><span class=\"line\"><span class=\"comment\">//等价于强制隔开这两个人各自选一次</span></span><br><span class=\"line\"><span class=\"comment\">//正确性：每个人只有一个讨厌的人，那么最终情况一定是，要么有他，要么有他讨厌的人，不可能都没有，所以跑两次是正确的</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 1000010</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> w[N],d[N],n,vis[N],flag,f[N][<span class=\"number\">2</span>],ans;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;edge[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    f[u][<span class=\"number\">0</span>]=<span class=\"number\">0</span>;f[u][<span class=\"number\">1</span>]=w[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i!=flag)&#123;<span class=\"comment\">//不能dp回根</span></span><br><span class=\"line\">            <span class=\"built_in\">dp</span>(i);</span><br><span class=\"line\">            f[u][<span class=\"number\">0</span>]+=<span class=\"built_in\">max</span>(f[i][<span class=\"number\">0</span>],f[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">            f[u][<span class=\"number\">1</span>]+=f[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[d[u]])flag=u;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">dfs</span>(d[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> u,v,i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;w[i]&gt;&gt;d[i];</span><br><span class=\"line\">        edge[d[i]].<span class=\"built_in\">push_back</span>(i);<span class=\"comment\">//存的是仇恨他的人有哪些</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">        <span class=\"comment\">//现在已经找到了一个环上的一条边:flag 和 d[flag]</span></span><br><span class=\"line\">        <span class=\"comment\">//我们强制其中一个点不选</span></span><br><span class=\"line\">        <span class=\"built_in\">dp</span>(flag);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans1=f[flag][<span class=\"number\">0</span>];<span class=\"comment\">//不选flag</span></span><br><span class=\"line\">        flag=d[flag];</span><br><span class=\"line\">        <span class=\"built_in\">dp</span>(flag);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans2=f[flag][<span class=\"number\">0</span>];<span class=\"comment\">//不选d[flag]</span></span><br><span class=\"line\">        ans+=<span class=\"built_in\">max</span>(ans1,ans2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h1>Part 5. 字符串</h1>\n<p><em><strong>强制规定：所有与字符串相关的数组下标或者函数接口如果未特殊说明，都是从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>开始。</strong></em></p>\n<h2 id=\"1-字符串哈希（双哈希）\">1.字符串哈希（双哈希）</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"type\">int</span> m1, <span class=\"type\">int</span> mod1, <span class=\"type\">int</span> m2, <span class=\"type\">int</span> mod2&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Stringhashs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    vector&lt;i64&gt; h1, h2, mi1, mi2;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;n = n;</span><br><span class=\"line\">        h<span class=\"number\">1.</span><span class=\"built_in\">resize</span>(n + <span class=\"number\">10</span>);  <span class=\"comment\">// h1[i]表示前i个字符的哈希值，注意哈希数组是从1开始的</span></span><br><span class=\"line\">        h<span class=\"number\">2.</span><span class=\"built_in\">resize</span>(n + <span class=\"number\">10</span>);  <span class=\"comment\">// h2[i]表示前i个字符的哈希值</span></span><br><span class=\"line\">        mi<span class=\"number\">1.</span><span class=\"built_in\">resize</span>(n + <span class=\"number\">10</span>); <span class=\"comment\">// mi1[i]表示m1^i,哈希模数</span></span><br><span class=\"line\">        mi<span class=\"number\">2.</span><span class=\"built_in\">resize</span>(n + <span class=\"number\">10</span>); <span class=\"comment\">// mi2[i]表示m2^i,哈希模数</span></span><br><span class=\"line\">        mi1[<span class=\"number\">0</span>] = mi2[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mi1[i] = (i64)mi1[i - <span class=\"number\">1</span>] * m1 % mod1;</span><br><span class=\"line\">            mi2[i] = (i64)mi2[i - <span class=\"number\">1</span>] * m2 % mod2;</span><br><span class=\"line\">            h1[i] = ((i64)h1[i - <span class=\"number\">1</span>] * m1 + s[i - <span class=\"number\">1</span>]) % mod1;</span><br><span class=\"line\">            h2[i] = ((i64)h2[i - <span class=\"number\">1</span>] * m2 + s[i - <span class=\"number\">1</span>]) % mod2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(s.<span class=\"built_in\">size</span>() &lt;= n);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;s = s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h1[i + <span class=\"number\">1</span>] = ((i64)h1[i] * m1 % mod1 + s[i]) % mod1;</span><br><span class=\"line\">            h2[i + <span class=\"number\">1</span>] = ((i64)h2[i] * m2 % mod2 + s[i]) % mod2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">array&lt;<span class=\"type\">int</span>, 2&gt; <span class=\"title\">queryfullhash</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> h1 = <span class=\"number\">0</span>, h2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            h1 = ((i64)h1 * m1 % mod1 + s[i]) % mod1;</span><br><span class=\"line\">            h2 = ((i64)h2 * m2 % mod2 + s[i]) % mod2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;h1, h2&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">array&lt;<span class=\"type\">int</span>, 2&gt; <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; n &amp;&amp; l &lt;= r);</span><br><span class=\"line\">        l++, r++;</span><br><span class=\"line\">        <span class=\"type\">int</span> h1 = ((<span class=\"keyword\">this</span>-&gt;h1[r] - (i64)<span class=\"keyword\">this</span>-&gt;h1[l - <span class=\"number\">1</span>] * mi1[r - l + <span class=\"number\">1</span>] % mod1) % mod1 + mod1) % mod1;</span><br><span class=\"line\">        <span class=\"type\">int</span> h2 = ((<span class=\"keyword\">this</span>-&gt;h2[r] - (i64)<span class=\"keyword\">this</span>-&gt;h2[l - <span class=\"number\">1</span>] * mi2[r - l + <span class=\"number\">1</span>] % mod2) % mod2 + mod2) % mod2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;h1, h2&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod1 = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>, mod2 = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> hashs = Stringhashs&lt;<span class=\"number\">131</span>, mod1, <span class=\"number\">13331</span>, mod2&gt;;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"2-KMP字符串匹配\">2.KMP字符串匹配</h2>\n<p>适配：文本串固定<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>，多个主串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>，询问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>中出现的次数。时间复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>T</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mo>∑</mo><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(|T|+\\sum |S|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"2-1-前缀函数与nxt数组\">2.1 前缀函数与nxt数组</h3>\n<p>前缀函数定义：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\pi[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>表示<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">s.substr(0,i+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>中公共前后缀的长度。即有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mi>π</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[0,\\cdots,\\pi[i]-1]=s[i-\\pi[i]+1,\\cdots,i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>。</p>\n<p>规定长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>的字符串前缀函数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">prefix_function</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n = (<span class=\"type\">int</span>)s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">  <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pi</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = pi[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; s[i] != s[j]) j = pi[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == s[j]) j++;</span><br><span class=\"line\">    pi[i] = j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pi;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基于此维护的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi><mtext> </mtext><mi>n</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">KMP\\ nxt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">MP</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span></span></span></span>数组就是方便寻找失配之后下一个配对的位置：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">nxt[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; T.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &amp;&amp; T[i] != T[j])</span><br><span class=\"line\">                j = nxt[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T[i] == T[j])</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            nxt[i] = j;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-KMP字符串模式匹配算法\">2.2 KMP字符串模式匹配算法</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">KMP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">MP</span></span></span></span>算法的精髓在于当前匹配失配之后模式串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>的指针跳到哪里开始重新匹配的问题。因为已匹配部分保证了两段相同，那么只需要跳到公共前后缀的前缀后一位继续匹配就行了。前缀函数是对模式串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>求解的。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">KMP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">MP</span></span></span></span>匹配思想不只局限于字符串匹配，与匹配有关的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>题也会利用到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">nxt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span></span></span></span>数组的思想来优化<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">KMP</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string T;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; nxt;</span><br><span class=\"line\">    <span class=\"built_in\">KMP</span>(string T) : <span class=\"built_in\">T</span>(T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nxt.<span class=\"built_in\">resize</span>(T.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        nxt[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; T.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &amp;&amp; T[i] != T[j])</span><br><span class=\"line\">                j = nxt[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (T[i] == T[j])</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            nxt[i] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">match</span><span class=\"params\">(string S)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; S.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &amp;&amp; S[i] != T[j])</span><br><span class=\"line\">                j = nxt[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (S[i] == T[j])</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == T.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res.<span class=\"built_in\">push_back</span>(i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                j = nxt[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>示例1:<strong>2024湖南省赛 经文</strong></p>\n<p>题目大意：有一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">n\\le 1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1000</span></span></span></span>的空串和长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">t\\le 100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span>的模式串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>，询问有多少用小写英文字母填充空串的方案数，使得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>于其中不相交的出现精准<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>次。</p>\n<p>设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mi>l</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">dp_{i,j,l}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>表示前<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>个字符已经匹配了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>个完整文本串，现在正在匹配<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>位置的方案数。枚举<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">26</span></span></span></span>个小写字母，初始匹配指针<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo>=</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">pre=l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span></p>\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>=</mo><mi>c</mi><mi>h</mi><mi>a</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">s[pre]==char</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">==</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">ha</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>，则直接有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[i][j][pre+1]+=dp[i][j][l]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mord\">+</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span></span></span></span>，满一个则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>进位。</p>\n<p>如果该字符导致了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">fail</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>匹配，则类似<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">KMP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">MP</span></span></span></span>跳转<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo>=</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre=nxt[pre-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>，继续下一个位置的匹配，直到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">pre=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">pre=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>都未能匹配，则说明下一个位置只能从头开始。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> pre = l; <span class=\"number\">1</span>; pre = nxt[pre - <span class=\"number\">1</span>])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[pre] == <span class=\"string\">&#x27;a&#x27;</span> + m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre == sz - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt;= k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>][<span class=\"number\">0</span>] += dp[i][j][l];</span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>][<span class=\"number\">0</span>] %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[i + <span class=\"number\">1</span>][j][pre + <span class=\"number\">1</span>] += dp[i][j][l];</span><br><span class=\"line\">            dp[i + <span class=\"number\">1</span>][j][pre + <span class=\"number\">1</span>] %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pre)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> sz = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nxt</span><span class=\"params\">(sz)</span></span>;</span><br><span class=\"line\">    nxt[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; sz; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &amp;&amp; s[i] != s[j])</span><br><span class=\"line\">            j = nxt[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == s[j])</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        nxt[i] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;vector&lt;i64&gt;&gt;&gt; <span class=\"built_in\">dp</span>(n + <span class=\"number\">1</span>, vector&lt;vector&lt;i64&gt;&gt;(k + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;i64&gt;(sz + <span class=\"number\">1</span>)));</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)              <span class=\"comment\">// 前i个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= k; j++)         <span class=\"comment\">// 已经匹配了j个</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> l = <span class=\"number\">0</span>; l &lt; sz; l++)     <span class=\"comment\">// 正在匹配第l个</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> m = <span class=\"number\">0</span>; m &lt; <span class=\"number\">26</span>; m++) <span class=\"comment\">// 枚举字符</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> pre = l; <span class=\"number\">1</span>; pre = nxt[pre - <span class=\"number\">1</span>])</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (s[pre] == <span class=\"string\">&#x27;a&#x27;</span> + m)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (pre == sz - <span class=\"number\">1</span>)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt;= k)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>][<span class=\"number\">0</span>] += dp[i][j][l];</span><br><span class=\"line\">                                    dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>][<span class=\"number\">0</span>] %= mod;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dp[i + <span class=\"number\">1</span>][j][pre + <span class=\"number\">1</span>] += dp[i][j][l];</span><br><span class=\"line\">                                dp[i + <span class=\"number\">1</span>][j][pre + <span class=\"number\">1</span>] %= mod;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!pre)</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!flag)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dp[i + <span class=\"number\">1</span>][j][<span class=\"number\">0</span>] += dp[i][j][l];</span><br><span class=\"line\">                        dp[i + <span class=\"number\">1</span>][j][<span class=\"number\">0</span>] %= mod;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    i64 ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += dp[n][k][i];</span><br><span class=\"line\">        ans %= mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"3-字典树Trie\">3. 字典树Trie</h3>\n<p>写法见数据结构部分<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>01</mn></mrow><annotation encoding=\"application/x-tex\">01</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">01</span></span></span></span>Trie,没有本质区别。</p>\n<h3 id=\"4-Manacher马拉车算法\">4. Manacher马拉车算法</h3>\n<p>一种非常优秀的以线性时间复杂度求解字符串中最长回文子串的算法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">manacher</span><span class=\"params\">(string t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    s.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;$&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; t.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;#&#x27;</span>);</span><br><span class=\"line\">        s.<span class=\"built_in\">push_back</span>(t[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;#&#x27;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">d</span><span class=\"params\">(s.size() + <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    d[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// d[i]代表i为中心的最大半径-1,也表示原回文串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= r)</span><br><span class=\"line\">            d[i] = <span class=\"built_in\">min</span>(d[l + r - i], r - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s[i + d[i]] == s[i - d[i]])</span><br><span class=\"line\">            d[i]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[i] + i - <span class=\"number\">1</span> &gt; r)</span><br><span class=\"line\">            r = d[i] + i - <span class=\"number\">1</span>, l = i - d[i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, d[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"5-AC自动机\">5. AC自动机</h3>\n<p>与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">KMP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">MP</span></span></span></span>互补，本质依旧是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">KMP</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">MP</span></span></span></span>，实现的是多模式串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>→</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_1\\to T_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>匹配唯一主串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>​.复杂度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo>∑</mo><mi mathvariant=\"normal\">∣</mi><msub><mi>T</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2\\sum|T_i|+|S|)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>字典树上构建<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Fail</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>指针的思路与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">nxt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span></span></span></span>数组极其相似。考虑本模板中如果有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo mathvariant=\"normal\">≠</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]\\neq s[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>=</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">j=nxt[j-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>含义为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>匹配失败后所跳跃的位置。<strong>第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>个失配了，肯定要跳跃<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>的下一个适配点，也就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">nxt[j-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></strong></p>\n<p>考虑字典树中，如果结点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>失配，意味着结点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>的所有儿子都不适配下一个字符，但是结点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>的父亲是适配上一个字符的，所以我们要去跳转下一个对应上一个字符的结点，这个就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>结点父亲所指向的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Fail</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>​结点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> Fail = trie[u].fail;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> v = trie[u].son[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        trie[u].son[i] = trie[Fail].son[i];</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trie[v].fail = trie[Fail].son[i];</span><br><span class=\"line\">    in[trie[v].fail]++;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是模板，每重新一次新主串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>都要重新跳一遍<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">Fail</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>指针。</p>\n<p>版本1：（只求有多少个文本串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>于主串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>中出现过）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建字典图实现自动跳转，构建失配指针实现多模式匹配。</span></span><br><span class=\"line\"><span class=\"comment\">// 本题AC自动机解决求有多少个不同的模式串在文本串里出现过，且两个模式串不同当且仅当他们编号不同；</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> N = <span class=\"number\">1</span> * <span class=\"number\">1e6</span> + <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> t[N][<span class=\"number\">30</span>], idx, q; <span class=\"comment\">// t[i][j]:表示一个节点，父节点的编号为I,自己的字符是j，idx是节点总数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> cnt[N];           <span class=\"comment\">// 记录以这个点为结尾有几个单词</span></span><br><span class=\"line\">    <span class=\"type\">int</span> fail[N];          <span class=\"comment\">// 失配指针，从i跳到j就说明，word(j)是i的最长后缀！！</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getnum</span><span class=\"params\">(<span class=\"type\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 字符转为数字</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ch - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;                              <span class=\"comment\">// 插入</span></span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"number\">0</span>, len = s.<span class=\"built_in\">size</span>(); <span class=\"comment\">// 从0节点开始</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> c = <span class=\"built_in\">getnum</span>(s[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!t[p][c])</span><br><span class=\"line\">                t[p][c] = ++idx; <span class=\"comment\">// 创建节点</span></span><br><span class=\"line\">            p = t[p][c];         <span class=\"comment\">// 把父节点更改为上个节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cnt[p]++; <span class=\"comment\">// 以该点为结尾的单词数量，因为不保证模式串一致</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(fail, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(fail));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t[<span class=\"number\">0</span>][i])</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(t[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">        <span class=\"comment\">// 根节点的首字符入队</span></span><br><span class=\"line\">        <span class=\"comment\">// 不直接将0入队是为了避免指向自己</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>(); <span class=\"comment\">// 当前结点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t[k][i])</span><br><span class=\"line\">                &#123;                                  <span class=\"comment\">// 如果子节点存在</span></span><br><span class=\"line\">                    fail[t[k][i]] = t[fail[k]][i]; <span class=\"comment\">// 构建当前的fail指针</span></span><br><span class=\"line\">                    <span class=\"comment\">// 原理，上一层的fail已经求出，例如上一层为her，自己是s，r的fail指向了er，若r有这个子节点s，由于er是her的最长后缀，那么ers必然是hers的最长后缀。</span></span><br><span class=\"line\">                    <span class=\"comment\">// 另外结合else的代码 ，原本按道理如果没有s这个节点应不断跳fail，但这里为什么不用呢？因为如果跳完fail的话能换到一条链，则else的代码能够帮助一步跳过去所以可以一步，如果不能，则赋值为0，同样也是根节点，完美</span></span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(t[k][i]); <span class=\"comment\">// 入队</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    t[k][i] = t[fail[k]][i];</span><br><span class=\"line\">                <span class=\"comment\">// 匹配到空字符，则索引到父节点fail指针对应的字符，以供后续指针的构建</span></span><br><span class=\"line\">                <span class=\"comment\">// 类似并差集的路径压缩，把不存在的tr[k][i]全部指向tr[fail[k]][i]</span></span><br><span class=\"line\">                <span class=\"comment\">// 这句话在后面匹配主串的时候也能帮助跳转</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryy</span><span class=\"params\">(string S)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> len = S.<span class=\"built_in\">size</span>(), p = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = t[p][<span class=\"built_in\">getnum</span>(S[i])];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = p; j &amp;&amp; ~cnt[j]; j = fail[j])</span><br><span class=\"line\">                ans += cnt[j], cnt[j] = <span class=\"number\">-1</span>; <span class=\"comment\">// 答案加上结尾，cnt[j]=-1就是以后别在统计这里相关的了，防止重复</span></span><br><span class=\"line\">            <span class=\"comment\">// 这个点开始跳fail数组，求得与之相关的后缀的单词有没有</span></span><br><span class=\"line\">            <span class=\"comment\">// 分析j&amp;&amp;~cnt[j]:只有=-1时取反才是0，所以结束条件为跳到根节点（j=0）或者到达了求过的点</span></span><br><span class=\"line\">            <span class=\"comment\">// 因为本题要求有多少个模式串出现过，所以不能重复贡献</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">AC ac;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        ac.<span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ac.<span class=\"built_in\">build</span>();</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    cout &lt;&lt; ac.<span class=\"built_in\">queryy</span>(s) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<p>版本2：返回每一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>​的出现次数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, cnt = <span class=\"number\">1</span>, vis[maxn], ans, in[maxn &lt;&lt; <span class=\"number\">5</span>], Map[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Trie</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> son[<span class=\"number\">26</span>], fail, flag, ans;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">memset</span>(son, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(son)), fail = flag = ans = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    &#125; trie[maxn &lt;&lt; <span class=\"number\">5</span>];</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> _n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">            trie[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">        n = _n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(string t, <span class=\"type\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = <span class=\"number\">1</span>, len = t.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = t[i] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!trie[u].son[v])</span><br><span class=\"line\">                trie[u].son[v] = ++cnt;</span><br><span class=\"line\">            u = trie[u].son[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!trie[u].flag)</span><br><span class=\"line\">            trie[u].flag = num;</span><br><span class=\"line\">        Map[num] = trie[u].flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getFail</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">            trie[<span class=\"number\">0</span>].son[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> Fail = trie[u].fail;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> v = trie[u].son[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!v)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    trie[u].son[i] = trie[Fail].son[i];</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                trie[v].fail = trie[Fail].son[i];</span><br><span class=\"line\">                in[trie[v].fail]++;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">topu</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cnt; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            vis[trie[u].flag] = trie[u].ans;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = trie[u].fail;</span><br><span class=\"line\">            in[v]--;</span><br><span class=\"line\">            trie[v].ans += trie[u].ans;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in[v] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">query</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = <span class=\"number\">1</span>, len = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">            u = trie[u].son[s[i] - <span class=\"string\">&#x27;a&#x27;</span>], trie[u].ans++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">querys</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">query</span>(s);</span><br><span class=\"line\">        <span class=\"built_in\">topu</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            res.<span class=\"built_in\">push_back</span>(vis[Map[i]]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">AC ac;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    ac.<span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string t;</span><br><span class=\"line\">        cin &gt;&gt; t;</span><br><span class=\"line\">        ac.<span class=\"built_in\">insert</span>(t, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ac.<span class=\"built_in\">getFail</span>();</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> res = ac.<span class=\"built_in\">querys</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : res)</span><br><span class=\"line\">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"6-后缀数组SA\">6. 后缀数组SA</h3>\n<p><em><strong>Warning: 此处SA数组的字符串下标定义是从1开始的！</strong></em></p>\n<p>后缀数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">sa[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>表示的是字典序排名第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>小的后缀是原来字符串中哪一个后缀。</p>\n<p>排名数组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>k</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">rk[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>表示原来字符串的后缀中第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>个后缀是多少字典序。</p>\n<p>第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>个后缀的定义：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>⋯</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i\\cdots n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>求法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SufArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">static</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1e6</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"comment\">// rk[i] i 的排名  sa[i] 第i名</span></span><br><span class=\"line\">    <span class=\"comment\">// 字符串的序号  +k 就是往后走k个</span></span><br><span class=\"line\">    <span class=\"type\">int</span> rk[maxn + <span class=\"number\">10</span>], sa[maxn + <span class=\"number\">10</span>], n, lstrk[maxn + <span class=\"number\">10</span>], lstsa[maxn], w,</span><br><span class=\"line\">        m = <span class=\"number\">127</span>, cnt[maxn], h[maxn], f[maxn][<span class=\"number\">20</span>];</span><br><span class=\"line\">    string s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> siz n * sizeof(int)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(string _s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        s = _s;</span><br><span class=\"line\">        m = <span class=\"number\">127</span>;</span><br><span class=\"line\">        n = s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> cnt);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(sa, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> sa);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(rk, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> rk);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(h, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">            ++cnt[rk[i] = s[i - <span class=\"number\">1</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">            cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">            sa[cnt[rk[i]]--] = i;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(lstrk + <span class=\"number\">1</span>, rk + <span class=\"number\">1</span>, siz);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>, i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lstrk[sa[i]] == lstrk[sa[i - <span class=\"number\">1</span>]])</span><br><span class=\"line\">                rk[sa[i]] = p;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                rk[sa[i]] = ++p;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (w = <span class=\"number\">1</span>; w &lt; n; w &lt;&lt;= <span class=\"number\">1</span>, m = n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>, i = n; i &gt;= n - w + <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">                lstsa[++p] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = w, i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sa[i] &gt; w)</span><br><span class=\"line\">                    lstsa[++p] = sa[i] - w;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> cnt);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">                ++cnt[rk[lstsa[i]]];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">                cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; --i)</span><br><span class=\"line\">                sa[cnt[rk[lstsa[i]]]--] = lstsa[i];</span><br><span class=\"line\">            <span class=\"built_in\">memcpy</span>(lstrk + <span class=\"number\">1</span>, rk + <span class=\"number\">1</span>, siz);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> p = <span class=\"number\">0</span>, i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lstrk[sa[i]] == lstrk[sa[i - <span class=\"number\">1</span>]] &amp;&amp; lstrk[sa[i] + w] == lstrk[sa[i - <span class=\"number\">1</span>] + w])</span><br><span class=\"line\">                    rk[sa[i]] = p;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    rk[sa[i]] = ++p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, k = <span class=\"number\">0</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rk[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k)</span><br><span class=\"line\">                --k;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s[i + k - <span class=\"number\">1</span>] == s[sa[rk[i] - <span class=\"number\">1</span>] + k - <span class=\"number\">1</span>])</span><br><span class=\"line\">                ++k;</span><br><span class=\"line\">            h[rk[i]] = k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(f, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> f);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">            f[i][<span class=\"number\">0</span>] = h[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; (<span class=\"number\">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">                f[i][j] = <span class=\"built_in\">min</span>(f[i][j - <span class=\"number\">1</span>], f[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lcp</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; <span class=\"comment\">// 后缀x和后缀y的最长公共前缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == y)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n - y + <span class=\"number\">1</span>;</span><br><span class=\"line\">        x = rk[x], y = rk[y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt;= y)</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"built_in\">log2</span>(y - (x + <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(f[x + <span class=\"number\">1</span>][k], f[y - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; SA;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    SA.<span class=\"built_in\">init</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= SA.n; i++)</span><br><span class=\"line\">        cout &lt;&lt; SA.sa[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 1; i &lt;= SA.n; i++)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; SA.h[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"7-SA数组-线性SA-IS\">7. SA数组(线性SA-IS)</h3>\n<p><strong>Warning：此处SA数组以及height数组是从0开始的</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SA</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; sa, rk;</span><br><span class=\"line\">    vector&lt;i64&gt; h;</span><br><span class=\"line\">    <span class=\"built_in\">SA</span>(string s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        s.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        sa.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        h.<span class=\"built_in\">resize</span>(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        rk.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">iota</span>(sa.<span class=\"built_in\">begin</span>(), sa.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(sa.<span class=\"built_in\">begin</span>(), sa.<span class=\"built_in\">end</span>(), [&amp;](<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span><br><span class=\"line\">             &#123; <span class=\"keyword\">return</span> s[a] &lt; s[b]; &#125;);</span><br><span class=\"line\">        rk[sa[<span class=\"number\">0</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rk[sa[i]] = rk[sa[i - <span class=\"number\">1</span>]] + (s[sa[i]] != s[sa[i - <span class=\"number\">1</span>]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; tmp, <span class=\"built_in\">cnt</span>(n);</span><br><span class=\"line\">        tmp.<span class=\"built_in\">reserve</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rk[sa[n - <span class=\"number\">1</span>]] &lt; n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tmp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                tmp.<span class=\"built_in\">push_back</span>(n - k + i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : sa)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt;= k)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    tmp.<span class=\"built_in\">push_back</span>(i - k);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">fill</span>(cnt.<span class=\"built_in\">begin</span>(), cnt.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++cnt[rk[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sa[--cnt[rk[tmp[i]]]] = tmp[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(rk, tmp);</span><br><span class=\"line\">            rk[sa[<span class=\"number\">0</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                rk[sa[i]] = rk[sa[i - <span class=\"number\">1</span>]] + (tmp[sa[i - <span class=\"number\">1</span>]] &lt; tmp[sa[i]] || sa[i - <span class=\"number\">1</span>] + k == n || tmp[sa[i - <span class=\"number\">1</span>] + k] &lt; tmp[sa[i] + k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rk[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                j = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j -= j &gt; <span class=\"number\">0</span>; i + j &lt; n &amp;&amp; sa[rk[i] - <span class=\"number\">1</span>] + j &lt; n &amp;&amp; s[i + j] == s[sa[rk[i] - <span class=\"number\">1</span>] + j];)</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            h[rk[i] - <span class=\"number\">1</span>] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"function\">SA <span class=\"title\">sa</span><span class=\"params\">(s)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">        cout &lt;&lt; sa.sa[i] + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"8-后缀自动机SAM\">8. 后缀自动机SAM</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>A</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">SAM</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>自动机是一种压缩子串信息的自动机，可以在线性时间内解决以下问题：</p>\n<ul>\n<li>在另一个字符串中搜索一个字符串的所有出现位置。</li>\n<li>计算给定的字符串中有多少个不同的子串。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SAM</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//root是1</span></span><br><span class=\"line\">    <span class=\"type\">int</span> size, last, len[N &lt;&lt; <span class=\"number\">1</span>], fa[N &lt;&lt; <span class=\"number\">1</span>], tr[N &lt;&lt; <span class=\"number\">1</span>][<span class=\"number\">31</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> nxt[N &lt;&lt; <span class=\"number\">1</span>], head[N &lt;&lt; <span class=\"number\">1</span>], to[N &lt;&lt; <span class=\"number\">1</span>], ecnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt[N &lt;&lt; <span class=\"number\">1</span>], first_pos[N &lt;&lt; <span class=\"number\">1</span>], is_clone[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sfor(x, i) for(int i = 0; i &lt;= 30; ++i) <span class=\"keyword\">if</span>(tr[x][i])</span></span><br><span class=\"line\">    <span class=\"built_in\">SAM</span>() &#123;</span><br><span class=\"line\">        size = last = ecnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cur = ++ size,u;</span><br><span class=\"line\">        cnt[cur] = <span class=\"number\">1</span>, first_pos[cur] = len[cur] = len[last] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(u = last; u &amp;&amp; !tr[u][x]; u = fa[u]) tr[u][x] = cur;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!u) fa[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = tr[u][x];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len[v] == len[u] + <span class=\"number\">1</span>) fa[cur] = v;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> clone = ++ size;</span><br><span class=\"line\">                len[clone] = len[u] + <span class=\"number\">1</span>, fa[clone] = fa[v], first_pos[clone] = first_pos[v], is_clone[clone] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(tr[clone], tr[v], <span class=\"built_in\">sizeof</span>(tr[v]));<span class=\"comment\">//时间复杂度在这个地方</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(; u &amp;&amp; tr[u][x] == v; u = fa[u]) tr[u][x] = clone;</span><br><span class=\"line\">                fa[cur] = fa[v] = clone;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last = cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cnt数组表示endpos的大小，默认是真实大小</span></span><br><span class=\"line\">    <span class=\"comment\">//d数组表示下面可以走多少路径，默认和endpos集合大小有关</span></span><br><span class=\"line\">    <span class=\"comment\">//每个结点的endpos集合起始就是终点结点的endpos的集合</span></span><br><span class=\"line\"><span class=\"comment\">//=========================================建树=========================================</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        nxt[++ecnt] = head[x], to[ecnt] = y, head[x] = ecnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build_tree</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= size; ++i) <span class=\"built_in\">add</span>(fa[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//===========================================求occ=========================================</span></span><br><span class=\"line\">    <span class=\"type\">int</span> pos[N &lt;&lt; <span class=\"number\">1</span>], f[N &lt;&lt; <span class=\"number\">1</span>][<span class=\"number\">20</span>];<span class=\"comment\">//pos代表s[1...r]对应的结点</span></span><br><span class=\"line\">    <span class=\"comment\">//调用的时候pos[r] = extend(s[r] - &#x27;a&#x27; + 1);</span></span><br><span class=\"line\">    <span class=\"comment\">//调用时先建树 并求得cnt</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_f</span><span class=\"params\">(<span class=\"type\">int</span> x = <span class=\"number\">1</span>)</span></span>&#123;<span class=\"comment\">//遍历后缀链接树</span></span><br><span class=\"line\">        f[x][<span class=\"number\">0</span>] = fa[x];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">19</span>; ++i) f[x][i] = f[f[x][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[x]; i; i = nxt[i]) <span class=\"keyword\">if</span>(fa[x] != to[i]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">get_f</span>(to[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">node</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> now = pos[r];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">19</span>; i &gt;= <span class=\"number\">0</span>; --i) <span class=\"keyword\">if</span>(len[f[now][i]] &gt;= r-l<span class=\"number\">+1</span>) now = f[now][i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> now;<span class=\"comment\">//找到l...r所在的结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">occ</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnt[<span class=\"built_in\">node</span>(l, r)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//==========================================求结点的cnt=======================================</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Get_cnt</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[x]; i; i = nxt[i]) <span class=\"built_in\">Get_cnt</span>(to[i]), cnt[x] += cnt[to[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用时先建树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_cnt</span><span class=\"params\">(<span class=\"type\">int</span> type = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == <span class=\"number\">0</span>) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= size; ++i) cnt[i] = <span class=\"number\">1</span>;    <span class=\"comment\">//不同位置的子串算作一个 强制每个子串只出现一次</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">Get_cnt</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">endpos</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; ep;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> now = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!is_clone[now])  <span class=\"comment\">//是终点结点</span></span><br><span class=\"line\">                ep.<span class=\"built_in\">push_back</span>(first_pos[now]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[now]; i; i = nxt[i])</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(to[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ep;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历后缀树：用图那一套 从1开始 //遍历后缀自动机：从1开始用tr转移</span></span><br><span class=\"line\">    ll d[N], ans[N];<span class=\"comment\">//d记录了从x开始往下有几条路径 ans记录了从x开始，往下所有路径上不同子串的总长度。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_d</span><span class=\"params\">(<span class=\"type\">int</span> x = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[x]) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        d[x] = cnt[x];</span><br><span class=\"line\">        <span class=\"built_in\">sfor</span>(x, i) <span class=\"built_in\">get_d</span>(tr[x][i]), d[x] += d[tr[x][i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">debug</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;--------Debug_SAM--------&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= size; ++i)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;, endpos_size = &quot;</span> &lt;&lt; cnt[i] &lt;&lt; <span class=\"string\">&quot;, fa = &quot;</span> &lt;&lt; fa[i] &lt;&lt; <span class=\"string\">&quot;, len = &quot;</span> &lt;&lt; len[i] &lt;&lt; <span class=\"string\">&quot;, d = &quot;</span> &lt;&lt; d[i] &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= size; ++i) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; can trans to &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">sfor</span>(i, j)  cout &lt;&lt; tr[i][j] &lt;&lt; <span class=\"string\">&quot; by &quot;</span> &lt;&lt; <span class=\"built_in\">char</span>(j + <span class=\"string\">&#x27;a&#x27;</span> - <span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;--------End_Debug--------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; sam;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h1>Part 6. 动态规划</h1>\n<h2 id=\"1-sosdp（高维前缀和dp\">1. sosdp（高维前缀和dp)</h2>\n<p>对于所有的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0≤i≤2^n−1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7955em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>,求解<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>j</mi><mo>⊂</mo><mi>i</mi></mrow></msub><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">∑_{j⊂i}a_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1858em;vertical-align:-0.4358em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">⊂</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4358em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>。</p>\n<p>以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>的复杂度管理子集前缀和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>​。</p>\n<p>子集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>对应是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>的位置，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>必须对应为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span> &lt;&lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;&gt; j &amp; <span class=\"number\">1</span>) f[i] += f[i ^ (<span class=\"number\">1</span> &lt;&lt; j)];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>超集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>对应是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>的位置，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>必须对应<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span> &lt;&lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(i &gt;&gt; j &amp; <span class=\"number\">1</span>)) f[i] += f[i ^ (<span class=\"number\">1</span> &lt;&lt; j)];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示例1：（2024湖南省赛）</p>\n<p>给出一个长度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>的正整数串 。现在可以把两个没有重叠的连续子串前后拼接起来，但是要求拼接之后的数串中每个正整数不能出现超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>次。请问能拼接出来的符合要求的数字串的最大长度是多少。保证<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>18</mn></mrow><annotation encoding=\"application/x-tex\">a_i\\le18</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">18</span></span></span></span>.</p>\n<p>数据范围一眼状压<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>，考虑维护出现不超过一次。显然两个串的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">mask</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>位的交集为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，考虑串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">mask</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>位<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>，则显然串<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">mask</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>必定有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>s</mi><msub><mi>k</mi><mi>B</mi></msub><mo>⊂</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mn>18</mn></msup><mo>⊕</mo><mi>m</mi><mi>a</mi><mi>s</mi><msub><mi>k</mi><mi>A</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">mask_B\\subset(2^{18}\\oplus mask_A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>串长度不超过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>18</mn></mrow><annotation encoding=\"application/x-tex\">18</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">18</span></span></span></span>，暴力枚举所有合法串初始化<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>数组，然后跑<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>o</mi><mi>s</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">sosdp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">sos</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>维护子集<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">max</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span></span></span></span>，最后暴力检查一圈就行了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> B = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> mp[<span class=\"number\">2</span> * B];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; a[i], a[i]--;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> bit = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bit = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">18</span> &amp;&amp; j + i &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((bit &gt;&gt; a[i + j]) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bit ^= (<span class=\"number\">1</span> &lt;&lt; a[i + j]);</span><br><span class=\"line\">            mp[bit] = <span class=\"built_in\">max</span>(mp[bit], j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">18</span>; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= B; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;&gt; j &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                mp[i] = <span class=\"built_in\">max</span>(mp[i], mp[i ^ (<span class=\"number\">1</span> &lt;&lt; j)]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= B; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, mp[i] + mp[B ^ i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h2 id=\"2-线性dp\">2.线性dp</h2>\n<h3 id=\"2-1-LIS-O-nlogn-​\">2.1 LIS (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>​)</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], dp[N], dp2[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// O(nlogn)做法</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp2, inf, <span class=\"built_in\">sizeof</span>(dp2));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = <span class=\"built_in\">lower_bound</span>(dp2, dp2 + n, a[i]) - dp2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &gt; maxx)</span><br><span class=\"line\">            maxx = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        dp2[j] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; maxx &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单调栈优化：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[maxn], sta[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"number\">1</span>;</span><br><span class=\"line\">    sta[len] = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &gt; sta[len])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sta[++len] = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tem = <span class=\"built_in\">lower_bound</span>(sta + <span class=\"number\">1</span>, sta + <span class=\"number\">1</span> + len, arr[i]) - sta;</span><br><span class=\"line\">            sta[tem] = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; len &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">// system(&quot;pause&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-2-背包\">2.2 背包</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 物品容积与权重</span></span><br><span class=\"line\"><span class=\"type\">int</span> c[N], w[N], dp[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 01背包</span></span><br><span class=\"line\">    <span class=\"comment\">// 物品数目与背包体积</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n, v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)        <span class=\"comment\">// 枚举所有物品</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = v; j &gt;= c[i]; j--) <span class=\"comment\">// 枚举背包体积</span></span><br><span class=\"line\">            dp[j] = <span class=\"built_in\">max</span>(dp[j], dp[j - c[i]] + w[i]);</span><br><span class=\"line\">    <span class=\"comment\">// 分组背包</span></span><br><span class=\"line\">    <span class=\"comment\">// t[k][i]表示第k组的第i件物品的编号是多少</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ts, m, cnt[N], t[N][N];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= ts; k++)                                        <span class=\"comment\">// 循环每一组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = m; i &gt;= <span class=\"number\">0</span>; i--)                                     <span class=\"comment\">// 循环背包容量</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= cnt[k]; j++)                            <span class=\"comment\">// 循环该组的每一个物品</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt;= w[t[k][j]])                                     <span class=\"comment\">// 背包容量充足</span></span><br><span class=\"line\">                    dp[i] = <span class=\"built_in\">max</span>(dp[i], dp[i - w[t[k][j]]] + c[t[k][j]]); <span class=\"comment\">// 像0 - 1背包一样状态转移</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-3-整数划分\">2.3 整数划分</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">ll dp[maxn][maxn];</span><br><span class=\"line\">ll f[maxn][maxn], g[maxn][maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">div1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] 代表将i划分为不大于j的划分数(允许重复数字)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == <span class=\"number\">1</span>)</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; j)</span><br><span class=\"line\">                dp[i][j] = dp[i][i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + dp[i - j][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">div2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] 代表将i划分为不大于j的划分数(没有重复数字)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>)</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化不同即可, 转移方程依旧相同.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; j)</span><br><span class=\"line\">                dp[i][j] = dp[i][i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + dp[i - j][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">div3</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j]为将i恰好划分为j个整数的划分数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; j)</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + dp[i - j][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">div4</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设f[i][j]为将i恰好划分为j个奇数之和的划分数</span></span><br><span class=\"line\">    <span class=\"comment\">//  g[i][j]为将i恰好划分为j个偶数之和的划分数。</span></span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = g[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j)</span><br><span class=\"line\">                f[i][j] = g[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                f[i][j] = f[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + g[i - j][j];</span><br><span class=\"line\">                g[i][j] = f[i - j][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">div5</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] 代表i划分为不多于j个正整数的划分数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> || j == <span class=\"number\">1</span>)</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; j)</span><br><span class=\"line\">                dp[i][j] = dp[i][i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = dp[i][j - <span class=\"number\">1</span>] + dp[i - j][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-4-数位dp\">2.4 数位dp</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[maxn], f[maxn][maxn][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// f[len][state],状压的state记录状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> pre, <span class=\"type\">bool</span> limit, <span class=\"type\">bool</span> lead0, <span class=\"type\">int</span> cnt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pos)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">// 看情况return 1还是cnt</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span>&amp; now = f[pos][pre][limit];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lead0 &amp;&amp; ~now)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> now;</span><br><span class=\"line\">    <span class=\"type\">int</span> up = limit ? a[pos] : <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= up; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!lead0 &amp;&amp; <span class=\"built_in\">abs</span>(i - pre) &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;  <span class=\"comment\">// 保证枚举的要合法</span></span><br><span class=\"line\">        res += <span class=\"built_in\">dfs</span>(pos - <span class=\"number\">1</span>, i, limit &amp;&amp; i == up, lead0 &amp;&amp; i == <span class=\"number\">0</span>, cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lead0)</span><br><span class=\"line\">        now = res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        a[++len] = x % <span class=\"number\">10</span>;</span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dfs</span>(len, <span class=\"number\">0</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-5-四边形不等式优化dp\">2.5 四边形不等式优化dp</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> m[maxn][maxn],dp[maxn][maxn],sum[maxn],arr[maxn];</span><br><span class=\"line\"><span class=\"comment\">//m是区间分割点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;arr[i];</span><br><span class=\"line\">        sum[i]=sum[i<span class=\"number\">-1</span>]+arr[i];</span><br><span class=\"line\">        m[i][i]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> len=<span class=\"number\">2</span>;len&lt;=n;len++)&#123;<span class=\"comment\">//枚举区间长度，也是对角线条数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>,j=len;j&lt;=n;i++,j++)&#123;</span><br><span class=\"line\">            dp[i][j]=inf;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=m[i][j<span class=\"number\">-1</span>];k&lt;=m[i<span class=\"number\">+1</span>][j];k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[i][k]+dp[k<span class=\"number\">+1</span>][j]+sum[j]-sum[i<span class=\"number\">-1</span>]&lt;dp[i][j])&#123;</span><br><span class=\"line\">                    dp[i][j]=dp[i][k]+dp[k<span class=\"number\">+1</span>][j]+sum[j]-sum[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">                    m[i][j]=k;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">1</span>][n]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-6-状态压缩dp\">2.6 状态压缩dp</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">db f[<span class=\"number\">17</span>][<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">17</span>]; <span class=\"comment\">// 当前到第i个奶酪，并且已经经过的状态为j</span></span><br><span class=\"line\">db d[<span class=\"number\">17</span>][<span class=\"number\">17</span>];</span><br><span class=\"line\">db x[<span class=\"number\">17</span>] = &#123;<span class=\"number\">0</span>&#125;, y[<span class=\"number\">17</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"function\">db <span class=\"title\">dis</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f, <span class=\"number\">127</span>, <span class=\"built_in\">sizeof</span>(f));</span><br><span class=\"line\">    db ans = f[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">            d[i][j] = d[j][i] = <span class=\"built_in\">dis</span>(i, j); <span class=\"comment\">// 初始化任意两个奶酪之间的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        f[i][<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>)] = d[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"number\">1</span> &lt;&lt; n); j++)</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 枚举当前已经走过的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;\t\t\t\t\t\t\t\t   <span class=\"comment\">// 枚举当前已经到第i个奶酪</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((j &amp; (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))) == <span class=\"number\">0</span>) <span class=\"comment\">// 本应已经到了i个奶酪，但是还没走过i不合题意</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">            &#123; <span class=\"comment\">// 枚举上一个走到的奶酪</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == k)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;\t\t\t\t   <span class=\"comment\">// 重复了跳过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((j &amp; (<span class=\"number\">1</span> &lt;&lt; (k - <span class=\"number\">1</span>))) == <span class=\"number\">0</span>) <span class=\"comment\">// 目前走过的j没走过k</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                f[i][j] = <span class=\"built_in\">min</span>(f[i][j], f[k][j - (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))] + d[i][k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, f[i][(<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    cout &lt;&lt; fixed &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div style=\"page-break-after: always;\"></div>\n<h3 id=\"2-7-最短路优化dp\">2.7 最短路优化dp</h3>\n<p>最短路<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span>后效性问题会被最短路优化掉。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn = <span class=\"number\">2e5</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; connects[maxn];</span><br><span class=\"line\"><span class=\"type\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v, <span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    connects[u].<span class=\"built_in\">push_back</span>(&#123;v, w&#125;);</span><br><span class=\"line\">    connects[v].<span class=\"built_in\">push_back</span>(&#123;u, w&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; dist, dist1;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Dijkstra_queue0</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> pi = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">vis</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    priority_queue&lt;pi, vector&lt;pi&gt;, greater&lt;pi&gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(&#123;dist[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [dis, u] = q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [v, w] : connects[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vis[v])</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[v] &gt; dist[u] + w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dist[v] = dist[u] + w;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;dist[v], v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Dijkstra_queue1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> pi = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">vis</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    priority_queue&lt;pi, vector&lt;pi&gt;, greater&lt;pi&gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(&#123;dist1[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [dis, u] = q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> [v, w] : connects[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> now = <span class=\"built_in\">min</span>(dist[u], dist1[u] + w);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now &lt; dist1[v])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dist1[v] = now;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;dist1[v], v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class=\"line\">        <span class=\"built_in\">add_edge</span>(u, v, w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dist.<span class=\"built_in\">resize</span>(n + <span class=\"number\">10</span>), dist<span class=\"number\">1.</span><span class=\"built_in\">resize</span>(n + <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        dist[i] = dist1[i] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Dijkstra_queue0</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Dijkstra_queue1</span>();</span><br><span class=\"line\">    cout &lt;&lt; *<span class=\"built_in\">max_element</span>(dist<span class=\"number\">1.</span><span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, dist<span class=\"number\">1.</span><span class=\"built_in\">end</span>()) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["ACM","ICPC","算法模版"]},{"title":"C/C++ 读取EXCEL数据","url":"/2024/10/25/%E8%AF%BB%E5%8F%96EXCEL%E6%95%B0%E6%8D%AE/","content":"<ul>\n<li>打开Excel文件，点击文件-另存为</li>\n<li>在保存类型这里设置保存为csv格式</li>\n<li>选择好想保存的目录后，点击保存</li>\n<li>回到工作界面后，会弹出窗口，选择确定就可以了</li>\n</ul>\n<p><strong>按行读取。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ifstream <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;01.csv&quot;</span>)</span></span>; <span class=\"comment\">// 打开CSV文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!file.<span class=\"built_in\">is_open</span>()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;无法打开文件！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    string line;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(file, line)) &#123; <span class=\"comment\">// 逐行读取文件</span></span><br><span class=\"line\">        cout &lt;&lt; line &lt;&lt; endl; <span class=\"comment\">// 打印每一行内容</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    file.<span class=\"built_in\">close</span>(); <span class=\"comment\">// 关闭文件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["c++"]},{"title":"软件工程综合实践","url":"/2024/10/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/","content":"<h2 id=\"故事场景\">故事场景</h2>\n<blockquote>\n<p>你们是几名到某软件开发公司（以下简称T软）实习的学生。上班第一天，老板告诉你们，公司现在有个紧急项目，要求三周后上线，但是……上周末，这个项目唯一的程序员，小东，因不满公司的薪水待遇过低而离职了，现在留下了一个半成品的烂摊子，重担落在了你们几个毫无开发经验的实习生身上……</p>\n</blockquote>\n<h2 id=\"JDBC-项目\">JDBC 项目</h2>\n<p><strong>主要目标：解决“使用 JDBC 封装数据层，并实现增删改查”的问题。</strong></p>\n<h2 id=\"前端项目\">前端项目</h2>\n<p><strong>主要目标：解决“使用 HTML5+CSS3+JavaScript 开发企业级前端静态页面”的问题。</strong></p>\n<h2 id=\"JavaWeb-项目\">JavaWeb 项目</h2>\n<p><strong>主要目标：解决“使用 Vue（前端）+Servlet（服务端）开发基于前后端分离架构应用程序”的问题。</strong></p>\n<h2 id=\"SpringBoot-项目\">SpringBoot 项目</h2>\n<p><strong>主要目标：解决“使用 Vue（前端）+SpringBoot（服务端）开发基于前后端分离架构应用程序”的问题。</strong></p>\n<h2 id=\"SpringCloud-项目\">SpringCloud 项目</h2>\n<p><strong>主要目标：解决“使用 Vue（前端）+SpringCloud（服务端）开发基于微服务的互联网应用程序”的问题。</strong></p>\n","tags":["开发"]}]