[{"title":"C语言手写Httpd网站服务器","url":"/2024/09/26/C%E8%AF%AD%E8%A8%80%E6%89%8B%E5%86%99Httpd%E7%BD%91%E7%AB%99%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"<hr>\n<h2 id=\"执行WEB服务前的准备工作\"><a href=\"#执行WEB服务前的准备工作\" class=\"headerlink\" title=\"执行WEB服务前的准备工作\"></a>执行WEB服务前的准备工作</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//httpd默认的端口是80，这里指定了8000端口，也可以使用其它端口</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> port = <span class=\"number\">8000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化网络，并使用指定端口来创建服务端的套接字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> server_sock = startup(&amp;port);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;httpd running on port %d\\n&quot;</span>, port);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"网络通信初始化\"><a href=\"#网络通信初始化\" class=\"headerlink\" title=\"网络通信初始化\"></a>网络通信初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网络通信需要包含的头文件、需要加载的库文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;winsock2.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment (lib, <span class=\"string\">&quot;WS2_32.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    WSADATA wsaData; <span class=\"comment\">// 网络通信相关的版本等信息</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ret = WSAStartup( <span class=\"comment\">// WSAStartup 网络通信初始化，</span></span><br><span class=\"line\">        MAKEWORD(<span class=\"number\">1</span>, <span class=\"number\">1</span>),   <span class=\"comment\">// 指定使用Windows Sockets规范的1.1版本</span></span><br><span class=\"line\">        &amp;wsaData);        <span class=\"comment\">// 存储初始化后的版本等信息结果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建套接字\"><a href=\"#创建套接字\" class=\"headerlink\" title=\"创建套接字\"></a>创建套接字</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">error_die</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* sc)</span> &#123;</span><br><span class=\"line\">    perror(sc); <span class=\"comment\">//打印错误原因</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> server_socket = socket(PF_INET, <span class=\"comment\">//套接字的类型（网络套接字、文件套接字，此处是前者）</span></span><br><span class=\"line\">        SOCK_STREAM,  <span class=\"comment\">//数据包的类型（数据流、数据报，此处是前者）               </span></span><br><span class=\"line\">        IPPROTO_TCP); <span class=\"comment\">//具体协议</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server_socket == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">//打印错误提示，并结束程序</span></span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;socket&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置套接字属性–端口可复用\"><a href=\"#设置套接字属性–端口可复用\" class=\"headerlink\" title=\"设置套接字属性–端口可复用\"></a>设置套接字属性–端口可复用</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化网络并创建服务端的套接字</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置端口可复用（端口复用）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> opt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ret = setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, (<span class=\"type\">const</span> <span class=\"type\">char</span>*)&amp;opt, <span class=\"keyword\">sizeof</span>(opt));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;setsockopt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绑定套接字和网络地址\"><a href=\"#绑定套接字和网络地址\" class=\"headerlink\" title=\"绑定套接字和网络地址\"></a>绑定套接字和网络地址</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置服务器的网络地址</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(server_addr));</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(*port);</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//绑定套接字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bind(server_socket, (<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;[bind]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取动态端口\"><a href=\"#获取动态端口\" class=\"headerlink\" title=\"获取动态端口\"></a>获取动态端口</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 动态分配端口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*port == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> namelen = <span class=\"keyword\">sizeof</span>(server_addr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getsockname(server_socket, (<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr, &amp;namelen) &lt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            error_die(<span class=\"string\">&quot;getsockname&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *port = ntohs(server_addr.sin_port);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server_socket;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建监听队列\"><a href=\"#创建监听队列\" class=\"headerlink\" title=\"创建监听队列\"></a>创建监听队列</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">startup</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>* port)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建监听队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listen(server_socket, <span class=\"number\">5</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        error_die(<span class=\"string\">&quot;listen&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server_socket;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["c","服务器"]},{"title":"C语言手写植物大战僵尸","url":"/2024/09/26/C%E8%AF%AD%E8%A8%80%E6%89%8B%E5%86%99%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/","content":"<hr>\n<h2 id=\"C语言手写植物大战僵尸\"><a href=\"#C语言手写植物大战僵尸\" class=\"headerlink\" title=\"C语言手写植物大战僵尸\"></a>C语言手写植物大战僵尸</h2><h3 id=\"创建主场景\"><a href=\"#创建主场景\" class=\"headerlink\" title=\"创建主场景\"></a>创建主场景</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;graphics.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIN_WIDTH 900</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIN_HEIGHT 600</span></span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE imgBg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//游戏初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tloadimage(&amp;imgBg, <span class=\"string\">&quot;res/bg.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tinitgraph(WIN_WIDTH, WIN_HEIGHT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更新窗口</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tputimage(<span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;imgBg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//游戏初始化</span></span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//更新窗口</span></span><br><span class=\"line\">\tupdateWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物卡牌\"><a href=\"#实现植物卡牌\" class=\"headerlink\" title=\"实现植物卡牌\"></a>实现植物卡牌</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#define ZHI_WU_CUNT 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span> WAN_DOU, XIANG_RI_KUI, ZHI_WU_COUNT &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE imgBar;</span><br><span class=\"line\">IMAGE imgCards[ZHI_WU_COUNT];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tloadimage(&amp;imgBar, <span class=\"string\">&quot;res/bar.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化植物卡牌</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ZHI_WU_COUNT; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成植物卡牌的文件名</span></span><br><span class=\"line\">\t\tsprintf_s(name, <span class=\"keyword\">sizeof</span>(name), <span class=\"string\">&quot;res/Cards/card_%d.png&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tloadimage(&amp;imgCards[i], name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//putimage(250, 0, &amp;imgBar); //有黑边</span></span><br><span class=\"line\">\tputimagePNG(<span class=\"number\">250</span>, <span class=\"number\">0</span>, &amp;imgBar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ZHI_WU_COUNT; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x = <span class=\"number\">338</span> + i * <span class=\"number\">65</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> y = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t\tputimage(x, y, &amp;imgCards[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物的选择和拖动\"><a href=\"#实现植物的选择和拖动\" class=\"headerlink\" title=\"实现植物的选择和拖动\"></a>实现植物的选择和拖动</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">IMAGE* imgZhiWu[ZHI_WU_COUNT][<span class=\"number\">20</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> curX, curY; <span class=\"comment\">//当前选中的植物，在移动过程中的位置</span></span><br><span class=\"line\"><span class=\"type\">int</span> curZhiWu; <span class=\"comment\">//0:没有选中，1:选择了第一种植物 etc.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">fileExist</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span> &#123;</span><br><span class=\"line\">\tFILE* fp = fopen(name, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfclose(fp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(imgZhiWu, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(imgZhiWu));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化植物卡牌</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ZHI_WU_COUNT; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; j++) &#123;</span><br><span class=\"line\">\t\t\tsprintf_s(name, <span class=\"keyword\">sizeof</span>(name), <span class=\"string\">&quot;res/zhiwu/%d/%d.png&quot;</span>, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//先判断这个文件是否存在</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (fileExist(name)) &#123;</span><br><span class=\"line\">\t\t\t\timgZhiWu[i][j] = new IMAGE;</span><br><span class=\"line\">\t\t\t\tloadimage(imgZhiWu[i][j], name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcurZhiWu = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//创建游戏的图形窗口</span></span><br><span class=\"line\">\tinitgraph(WIN_WIDTH, WIN_HEIGHT, <span class=\"number\">1</span>); <span class=\"comment\">//加一个参数1，保留后台界面，方便调试</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBeginBatchDraw(); <span class=\"comment\">//开始缓冲（先打印到内存中）</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//渲染 拖动过程中的植物</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (curZhiWu &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tIMAGE* img = imgZhiWu[curZhiWu - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tputimagePNG(curX - img-&gt;getwidth() / <span class=\"number\">2</span>, curY - img-&gt;getheight() / <span class=\"number\">2</span>, img);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tEndBatchDraw(); <span class=\"comment\">//结束双缓冲（再一次性打印到窗口）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">userClick</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tExMessage msg;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> status = <span class=\"number\">0</span>;<span class=\"comment\">//状态变量（先点击再拖动）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (msg.message == WM_LBUTTONDOWN) &#123; <span class=\"comment\">//左击按下</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.x &gt; <span class=\"number\">338</span> &amp;&amp; msg.x &lt; <span class=\"number\">338</span> + <span class=\"number\">65</span> * ZHI_WU_COUNT &amp;&amp; msg.y &lt; <span class=\"number\">96</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> index = (msg.x - <span class=\"number\">338</span>) / <span class=\"number\">65</span>; <span class=\"comment\">//选择卡牌序号</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, index);</span><br><span class=\"line\">\t\t\t\tstatus = <span class=\"number\">1</span>; <span class=\"comment\">//可以拖动</span></span><br><span class=\"line\">\t\t\t\tcurZhiWu = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_MOUSEMOVE &amp;&amp; status == <span class=\"number\">1</span>) &#123; <span class=\"comment\">//鼠标移动</span></span><br><span class=\"line\">\t\t\tcurX = msg.x;</span><br><span class=\"line\">\t\t\tcurY = msg.y;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_LBUTTONUP) &#123; <span class=\"comment\">//左键抬起</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> main(<span class=\"type\">void</span>) &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tupdateWindow();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物的种植\"><a href=\"#实现植物的种植\" class=\"headerlink\" title=\"实现植物的种植\"></a>实现植物的种植</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zhiwu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> type;\t\t<span class=\"comment\">//0:没有选中，1:第一种植物\tetc.\t\t\t\t</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameIndex; <span class=\"comment\">//序列帧的序号</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zhiwu</span> <span class=\"title\">map</span>[3][9];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(<span class=\"built_in\">map</span>, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">map</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j].type &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> x = <span class=\"number\">256</span> + j * <span class=\"number\">81</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> y = <span class=\"number\">179</span> + i * <span class=\"number\">102</span> + <span class=\"number\">14</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> zhiWuType = <span class=\"built_in\">map</span>[i][j].type - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> index = <span class=\"built_in\">map</span>[i][j].frameIndex;</span><br><span class=\"line\">\t\t\t\tputimagePNG(x, y, imgZhiWu[zhiWuType][index]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">userClick</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_LBUTTONUP) &#123; <span class=\"comment\">//左键抬起</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.x &gt; <span class=\"number\">256</span> &amp;&amp; msg.y &gt; <span class=\"number\">179</span> &amp;&amp; msg.y &lt; <span class=\"number\">489</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> row = (msg.y - <span class=\"number\">179</span>) / <span class=\"number\">102</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> col = (msg.x - <span class=\"number\">256</span>) / <span class=\"number\">81</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//printf(&quot;%d, %d\\n&quot;, row, col);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[row][col].type == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">map</span>[row][col].type = curZhiWu;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">map</span>[row][col].frameIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurZhiWu = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现植物的摇摆\"><a href=\"#实现植物的摇摆\" class=\"headerlink\" title=\"实现植物的摇摆\"></a>实现植物的摇摆</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更新游戏相关数据</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateGame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j].type &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">map</span>[i][j].frameIndex++;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> zhiWuType = <span class=\"built_in\">map</span>[i][j].type - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> index = <span class=\"built_in\">map</span>[i][j].frameIndex;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (imgZhiWu[zhiWuType][index] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">map</span>[i][j].frameIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tupdateWindow();</span><br><span class=\"line\">\t\tupdateGame(); <span class=\"comment\">//更新游戏相关数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSleep(<span class=\"number\">10</span>);<span class=\"comment\">//帧等待</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化游戏循环和游戏渲染循序\"><a href=\"#优化游戏循环和游戏渲染循序\" class=\"headerlink\" title=\"优化游戏循环和游戏渲染循序\"></a>优化游戏循环和游戏渲染循序</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tBeginBatchDraw(); <span class=\"comment\">//开始缓冲</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//渲染 拖动过程中的植物（放到了最后）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (curZhiWu &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tIMAGE* img = imgZhiWu[curZhiWu - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tputimagePNG(curX - img-&gt;getwidth() / <span class=\"number\">2</span>, curY - img-&gt;getheight() / <span class=\"number\">2</span>, img);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tEndBatchDraw(); <span class=\"comment\">//结束双缓冲</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\">\t<span class=\"type\">int</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\">\t\ttimer += getDelay();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\ttimer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\tupdateWindow();</span><br><span class=\"line\">\t\t\tupdateGame();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"制作启动菜单\"><a href=\"#制作启动菜单\" class=\"headerlink\" title=\"制作启动菜单\"></a>制作启动菜单</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">startUI</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//启动菜单</span></span><br><span class=\"line\">\tIMAGE imgBg,imgMenu1,imgMenu2;</span><br><span class=\"line\">\tloadimage(&amp;imgBg, <span class=\"string\">&quot;res/menu.png&quot;</span>);</span><br><span class=\"line\">\tloadimage(&amp;imgMenu1, <span class=\"string\">&quot;res/menu1.png&quot;</span>);</span><br><span class=\"line\">\tloadimage(&amp;imgMenu2, <span class=\"string\">&quot;res/menu2.png&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tBeginBatchDraw();</span><br><span class=\"line\">\t\tputimage(<span class=\"number\">0</span>, <span class=\"number\">0</span>, &amp;imgBg);</span><br><span class=\"line\">\t\tputimagePNG(<span class=\"number\">474</span>, <span class=\"number\">75</span>, flag ? &amp;imgMenu2: &amp;imgMenu1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tExMessage msg;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.message == WM_LBUTTONDOWN&amp;&amp;</span><br><span class=\"line\">\t\t\t\t\tmsg.x&gt;<span class=\"number\">474</span>&amp;&amp;msg.x&lt;<span class=\"number\">474</span>+<span class=\"number\">300</span>&amp;&amp;</span><br><span class=\"line\">\t\t\t\t\tmsg.y&gt;<span class=\"number\">75</span>&amp;&amp;msg.y&lt;<span class=\"number\">75</span>+<span class=\"number\">140</span>)&#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//EndBatchDraw();</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (msg.message == WM_LBUTTONUP&amp;&amp;flag) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tEndBatchDraw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">\tgameInit();</span><br><span class=\"line\"></span><br><span class=\"line\">\tstartUI();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tuserClick();</span><br><span class=\"line\">\t\ttimer += getDelay();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (timer &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\ttimer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\tupdateWindow();</span><br><span class=\"line\">\t\t\tupdateGame();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建随机阳光\"><a href=\"#创建随机阳光\" class=\"headerlink\" title=\"创建随机阳光\"></a>创建随机阳光</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sunshineBall</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y; <span class=\"comment\">//阳光球在飘落过程中的坐标位置（x不变）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameIndex; <span class=\"comment\">//当前显示的图片帧的序号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> destY; <span class=\"comment\">//飘落的目标位置的y坐标</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> used; <span class=\"comment\">//是否在使用</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//阳光池</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sunshineBall</span> <span class=\"title\">balls</span>[10];</span></span><br><span class=\"line\">IMAGE imgSunshineBall[<span class=\"number\">29</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(balls, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(balls));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">29</span>; i++) &#123;</span><br><span class=\"line\">\t\tsprintf_s(name, <span class=\"keyword\">sizeof</span>(name), <span class=\"string\">&quot;res/sunshine/%d.png&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tloadimage(&amp;imgSunshineBall[i], name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//配置随机种子</span></span><br><span class=\"line\">\tsrand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">creatSunshine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> fre = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= fre) &#123; <span class=\"comment\">//每fre帧创建一个阳光，fre随机改变</span></span><br><span class=\"line\">\t\tfre = <span class=\"number\">200</span> + rand() % <span class=\"number\">200</span>;</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//从阳光池中取一个可以使用的</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ballMax = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ballMax &amp;&amp; balls[i].used; i++);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt;= ballMax) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tballs[i].used = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tballs[i].frameIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tballs[i].x = <span class=\"number\">260</span> + rand() % (<span class=\"number\">900</span> - <span class=\"number\">260</span>);</span><br><span class=\"line\">\t\tballs[i].y = <span class=\"number\">60</span>;</span><br><span class=\"line\">\t\tballs[i].destY = <span class=\"number\">200</span> + (rand() % <span class=\"number\">4</span>) * <span class=\"number\">90</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateGame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tcreatSunshine();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示随机阳光\"><a href=\"#显示随机阳光\" class=\"headerlink\" title=\"显示随机阳光\"></a>显示随机阳光</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sunshineBall</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> x, y; <span class=\"comment\">//阳光球在飘落过程中的坐标位置（x不变）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> frameIndex; <span class=\"comment\">//当前显示的图片帧的序号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> destY; <span class=\"comment\">//飘落的目标位置的y坐标</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> used; <span class=\"comment\">//是否在使用</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> timer; <span class=\"comment\">//计时器</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ballMax = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ballMax; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balls[i].used) &#123;</span><br><span class=\"line\">\t\t\tIMAGE* img = &amp;imgSunshineBall[balls[i].frameIndex];</span><br><span class=\"line\">\t\t\tputimagePNG(balls[i].x, balls[i].y, img);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">creatSunshine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (count &gt;= fre) &#123;</span><br><span class=\"line\">\t\tballs[i].timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateSunshine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ballMax = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ballMax; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balls[i].used) &#123;</span><br><span class=\"line\">\t\t\tballs[i].frameIndex = (balls[i].frameIndex + <span class=\"number\">1</span>) % <span class=\"number\">29</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (balls[i].timer == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//未到达地面</span></span><br><span class=\"line\">\t\t\t\tballs[i].y += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (balls[i].y &gt;= balls[i].destY) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//balls[i].used = false;</span></span><br><span class=\"line\">\t\t\t\tballs[i].timer++;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (balls[i].timer &gt; <span class=\"number\">100</span>) &#123; <span class=\"comment\">//掉到地面100帧之后</span></span><br><span class=\"line\">\t\t\t\t\tballs[i].used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateGame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tcreatSunshine(); <span class=\"comment\">//创建阳光</span></span><br><span class=\"line\">\tupdateSunshine(); <span class=\"comment\">//更新阳光的状态</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"收集阳光、显示阳光值\"><a href=\"#收集阳光、显示阳光值\" class=\"headerlink\" title=\"收集阳光、显示阳光值\"></a>收集阳光、显示阳光值</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;mmsystem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,<span class=\"string\">&quot;winmm.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> sunshine; <span class=\"comment\">//总阳光值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gameInit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tsunshine = <span class=\"number\">150</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置字体</span></span><br><span class=\"line\">\tLOGFONT f;</span><br><span class=\"line\">\tgettextstyle(&amp;f);                     <span class=\"comment\">// 获取当前字体设置</span></span><br><span class=\"line\">\tf.lfHeight = <span class=\"number\">30</span>;                      <span class=\"comment\">// 设置字体高度为 48</span></span><br><span class=\"line\">\tf.lfWidth = <span class=\"number\">15</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(f.lfFaceName, <span class=\"string\">&quot;Segoe UI Black&quot;</span>); </span><br><span class=\"line\">\tf.lfQuality = ANTIALIASED_QUALITY;    <span class=\"comment\">// 设置输出效果为抗锯齿  </span></span><br><span class=\"line\">\tsettextstyle(&amp;f);                     <span class=\"comment\">// 设置字体样式</span></span><br><span class=\"line\">\tsetbkmode(TRANSPARENT);\t\t\t\t  <span class=\"comment\">//背景模式透明</span></span><br><span class=\"line\">\tsetcolor(BLACK);\t\t\t\t\t  <span class=\"comment\">//字体颜色</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">updateWindow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> scoreText[<span class=\"number\">8</span>];</span><br><span class=\"line\">\tsprintf_s(scoreText, <span class=\"keyword\">sizeof</span>(scoreText), <span class=\"string\">&quot;%d&quot;</span>, sunshine);</span><br><span class=\"line\">\touttextxy(<span class=\"number\">276</span>, <span class=\"number\">67</span>, scoreText); <span class=\"comment\">//在指定位置输出文本--分数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">collectSunshine</span><span class=\"params\">(ExMessage* msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"keyword\">sizeof</span>(balls) / <span class=\"keyword\">sizeof</span>(balls[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"type\">int</span> w = imgSunshineBall[<span class=\"number\">0</span>].getwidth(); <span class=\"comment\">//阳光球宽度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> h = imgSunshineBall[<span class=\"number\">0</span>].getheight();<span class=\"comment\">//阳光球高度</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (balls[i].used) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x = balls[i].x;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> y = balls[i].y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg-&gt;x &gt; x &amp;&amp; msg-&gt;x &lt; x + w &amp;&amp; msg-&gt;y &gt; y &amp;&amp; msg-&gt;y &lt; y + h) &#123;</span><br><span class=\"line\">\t\t\t\tballs[i].used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\tsunshine += <span class=\"number\">25</span>;</span><br><span class=\"line\">\t\t\t\tmciSendString(<span class=\"string\">&quot;play res/sunshine.mp3&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//添加音效</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">userClick</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tExMessage msg;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> status = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (peekmessage(&amp;msg)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (msg.message == WM_LBUTTONDOWN) &#123; <span class=\"comment\">//左击按下</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (msg.x &gt; <span class=\"number\">338</span> &amp;&amp; msg.x &lt; <span class=\"number\">338</span> + <span class=\"number\">65</span> * ZHI_WU_COUNT &amp;&amp; msg.y &lt; <span class=\"number\">96</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tcollectSunshine(&amp;msg);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["c","PvZ"]},{"title":"Java 综合实战（一）","url":"/2024/09/24/Java%20%E7%BB%BC%E5%90%88%E5%AE%9E%E6%88%98/","content":"<hr>\n<h2 id=\"Java-综合实战（一）\"><a href=\"#Java-综合实战（一）\" class=\"headerlink\" title=\"Java 综合实战（一）\"></a>Java 综合实战（一）</h2><h3 id=\"健康计算器\"><a href=\"#健康计算器\" class=\"headerlink\" title=\"健康计算器\"></a>健康计算器</h3><p><strong>需求：开发一个简单的健康计算器应用程序，它可以接受用户的输入（如年龄、性别、体重、身高），并计算出用户的 BMI（身体质量指数）和 BMR（基础代谢率）。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的身高：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> height=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的体重：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> weight=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的性别（男/女）：&quot;</span>);</span><br><span class=\"line\">        String sex=sc.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请您输入您的年龄：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> age=sc.nextInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> bmi=calcBMI(height,weight);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;您的BMI值为：&quot;</span>+bmi);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> bmr=calcBMR(height,weight,age,sex);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;您的BMR值为：&quot;</span>+bmr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calcBMI</span><span class=\"params\">(<span class=\"type\">double</span> height,<span class=\"type\">double</span> weight)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> weight/(height*height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calcBMR</span><span class=\"params\">(<span class=\"type\">double</span> height,<span class=\"type\">double</span> weight,<span class=\"type\">int</span> age,String sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> bmr=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sex.equals(<span class=\"string\">&quot;男&quot;</span>))&#123;</span><br><span class=\"line\">            bmr=<span class=\"number\">88.362</span>+<span class=\"number\">13.397</span>*weight+<span class=\"number\">4.799</span>*height-<span class=\"number\">5.677</span>*age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            bmr=<span class=\"number\">447.593</span>+<span class=\"number\">9.247</span>*weight+<span class=\"number\">3.098</span>*height-<span class=\"number\">4.330</span>*age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bmr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单计算器\"><a href=\"#简单计算器\" class=\"headerlink\" title=\"简单计算器\"></a>简单计算器</h3><p><strong>需求：设计一个可以执行基本数学运算（加、减、乘、除）的计算器程序。</strong><br><strong>功能描述：用户输入两个数字、一个运算符（+、-、*、&#x2F;）。根据所选运算符执行相应的数学运算，显示运算结果。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入第一个数字：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> num1=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入第二个数字：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">double</span> num2=sc.nextDouble();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入运算符（+、-、*、/）：&quot;</span>);</span><br><span class=\"line\">        String operator=sc.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">double</span> result=calculate(num1,num2,operator);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;计算结果为：&quot;</span>+result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">calculate</span><span class=\"params\">(<span class=\"type\">double</span> num1,<span class=\"type\">double</span> num2,String operator)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operator)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                result=num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                result=num1-num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                result=num1*num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                result=num1/num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;输入的运算符有误！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"猜数字小游戏\"><a href=\"#猜数字小游戏\" class=\"headerlink\" title=\"猜数字小游戏\"></a>猜数字小游戏</h3><p><strong>需求：随机生成一个1-100之间的数据，提示用户猜测，猜大提示过大，猜小提示过小，直到猜中结束游戏。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        guessNumber();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">guessNumber</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*方法一*/</span></span><br><span class=\"line\">        <span class=\"comment\">//Math.random()返回[0,1)之间的随机小数</span></span><br><span class=\"line\">        <span class=\"comment\">//(int)(Math.random()*100)==&gt;[0,100)的整数==&gt;[0,99]+1==&gt;[1,100]</span></span><br><span class=\"line\">        <span class=\"comment\">//int number=(int)(Math.random()*100)+1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*方法二*/</span></span><br><span class=\"line\">        Random r=<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> number=r.nextInt(<span class=\"number\">100</span>)+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Scanner sc=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;请输入一个1~100之间的数字：&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> guess=sc.nextInt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(guess&lt;number)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜小了，再试试吧！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(guess&gt;number)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;猜大了，再试试吧！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;恭喜你猜对了！&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发一个验证码\"><a href=\"#开发一个验证码\" class=\"headerlink\" title=\"开发一个验证码\"></a>开发一个验证码</h3><p><strong>需求：开发一个程序，可以生成指定位数的验证码，每位可以是数字，大小写字母。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(getCode(<span class=\"number\">6</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getCode</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        String code=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> type=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">3</span>); <span class=\"comment\">//数字0/大写1/小写2</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"type\">int</span> num=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">10</span>);</span><br><span class=\"line\">                    code+=num;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"type\">int</span> num1=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">26</span>)+<span class=\"number\">65</span>;</span><br><span class=\"line\">                    code+=(<span class=\"type\">char</span>)num1;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"type\">int</span> num2=(<span class=\"type\">int</span>)(Math.random()*<span class=\"number\">26</span>)+<span class=\"number\">97</span>;</span><br><span class=\"line\">                    code+=(<span class=\"type\">char</span>)num2;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"找素数\"><a href=\"#找素数\" class=\"headerlink\" title=\"找素数\"></a>找素数</h3><p><strong>需求：输出101-200之间的所有素数以及总个数。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//目标：找出101-200之间的全部素数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">101</span>;i&lt;=<span class=\"number\">200</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isPrime(i))&#123;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;素数的个数为：&quot;</span>+count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPrime</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i*i&lt;=num;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num%i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"斗地主游戏\"><a href=\"#斗地主游戏\" class=\"headerlink\" title=\"斗地主游戏\"></a>斗地主游戏</h3><p><strong>需求：开发一个简易版的斗地主游戏，要求只完成做牌（存储54张牌）、洗牌。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        String[] poker=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">54</span>];</span><br><span class=\"line\">        String[] colors=&#123;<span class=\"string\">&quot;♠&quot;</span>,<span class=\"string\">&quot;♥&quot;</span>,<span class=\"string\">&quot;♣&quot;</span>,<span class=\"string\">&quot;♦&quot;</span>&#125;;</span><br><span class=\"line\">        String[] nums=&#123;<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>,<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>,<span class=\"string\">&quot;7&quot;</span>,<span class=\"string\">&quot;8&quot;</span>,<span class=\"string\">&quot;9&quot;</span>,<span class=\"string\">&quot;10&quot;</span>,<span class=\"string\">&quot;J&quot;</span>,<span class=\"string\">&quot;Q&quot;</span>,<span class=\"string\">&quot;K&quot;</span>,<span class=\"string\">&quot;A&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;colors.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">                poker[index++]=colors[i]+nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        poker[index++]=<span class=\"string\">&quot;Big Joker&quot;</span>;</span><br><span class=\"line\">        poker[index++]=<span class=\"string\">&quot;Small Joker&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//打印牌</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;poker.length;i++)&#123;</span><br><span class=\"line\">            System.out.print(poker[i]+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//洗牌</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;poker.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j=(<span class=\"type\">int</span>)(Math.random()*poker.length);</span><br><span class=\"line\">            String temp=poker[i];</span><br><span class=\"line\">            poker[i]=poker[j];</span><br><span class=\"line\">            poker[j]=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;洗牌后：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;poker.length;i++)&#123;</span><br><span class=\"line\">            System.out.print(poker[i]+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"石头迷阵游戏\"><a href=\"#石头迷阵游戏\" class=\"headerlink\" title=\"石头迷阵游戏\"></a>石头迷阵游戏</h3><p><strong>需求：只需完成数据初始化</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        start(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span>[][] arr=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> count=<span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">               arr[i][j]=count++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       print(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//打乱二维数组中的元素顺序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x=(<span class=\"type\">int</span>)(Math.random()*arr.length);</span><br><span class=\"line\">                <span class=\"type\">int</span> y=(<span class=\"type\">int</span>)(Math.random()*arr[i].length);</span><br><span class=\"line\">                <span class=\"type\">int</span> temp=arr[i][j];</span><br><span class=\"line\">                arr[i][j]=arr[x][y];</span><br><span class=\"line\">                arr[x][y]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打乱后：&quot;</span>);</span><br><span class=\"line\">        print(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(<span class=\"type\">int</span>[][] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class=\"line\">                System.out.print(arr[i][j]+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["Java"]},{"title":"Markdown 语法","url":"/2024/09/09/Markdown%E8%AF%AD%E6%B3%95/","content":"<h2 id=\"Markdown-标题\"><a href=\"#Markdown-标题\" class=\"headerlink\" title=\"Markdown 标题\"></a>Markdown 标题</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n<p>&nbsp;<strong>或者在文本下方添加任意数量的 &#x3D; 或 - 分别用于表示一级标题或二级标题</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">一级标题</span></span><br><span class=\"line\"><span class=\"section\">=========</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">二级标题</span></span><br><span class=\"line\"><span class=\"section\">---------</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-字体\"><a href=\"#Markdown-字体\" class=\"headerlink\" title=\"Markdown 字体\"></a>Markdown 字体</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文字*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文字_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**粗体文字**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">__粗体文字__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文字*</span>**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文字_</span>__</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-引用\"><a href=\"#Markdown-引用\" class=\"headerlink\" title=\"Markdown 引用\"></a>Markdown 引用</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;这是引用的内容</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;这是引用的内容</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-分割线\"><a href=\"#Markdown-分割线\" class=\"headerlink\" title=\"Markdown 分割线\"></a>Markdown 分割线</h2><p>&nbsp;<strong>三个或者三个以上的 - 或者 * 或者 _ 都可以</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">****</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">____</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-下划线\"><a href=\"#Markdown-下划线\" class=\"headerlink\" title=\"Markdown 下划线\"></a>Markdown 下划线</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>带下划线文本<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span>   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-删除线\"><a href=\"#Markdown-删除线\" class=\"headerlink\" title=\"Markdown 删除线\"></a>Markdown 删除线</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">~~tencent.com~~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-图片\"><a href=\"#Markdown-图片\" class=\"headerlink\" title=\"Markdown 图片\"></a>Markdown 图片</h2><h3 id=\"插入互联网上图片\"><a href=\"#插入互联网上图片\" class=\"headerlink\" title=\"插入互联网上图片\"></a>插入互联网上图片</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片描述</span>](<span class=\"link\">图片链接 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图片描述就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。<br>注意：title可加可不加，图片描述可写可不写。</p>\n</blockquote>\n<h3 id=\"插入本地图片\"><a href=\"#插入本地图片\" class=\"headerlink\" title=\"插入本地图片\"></a>插入本地图片</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片描述</span>](<span class=\"link\">图片本地路径 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图片描述就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。<br>注意：title可加可不加，图片描述可写可不写。</p>\n</blockquote>\n<h2 id=\"Markdown-超链接\"><a href=\"#Markdown-超链接\" class=\"headerlink\" title=\"Markdown 超链接\"></a>Markdown 超链接</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">超链接名</span>](<span class=\"link\">超链接地址 &quot;超链接title&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>&nbsp;<strong>注：title可加可不加</strong></p>\n<h2 id=\"Markdown-列表\"><a href=\"#Markdown-列表\" class=\"headerlink\" title=\"Markdown 列表\"></a>Markdown 列表</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><p>&nbsp;<strong>无序列表用 - + * 任何一种都可以</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h3><p>&nbsp;<strong>上一级和下一级之间敲一个Tab键即可</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-表格\"><a href=\"#Markdown-表格\" class=\"headerlink\" title=\"Markdown 表格\"></a>Markdown 表格</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">|表头|表头|表头|</span><br><span class=\"line\">|---|:--:|---:|</span><br><span class=\"line\">|内容|内容|内容|</span><br><span class=\"line\">|内容|内容|内容|</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第二行分割表头和内容<br>-有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右</p>\n</blockquote>\n<h2 id=\"Markdown-代码\"><a href=\"#Markdown-代码\" class=\"headerlink\" title=\"Markdown 代码\"></a>Markdown 代码</h2><h3 id=\"单行代码\"><a href=\"#单行代码\" class=\"headerlink\" title=\"单行代码\"></a>单行代码</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`hello world`</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"code\">```)语言</span></span><br><span class=\"line\"><span class=\"code\">  代码内容</span></span><br><span class=\"line\"><span class=\"code\">(```</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-流程图\"><a href=\"#Markdown-流程图\" class=\"headerlink\" title=\"Markdown 流程图\"></a>Markdown 流程图</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"code\">```)flow</span></span><br><span class=\"line\"><span class=\"code\">st=&gt;start: 开始</span></span><br><span class=\"line\"><span class=\"code\">op=&gt;operation: My Operation</span></span><br><span class=\"line\"><span class=\"code\">cond=&gt;condition: Yes or No?</span></span><br><span class=\"line\"><span class=\"code\">e=&gt;end</span></span><br><span class=\"line\"><span class=\"code\">st-&gt;op-&gt;cond</span></span><br><span class=\"line\"><span class=\"code\">cond(yes)-&gt;e</span></span><br><span class=\"line\"><span class=\"code\">cond(no)-&gt;op</span></span><br><span class=\"line\"><span class=\"code\">(```</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Markdown-换行\"><a href=\"#Markdown-换行\" class=\"headerlink\" title=\"Markdown 换行\"></a>Markdown 换行</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">连续两个以上空格+回车</span><br></pre></td></tr></table></figure>\n<p>&nbsp;<strong>或者</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用html语言换行标签<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Markdown-缩进字符\"><a href=\"#Markdown-缩进字符\" class=\"headerlink\" title=\"Markdown 缩进字符\"></a>Markdown 缩进字符</h2><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">&amp;nbsp;</span>  缩进1/4中文</span><br><span class=\"line\"><span class=\"literal\">&amp;ensp;</span>  缩进半个中文，一个字符</span><br><span class=\"line\"><span class=\"literal\">&amp;emsp;</span>  缩进一个中文，2个字符</span><br></pre></td></tr></table></figure>","tags":["Markdown"]},{"title":"MiniMIPS32","url":"/2024/10/12/MiniMIPS32/","content":"<h2 id=\"指令集仿真器-–-TEMU\"><a href=\"#指令集仿真器-–-TEMU\" class=\"headerlink\" title=\"指令集仿真器 – TEMU\"></a>指令集仿真器 – TEMU</h2><h3 id=\"实验简介\"><a href=\"#实验简介\" class=\"headerlink\" title=\"实验简介\"></a>实验简介</h3><p>采用高级语言（C&#x2F;C++、Java或Python等）设计面向32位MIPS或LoongArch指令集子集的指令集仿真器 – TEMU，用于实现对程序执行过程的模拟和调试。该指令集仿真器可模拟常见指令，支持单步执行、断点、显示寄存器信息、显示特定存储单元信息等功能，为后续的处理器设计实验提供仿真测试工具。</p>\n","tags":["MiniMIPS32"]},{"title":"动态规划做题总结","url":"/2024/10/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/","content":"<h1 id=\"入门-DP\"><a href=\"#入门-DP\" class=\"headerlink\" title=\"入门 DP\"></a>入门 DP</h1><h2 id=\"爬楼梯\"><a href=\"#爬楼梯\" class=\"headerlink\" title=\"爬楼梯\"></a>爬楼梯</h2><h3 id=\"爬楼梯-1\"><a href=\"#爬楼梯-1\" class=\"headerlink\" title=\"爬楼梯\"></a>爬楼梯</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(n+<span class=\"number\">1</span>)</span>;     </span><br><span class=\"line\">        f[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,f[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            f[i]=f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*由于这里的 f(x) 只和 f(x−1) 与 f(x−2) 有关，所以我们可以用「滚动数组思想」把空间复杂度优化成 O(1)*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"number\">0</span>, q = <span class=\"number\">0</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            p = q; </span><br><span class=\"line\">            q = r; </span><br><span class=\"line\">            r = p + q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用最小花费爬楼梯\"><a href=\"#使用最小花费爬楼梯\" class=\"headerlink\" title=\"使用最小花费爬楼梯\"></a>使用最小花费爬楼梯</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minCostClimbingStairs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; cost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = cost.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            dp[i] = min(dp[i - <span class=\"number\">1</span>] + cost[i - <span class=\"number\">1</span>], dp[i - <span class=\"number\">2</span>] + cost[i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合总和-Ⅳ\"><a href=\"#组合总和-Ⅳ\" class=\"headerlink\" title=\"组合总和 Ⅳ\"></a>组合总和 Ⅳ</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*本质是爬楼梯，相当于每次往上爬 nums[i] 步*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(target + <span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; <span class=\"comment\">//只有当不选取任何元素时，元素之和才为 0，因此只有 1 种方案。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= target; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span>&amp; num : nums) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (num &lt;= i&amp;&amp; dp[i - num] &lt; INT_MAX - dp[i]) &#123;</span><br><span class=\"line\">                    dp[i] += dp[i - num];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*另一种写法*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 unsigned 可以让溢出不报错</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于溢出的数据，不会影响答案的正确性（题目保证）</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">unsigned</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(target + <span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= target; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : nums) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (x &lt;= i) &#123;</span><br><span class=\"line\">                    f[i] += f[i - x];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计构造好字符串的方案数\"><a href=\"#统计构造好字符串的方案数\" class=\"headerlink\" title=\"统计构造好字符串的方案数\"></a>统计构造好字符串的方案数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">countGoodStrings</span><span class=\"params\">(<span class=\"type\">int</span> low, <span class=\"type\">int</span> high, <span class=\"type\">int</span> zero, <span class=\"type\">int</span> one)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(high + <span class=\"number\">1</span>)</span>; <span class=\"comment\">// f[i] 表示构造长为 i 的字符串的方案数</span></span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; <span class=\"comment\">// 构造空串的方案数为 1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= high; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= zero) f[i] = f[i - zero];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= one)  f[i] = (f[i] + f[i - one]) % MOD;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= low)  ans = (ans + f[i]) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计打字方案数\"><a href=\"#统计打字方案数\" class=\"headerlink\" title=\"统计打字方案数\"></a>统计打字方案数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">countTexts</span><span class=\"params\">(<span class=\"built_in\">string</span> pressedKeys)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; dp3 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>&#125;;   <span class=\"comment\">// 连续按多次 3 个字母按键对应的方案数</span></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; dp4 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>&#125;;   <span class=\"comment\">// 连续按多次 4 个字母按键对应的方案数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> n = pressedKeys.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">4</span>; i &lt; n + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">            dp3.push_back((dp3[i<span class=\"number\">-1</span>] + dp3[i<span class=\"number\">-2</span>] + dp3[i<span class=\"number\">-3</span>]) % m);</span><br><span class=\"line\">            dp4.push_back((dp4[i<span class=\"number\">-1</span>] + dp4[i<span class=\"number\">-2</span>] + dp4[i<span class=\"number\">-3</span>] + dp4[i<span class=\"number\">-4</span>]) % m);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> res = <span class=\"number\">1</span>;   <span class=\"comment\">// 总方案数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;   <span class=\"comment\">// 当前字符连续出现的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pressedKeys[i] == pressedKeys[i<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                ++cnt;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 对按键对应字符数量讨论并更新总方案数</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pressedKeys[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;7&#x27;</span> || pressedKeys[i<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                    res *= dp4[cnt];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res *= dp3[cnt];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                res %= m;</span><br><span class=\"line\">                cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新最后一段连续字符子串对应的方案数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pressedKeys[n<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;7&#x27;</span> || pressedKeys[n<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">            res *= dp4[cnt];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res *= dp3[cnt];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res %= m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打家劫舍\"><a href=\"#打家劫舍\" class=\"headerlink\" title=\"打家劫舍\"></a>打家劫舍</h2><h3 id=\"打家劫舍-1\"><a href=\"#打家劫舍-1\" class=\"headerlink\" title=\"打家劫舍\"></a>打家劫舍</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*题意转化为：从序列中选择子序列使得它们的和最大，数不能有相邻*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>; <span class=\"comment\">//用 dp[i] 表示前 i 间房屋能偷窃到的最高总金额</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-2</span>]+nums[i],dp[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*上述方法使用了数组存储结果。考虑到每间房屋的最高总金额只和该房屋的前两间房屋的最高总金额相关，因此可以使用滚动数组，在每个时刻只需要存储前两间房屋的最高总金额。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> first=nums[<span class=\"number\">0</span>],second=max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp=second;</span><br><span class=\"line\">            second=max(first+nums[i],second);</span><br><span class=\"line\">            first=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除并获得点数\"><a href=\"#删除并获得点数\" class=\"headerlink\" title=\"删除并获得点数\"></a>删除并获得点数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">private:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> first=nums[<span class=\"number\">0</span>],second=max(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp=second;</span><br><span class=\"line\">            second=max(first+nums[i],second);</span><br><span class=\"line\">            first=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteAndEarn</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxval=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> val:nums)&#123;</span><br><span class=\"line\">            maxval=max(maxval,val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;sum(maxval+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> val:nums)&#123;</span><br><span class=\"line\">            sum[val]+=val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rob(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"统计放置房子的方式数\"><a href=\"#统计放置房子的方式数\" class=\"headerlink\" title=\"统计放置房子的方式数\"></a>统计放置房子的方式数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*单独考虑一侧的房子，定义 f[i] 表示前 i 个地块的放置方案数，其中第 i 个地块可以放房子，也可以不放房子。*/</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">countHousePlacements</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span>;</span><br><span class=\"line\">        f[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        f[<span class=\"number\">1</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            f[i]=(f[i<span class=\"number\">-1</span>]+f[i<span class=\"number\">-2</span>])%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n]*f[n]%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打家劫舍-II\"><a href=\"#打家劫舍-II\" class=\"headerlink\" title=\"打家劫舍 II\"></a>打家劫舍 II</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一间房屋和最后一间房屋不同时偷窃*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">robRange</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> first = nums[start], second = max(nums[start], nums[start + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start + <span class=\"number\">2</span>; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp = second;</span><br><span class=\"line\">            second = max(first + nums[i], second);</span><br><span class=\"line\">            first = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> length = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(robRange(nums, <span class=\"number\">0</span>, length - <span class=\"number\">2</span>), robRange(nums, <span class=\"number\">1</span>, length - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"施咒的最大总伤害\"><a href=\"#施咒的最大总伤害\" class=\"headerlink\" title=\"施咒的最大总伤害\"></a>施咒的最大总伤害</h3><h2 id=\"最大子数组和\"><a href=\"#最大子数组和\" class=\"headerlink\" title=\"最大子数组和\"></a>最大子数组和</h2><blockquote>\n<p><em>定义状态 f[i] 表示以 a[i] 结尾的最大子数组和，不和 i 左边拼起来就是f[i]&#x3D;a[i]，和 i 左边拼起来就是f[i]&#x3D;f[i−1]+a[i]，取最大值就得到了状态转移方程 f[i]&#x3D;max(f[i−1],0)+a[i]，答案为 max(f)。这个做法也叫做 Kadane 算法。</em></p>\n</blockquote>\n<h3 id=\"最大子数组和-1\"><a href=\"#最大子数组和-1\" class=\"headerlink\" title=\"最大子数组和\"></a>最大子数组和</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*模板题*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(nums.size())</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ranges::max(dp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"找到最大开销的子字符串\"><a href=\"#找到最大开销的子字符串\" class=\"headerlink\" title=\"找到最大开销的子字符串\"></a>找到最大开销的子字符串</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*一点转化+模板题*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maximumCostSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> chars, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; vals)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">m</span><span class=\"params\">(<span class=\"number\">26</span>+<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        iota(m.begin(),m.end(),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;chars.size();i++)&#123;</span><br><span class=\"line\">            m[chars[i]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>]=vals[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(s.size())</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=m[s[<span class=\"number\">0</span>]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=max(<span class=\"number\">0</span>,dp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;s.size();i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+m[s[i]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">            ans=max(ans,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"任意子数组和的绝对值的最大值\"><a href=\"#任意子数组和的绝对值的最大值\" class=\"headerlink\" title=\"任意子数组和的绝对值的最大值\"></a>任意子数组和的绝对值的最大值</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*题目转化为max(最大子数组和，-最小子数组和，0)*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxAbsoluteSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp</span><span class=\"params\">(nums.size())</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans1=dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            dp[i]=max(dp[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">            ans1=max(ans1,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">dp1</span><span class=\"params\">(nums.size())</span>;</span><br><span class=\"line\">        dp1[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans2=dp1[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.size();i++)&#123;</span><br><span class=\"line\">            dp1[i]=min(dp1[i<span class=\"number\">-1</span>],<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">            ans2=min(ans2,dp1[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=max(<span class=\"number\">0</span>,ans1);</span><br><span class=\"line\">        ans=max(ans,-ans2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"K-次串联后最大子数组之和\"><a href=\"#K-次串联后最大子数组之和\" class=\"headerlink\" title=\"K 次串联后最大子数组之和\"></a>K 次串联后最大子数组之和</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">考虑两种情况：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">1.如果k=1，那就是正常DP。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">2.k&gt;1时也考虑两种情况：数组所有元素和大于0，数组所有元素和小于等于0。</span></span><br><span class=\"line\"><span class=\"comment\">首先计算两个相接的DP也就是k=2的情况，如果数组元素和大于0，那可以看成再第一段结尾第二段开头插入k-2个正数，如果数组所有元素和为负，那k=2的情况就是最大的情况。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">kConcatenationMaxSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; arr, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=arr.size();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> sum=<span class=\"number\">0</span>,presum=<span class=\"number\">0</span>,result=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n*(k&gt;<span class=\"number\">1</span>?<span class=\"number\">2</span>:<span class=\"number\">1</span>);i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> num=arr[i%n];</span><br><span class=\"line\">            presum=max(presum,<span class=\"number\">0ll</span>)+num;</span><br><span class=\"line\">            result=max(result,presum);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;n) sum+=num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum&gt;<span class=\"number\">0</span>&amp;&amp;k&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            result=(result+sum*(k<span class=\"number\">-2</span>)%mod)%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.sum&gt;0、k=2时，最大子数组和如果没有跨过两个数组，那岂不是不能在中间插入k-2个sum吗？</span></span><br><span class=\"line\"><span class=\"comment\">反证法，反设sum&gt;0时，如果最大子数组和没有跨过两个数组。从L到R的子数组的和最大（0&lt;=L&lt;=R&lt;n-1），考虑R向右n个数(R+1到R+n)，这n个数一定是和arr的数是一样的（循环了），那么这n个数的和是sum，大于0。所以从L到R+n的子数组的和要更大，而这个子数组跨过了两个数组，与反设矛盾。所以这样做是对的。</span></span><br><span class=\"line\"><span class=\"comment\">2.sum&lt;=0时，为什么可以化归到k=2的情况？</span></span><br><span class=\"line\"><span class=\"comment\">还是反证法，假设最大子数组的长度&gt;2n，那一定包括一个完整的arr数组，那么因为sum&lt;=0，所以拿掉这一部分，把前后拼接在一起（这样做显然是合法的），这样做结果只会更优，如此操作下去，就可以划归到k=2的情况了。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"环形子数组的最大和\"><a href=\"#环形子数组的最大和\" class=\"headerlink\" title=\"环形子数组的最大和\"></a>环形子数组的最大和</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxSubarraySumCircular</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">qianmax</span><span class=\"params\">(n)</span>; <span class=\"comment\">//前缀最大值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> presum=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        qianmax[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> pre=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            pre=max(pre,<span class=\"number\">0</span>)+nums[i];</span><br><span class=\"line\">            ans=max(ans,pre);</span><br><span class=\"line\"></span><br><span class=\"line\">            presum+=nums[i];</span><br><span class=\"line\">            qianmax[i]=max(qianmax[i<span class=\"number\">-1</span>],presum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> housum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;<span class=\"number\">0</span>;i--)&#123; <span class=\"comment\">//枚举后缀和</span></span><br><span class=\"line\">            housum+=nums[i];</span><br><span class=\"line\">            ans=max(ans,housum+qianmax[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拼接数组的最大分数\"><a href=\"#拼接数组的最大分数\" class=\"headerlink\" title=\"拼接数组的最大分数\"></a>拼接数组的最大分数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*转换成最大子数组和*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums1, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, maxSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, s = <span class=\"number\">0</span>; i &lt; nums1.size(); i++) &#123;</span><br><span class=\"line\">            sum += nums1[i];</span><br><span class=\"line\">            s = max(s,<span class=\"number\">0</span>)+(nums2[i] - nums1[i]);</span><br><span class=\"line\">            maxSum = max(maxSum, s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum + maxSum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maximumsSplicedArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums1, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; &amp;nums2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(solve(nums1, nums2), solve(nums2, nums1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展）乘积最大子数组\"><a href=\"#扩展）乘积最大子数组\" class=\"headerlink\" title=\"(扩展）乘积最大子数组\"></a>(扩展）乘积最大子数组</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span> &lt;<span class=\"type\">long</span>&gt; maxF(nums.begin(),nums.end()), minF(nums.begin(), nums.end());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class=\"line\">            maxF[i] = max(maxF[i - <span class=\"number\">1</span>] * nums[i], max((<span class=\"type\">long</span>)nums[i], minF[i - <span class=\"number\">1</span>] * nums[i]));</span><br><span class=\"line\">            minF[i] = min(minF[i - <span class=\"number\">1</span>] * nums[i], min((<span class=\"type\">long</span>)nums[i], maxF[i - <span class=\"number\">1</span>] * nums[i]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minF[i]&lt;INT_MIN) &#123;</span><br><span class=\"line\">                minF[i]=nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *max_element(maxF.begin(), maxF.end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*优化空间*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> maxF = nums[<span class=\"number\">0</span>], minF = nums[<span class=\"number\">0</span>], ans = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> mx = maxF, mn = minF;</span><br><span class=\"line\">            maxF = max(mx * nums[i], max((<span class=\"type\">long</span>)nums[i], mn * nums[i]));</span><br><span class=\"line\">            minF = min(mn * nums[i], min((<span class=\"type\">long</span>)nums[i], mx * nums[i]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minF&lt;INT_MIN) &#123;</span><br><span class=\"line\">                minF=nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = max(maxF, ans);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"网格图-DP\"><a href=\"#网格图-DP\" class=\"headerlink\" title=\"网格图 DP\"></a>网格图 DP</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"珠宝的最高价值\"><a href=\"#珠宝的最高价值\" class=\"headerlink\" title=\"珠宝的最高价值\"></a>珠宝的最高价值</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">jewelleryValue</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; frame)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=frame.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=frame[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        f[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=frame[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123; <span class=\"comment\">//处理第一列</span></span><br><span class=\"line\">            f[i][<span class=\"number\">0</span>]=f[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]+frame[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123; <span class=\"comment\">//处理第一行</span></span><br><span class=\"line\">            f[<span class=\"number\">0</span>][j]=f[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>]+frame[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                f[i][j]=max(f[i<span class=\"number\">-1</span>][j],f[i][j<span class=\"number\">-1</span>])+frame[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/*注意到状态转移方程中，f(i,j) 只会从 f(i−1,j) 和 f(i,j−1) 转移而来，而与 f(i−2,⋯) 以及更早的状态无关，因此我们同一时刻只需要存储最后两行的状态，即使用两个长度为 n 的一位数组代替 n×m 的二维数组 f，交替地进行状态转移，减少空间复杂度。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">jewelleryValue</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; frame)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=frame.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=frame[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> pos=i%<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                f[pos][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>) f[pos][j]=max(f[pos][j],f[<span class=\"number\">1</span>-pos][j]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">0</span>) f[pos][j]=max(f[pos][j],f[pos][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">                f[pos][j]+=frame[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不同路径\"><a href=\"#不同路径\" class=\"headerlink\" title=\"不同路径\"></a>不同路径</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++) f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++) f[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*此外，由于 f(i,j) 仅与第 i 行和第 i−1 行的状态有关，因此我们可以使用滚动数组代替代码中的二维数组，使空间复杂度降低为 O(n)。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">f</span><span class=\"params\">(n,<span class=\"number\">1</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                f[j]+=f[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不同路径-II\"><a href=\"#不同路径-II\" class=\"headerlink\" title=\"不同路径 II\"></a>不同路径 II</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; obstacleGrid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=obstacleGrid.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> n=obstacleGrid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; f(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123; <span class=\"comment\">//处理第一列</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obstacleGrid[i][<span class=\"number\">0</span>]==<span class=\"number\">1</span>)&#123; <span class=\"comment\">//有障碍 </span></span><br><span class=\"line\">                f[i][<span class=\"number\">0</span>]=<span class=\"number\">0</span>; </span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//后面都到达不了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;  <span class=\"comment\">//处理第一行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obstacleGrid[<span class=\"number\">0</span>][j]==<span class=\"number\">1</span>)&#123; <span class=\"comment\">//有障碍</span></span><br><span class=\"line\">                f[<span class=\"number\">0</span>][j]=<span class=\"number\">0</span>; </span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//后面都到达不了</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> f[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obstacleGrid[i][j]==<span class=\"number\">1</span>) f[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> f[i][j]=f[i<span class=\"number\">-1</span>][j]+f[i][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最小路径和\"><a href=\"#最小路径和\" class=\"headerlink\" title=\"最小路径和\"></a>最小路径和</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minPathSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=grid.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++) dp[i][<span class=\"number\">0</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]+grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++) dp[<span class=\"number\">0</span>][j]=dp[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>]+grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                dp[i][j]=min(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>])+grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三角形最小路径和\"><a href=\"#三角形最小路径和\" class=\"headerlink\" title=\"三角形最小路径和\"></a>三角形最小路径和</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minimumTotal</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; triangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=triangle.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=triangle[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>]=dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]+triangle[i][<span class=\"number\">0</span>]; <span class=\"comment\">//第一列只能从上面转移</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                dp[i][j]=min(dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j])+triangle[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[i][i]=dp[i<span class=\"number\">-1</span>][i<span class=\"number\">-1</span>]+triangle[i][i];<span class=\"comment\">//最后一列只能从左上转移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[n<span class=\"number\">-1</span>].begin(),dp[n<span class=\"number\">-1</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*可以发现，dp[i][j] 只与 dp[i−1][..] 有关，而与 dp[i−2][..] 及之前的状态无关，因此我们不必存储这些无关的状态。具体地，我们使用两个长度为 n 的一维数组进行转移，将 i 根据奇偶性映射到其中一个一维数组，那么 i−1 就映射到了另一个一维数组。这样我们使用这两个一维数组，交替地进行状态转移。*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minimumTotal</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; triangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=triangle.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=triangle[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cur=i%<span class=\"number\">2</span>; <span class=\"comment\">//当前行</span></span><br><span class=\"line\">            <span class=\"type\">int</span> pre=<span class=\"number\">1</span>-cur; <span class=\"comment\">//上一行</span></span><br><span class=\"line\">            dp[cur][<span class=\"number\">0</span>]=dp[pre][<span class=\"number\">0</span>]+triangle[i][<span class=\"number\">0</span>]; <span class=\"comment\">//第一列只能从上面转移</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                dp[cur][j]=min(dp[pre][j<span class=\"number\">-1</span>],dp[pre][j])+triangle[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[cur][i]=dp[pre][i<span class=\"number\">-1</span>]+triangle[i][i];<span class=\"comment\">//最后一列只能从左上转移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].begin(),dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"下降路径最小和\"><a href=\"#下降路径最小和\" class=\"headerlink\" title=\"下降路径最小和\"></a>下降路径最小和</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minFallingPathSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; matrix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=matrix.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        copy(matrix[<span class=\"number\">0</span>].begin(),matrix[<span class=\"number\">0</span>].end(),dp[<span class=\"number\">0</span>].begin());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> minn=dp[i<span class=\"number\">-1</span>][j]; <span class=\"comment\">//都能从正上方转移</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">0</span>)&#123; <span class=\"comment\">//可以从左上方转移</span></span><br><span class=\"line\">                    minn=min(minn,dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&lt;n<span class=\"number\">-1</span>)&#123; <span class=\"comment\">//可以从右上方转移</span></span><br><span class=\"line\">                    minn=min(minn,dp[i<span class=\"number\">-1</span>][j+<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[i][j]=minn+matrix[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[n<span class=\"number\">-1</span>].begin(),dp[n<span class=\"number\">-1</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"矩阵中移动的最大次数\"><a href=\"#矩阵中移动的最大次数\" class=\"headerlink\" title=\"矩阵中移动的最大次数\"></a>矩阵中移动的最大次数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxMoves</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>; <span class=\"type\">bool</span> flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=grid.size();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m)); <span class=\"comment\">//dp[i][j]==1表示(i,j)位置可到达</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">            flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j<span class=\"number\">-1</span>]&lt;grid[i][j]&amp;&amp;dp[i][j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(grid[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]&lt;grid[i][j]&amp;&amp;dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                        dp[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&lt;n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(grid[i+<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]&lt;grid[i][j]&amp;&amp;dp[i+<span class=\"number\">1</span>][j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">                        dp[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[i][j])&#123;</span><br><span class=\"line\">                    flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    ans=j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//ans+=1;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"网格中的最小路径代价\"><a href=\"#网格中的最小路径代价\" class=\"headerlink\" title=\"网格中的最小路径代价\"></a>网格中的最小路径代价</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minPathCost</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; moveCost)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid.size(),n=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cur=i%<span class=\"number\">2</span>; <span class=\"comment\">//当前行</span></span><br><span class=\"line\">            <span class=\"type\">int</span> pre=<span class=\"number\">1</span>-cur; <span class=\"comment\">//上一行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123; <span class=\"comment\">//当前行每一列</span></span><br><span class=\"line\">                dp[cur][j]=INT_MAX;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)&#123; <span class=\"comment\">//上一行每一列</span></span><br><span class=\"line\">                    dp[cur][j]=min(dp[cur][j],dp[pre][k]+moveCost[grid[i<span class=\"number\">-1</span>][k]][j]+grid[i][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[(m<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].begin(),dp[(m<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"下降路径最小和-II\"><a href=\"#下降路径最小和-II\" class=\"headerlink\" title=\"下降路径最小和 II\"></a>下降路径最小和 II</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">minFallingPathSum</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=grid.size(),m=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; dp(<span class=\"number\">2</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m));</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123; </span><br><span class=\"line\">            <span class=\"type\">int</span> cur=i%<span class=\"number\">2</span>; <span class=\"comment\">//当前行</span></span><br><span class=\"line\">            <span class=\"type\">int</span> pre=<span class=\"number\">1</span>-cur; <span class=\"comment\">//上一行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123; <span class=\"comment\">//当前行每一列</span></span><br><span class=\"line\">                dp[cur][j]=INT_MAX;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;m;k++)&#123; <span class=\"comment\">//上一行每一列</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(j!=k)&#123;</span><br><span class=\"line\">                        dp[cur][j]=min(dp[cur][j],dp[pre][k]+grid[i][j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *min_element(dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].begin(),dp[(n<span class=\"number\">-1</span>)%<span class=\"number\">2</span>].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"矩阵的最大非负积\"><a href=\"#矩阵的最大非负积\" class=\"headerlink\" title=\"矩阵的最大非负积\"></a>矩阵的最大非负积</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">maxProductPath</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> mod=<span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=grid.size(),n=grid[<span class=\"number\">0</span>].size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;&gt; maxgt(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;&gt; minlt(m,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;(n));</span><br><span class=\"line\">        maxgt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=minlt[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123; <span class=\"comment\">//处理第一行</span></span><br><span class=\"line\">            maxgt[<span class=\"number\">0</span>][j]=minlt[<span class=\"number\">0</span>][j]=maxgt[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>]*grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123; <span class=\"comment\">//处理第一列</span></span><br><span class=\"line\">            maxgt[i][<span class=\"number\">0</span>]=minlt[i][<span class=\"number\">0</span>]=maxgt[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>]*grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    maxgt[i][j]=max(maxgt[i<span class=\"number\">-1</span>][j],maxgt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                    minlt[i][j]=min(minlt[i<span class=\"number\">-1</span>][j],minlt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    maxgt[i][j]=min(minlt[i<span class=\"number\">-1</span>][j],minlt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                    minlt[i][j]=max(maxgt[i<span class=\"number\">-1</span>][j],maxgt[i][j<span class=\"number\">-1</span>])*grid[i][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(maxgt[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxgt[m<span class=\"number\">-1</span>][n<span class=\"number\">-1</span>]%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大得分的路径数目\"><a href=\"#最大得分的路径数目\" class=\"headerlink\" title=\"最大得分的路径数目\"></a>最大得分的路径数目</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">using PII = <span class=\"built_in\">pair</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">private:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">constexpr</span> <span class=\"type\">int</span> mod = (<span class=\"type\">int</span>)<span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;PII&gt;&gt;&amp; dp, <span class=\"type\">int</span> n, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u &gt;= n || v &gt;= n || dp[u][v].first == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp[u][v].first &gt; dp[x][y].first) &#123;</span><br><span class=\"line\">            dp[x][y] = dp[u][v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dp[u][v].first == dp[x][y].first) &#123;</span><br><span class=\"line\">            dp[x][y].second += dp[u][v].second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[x][y].second &gt;= mod) &#123;</span><br><span class=\"line\">                dp[x][y].second -= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; <span class=\"title function_\">pathsWithMaxScore</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; board)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = board.size();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;PII&gt;&gt; dp(n, <span class=\"built_in\">vector</span>&lt;PII&gt;(n, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;));</span><br><span class=\"line\">        dp[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(i == n - <span class=\"number\">1</span> &amp;&amp; j == n - <span class=\"number\">1</span>) &amp;&amp; board[i][j] != <span class=\"string\">&#x27;X&#x27;</span>) &#123;</span><br><span class=\"line\">                    update(dp, n, i, j, i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">                    update(dp, n, i, j, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    update(dp, n, i, j, i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (dp[i][j].first != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                        dp[i][j].first += (board[i][j] == <span class=\"string\">&#x27;E&#x27;</span> ? <span class=\"number\">0</span> : board[i][j] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].first == <span class=\"number\">-1</span> ? <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125; : <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&#123;dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].first, dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>].second&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"矩阵中和能被-K-整除的路径\"><a href=\"#矩阵中和能被-K-整除的路径\" class=\"headerlink\" title=\"矩阵中和能被 K 整除的路径\"></a>矩阵中和能被 K 整除的路径</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*把路径和模 k 的结果当成一个扩展维度*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">numberOfPaths</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;&gt; &amp;grid, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = grid.size(), n = grid[<span class=\"number\">0</span>].size(), f[m + <span class=\"number\">1</span>][n + <span class=\"number\">1</span>][k];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(f)); <span class=\"comment\">// f[i][j][v] 表示从左上走到 (i,j)，且路径和模 k 的结果为 v 时的路径数</span></span><br><span class=\"line\">        f[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v = <span class=\"number\">0</span>; v &lt; k; ++v)</span><br><span class=\"line\">                    f[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>][(v + grid[i][j]) % k] = (f[i + <span class=\"number\">1</span>][j][v] + f[i][j + <span class=\"number\">1</span>][v]) % mod;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f[m][n][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*代码实现时，为了避免判断是否越界，可以把下标都加一。此时可以设初始值 f[0][1][0]=1（或者 f[1][0][0]=1）简化一点点代码。*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"地下城游戏\"><a href=\"#地下城游戏\" class=\"headerlink\" title=\"地下城游戏\"></a>地下城游戏</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"背包\"><a href=\"#背包\" class=\"headerlink\" title=\"背包\"></a>背包</h1><h2 id=\"0-1-背包\"><a href=\"#0-1-背包\" class=\"headerlink\" title=\"0-1 背包\"></a>0-1 背包</h2><blockquote>\n<p><em>每个物品只能选一次</em></p>\n</blockquote>\n<h3 id=\"和为目标值的最长子序列的长度\"><a href=\"#和为目标值的最长子序列的长度\" class=\"headerlink\" title=\"和为目标值的最长子序列的长度\"></a>和为目标值的最长子序列的长度</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"完全背包\"><a href=\"#完全背包\" class=\"headerlink\" title=\"完全背包\"></a>完全背包</h2><h2 id=\"多重背包\"><a href=\"#多重背包\" class=\"headerlink\" title=\"多重背包\"></a>多重背包</h2><h2 id=\"分组背包\"><a href=\"#分组背包\" class=\"headerlink\" title=\"分组背包\"></a>分组背包</h2><h1 id=\"经典线性-DP\"><a href=\"#经典线性-DP\" class=\"headerlink\" title=\"经典线性 DP\"></a>经典线性 DP</h1><h2 id=\"最长公共子序列（LCS）\"><a href=\"#最长公共子序列（LCS）\" class=\"headerlink\" title=\"最长公共子序列（LCS）\"></a>最长公共子序列（LCS）</h2><blockquote>\n<p><em>一般定义f[i][j]表示对(s[:i],t[:j])的求解结果。</em></p>\n</blockquote>\n<h3 id=\"最长公共子序列\"><a href=\"#最长公共子序列\" class=\"headerlink\" title=\"最长公共子序列\"></a>最长公共子序列</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(string text1, string text2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=text<span class=\"number\">1.</span><span class=\"built_in\">size</span>(),n=text<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m<span class=\"number\">+1</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n<span class=\"number\">+1</span>)); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1=text1[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> c2=text2[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c1==c2)&#123;</span><br><span class=\"line\">                    dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]<span class=\"number\">+1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"built_in\">max</span>(dp[i<span class=\"number\">-1</span>][j],dp[i][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两个字符串的删除操作\"><a href=\"#两个字符串的删除操作\" class=\"headerlink\" title=\"两个字符串的删除操作\"></a>两个字符串的删除操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minDistance</span><span class=\"params\">(string word1, string word2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = word<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = word<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1 = word1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> c2 = word2[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> lcs = dp[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m - lcs + n - lcs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两个字符串的最小ASCII删除和\"><a href=\"#两个字符串的最小ASCII删除和\" class=\"headerlink\" title=\"两个字符串的最小ASCII删除和\"></a>两个字符串的最小ASCII删除和</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimumDeleteSum</span><span class=\"params\">(string s1, string s2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = s<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + s1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + s2[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1 = s1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> c2 = s2[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">min</span>(dp[i - <span class=\"number\">1</span>][j] + s1[i - <span class=\"number\">1</span>], dp[i][j - <span class=\"number\">1</span>] + s2[j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编辑距离\"><a href=\"#编辑距离\" class=\"headerlink\" title=\"编辑距离\"></a>编辑距离</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"最长递增子序列（LIS）\"><a href=\"#最长递增子序列（LIS）\" class=\"headerlink\" title=\"最长递增子序列（LIS）\"></a>最长递增子序列（LIS）</h2>","tags":["动态规划","编程"]},{"title":"单调栈做题总结","url":"/2024/10/06/%E5%8D%95%E8%B0%83%E6%A0%88%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"每日温度\"><a href=\"#每日温度\" class=\"headerlink\" title=\"每日温度\"></a>每日温度</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 找后面第一个大 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dailyTemperatures</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=temperatures.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;temperatures[s.<span class=\"built_in\">top</span>()]&lt;temperatures[i])&#123; <span class=\"comment\">//栈中维护下标写法</span></span><br><span class=\"line\">                ans[s.<span class=\"built_in\">top</span>()]=i-s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"商品折扣后的最终价格\"><a href=\"#商品折扣后的最终价格\" class=\"headerlink\" title=\"商品折扣后的最终价格\"></a>商品折扣后的最终价格</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 找后面第一个小于等于 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">finalPrices</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=prices.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;prices[s.<span class=\"built_in\">top</span>()]&gt;=prices[i])&#123;</span><br><span class=\"line\">                ans[s.<span class=\"built_in\">top</span>()]=prices[s.<span class=\"built_in\">top</span>()]-prices[i];</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            ans[s.<span class=\"built_in\">top</span>()]=prices[s.<span class=\"built_in\">top</span>()];</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下一个更大元素-I\"><a href=\"#下一个更大元素-I\" class=\"headerlink\" title=\"下一个更大元素 I\"></a>下一个更大元素 I</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 找后面第一个大 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nextGreaterElement</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(nums<span class=\"number\">1.</span>size())</span></span>;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; hashmap;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//处理nums2</span></span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums2[s.<span class=\"built_in\">top</span>()]&lt;nums2[i])&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> temp=nums2[s.<span class=\"built_in\">top</span>()];</span><br><span class=\"line\">                hashmap[temp]=nums2[i];</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp=nums1[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hashmap[temp]) ans[i]=hashmap[temp];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ans[i]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下一个更大元素-II\"><a href=\"#下一个更大元素-II\" class=\"headerlink\" title=\"下一个更大元素 II\"></a>下一个更大元素 II</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 循环找后面第一个大 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nextGreaterElements</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>*n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums[s.<span class=\"built_in\">top</span>()]&lt;nums[i%n])&#123;</span><br><span class=\"line\">                ans[s.<span class=\"built_in\">top</span>()]=nums[i%n];</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i%n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最大宽度坡\"><a href=\"#最大宽度坡\" class=\"headerlink\" title=\"最大宽度坡\"></a>最大宽度坡</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*单调递减栈*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxWidthRamp</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">empty</span>() || nums[s.<span class=\"built_in\">top</span>()] &gt; nums[i]) &#123;<span class=\"comment\">//要把第一个数据push</span></span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;i &gt;= <span class=\"number\">0</span>;i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; nums[s.<span class=\"built_in\">top</span>()]&lt;=nums[i]) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans,i - s.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"车队\"><a href=\"#车队\" class=\"headerlink\" title=\"车队\"></a>车队</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 排序+单调栈 *****/</span></span><br><span class=\"line\"><span class=\"comment\">/***** 根据位置由小到大排序，位置大的左侧（位置小）的时间不应更小等-&gt;（严格）单调递减栈 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">carFleet</span><span class=\"params\">(<span class=\"type\">int</span> target, vector&lt;<span class=\"type\">int</span>&gt;&amp; position, vector&lt;<span class=\"type\">int</span>&gt;&amp; speed)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; ps; <span class=\"comment\">//自动排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;position.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            ps[position[i]]=speed[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stack&lt;<span class=\"type\">double</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; [pos,spd]:ps)&#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> time=<span class=\"built_in\">double</span>(target-pos)/spd;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;s.<span class=\"built_in\">top</span>()&lt;=time)&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"矩形面积（完结）\"><a href=\"#矩形面积（完结）\" class=\"headerlink\" title=\"矩形面积（完结）\"></a>矩形面积（完结）</h1><h2 id=\"柱状图中最大的矩形\"><a href=\"#柱状图中最大的矩形\" class=\"headerlink\" title=\"柱状图中最大的矩形\"></a>柱状图中最大的矩形</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 单调栈的其中一种写法---处理栈中元素 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = heights.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(n,<span class=\"number\">-1</span>)</span>, <span class=\"title\">right</span><span class=\"params\">(n,n)</span></span>; <span class=\"comment\">//左边第一个小的位置、右边第一个小的位置</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; <span class=\"comment\">//处理右边</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;heights[s.<span class=\"built_in\">top</span>()]&gt;heights[i])&#123;</span><br><span class=\"line\">\t\t\t\tright[s.<span class=\"built_in\">top</span>()]=i;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        s = <span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; (); <span class=\"comment\">//清空栈</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123; <span class=\"comment\">//处理左边</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;heights[s.<span class=\"built_in\">top</span>()]&gt;heights[i])&#123;</span><br><span class=\"line\">\t\t\t\tleft[s.<span class=\"built_in\">top</span>()]=i;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, (right[i] - left[i] - <span class=\"number\">1</span>) * heights[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"好子数组的最大分数\"><a href=\"#好子数组的最大分数\" class=\"headerlink\" title=\"好子数组的最大分数\"></a>好子数组的最大分数</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***** 单调栈的另一种写法---处理当前元素 *****/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumScore</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(n,<span class=\"number\">-1</span>)</span>,<span class=\"title\">right</span><span class=\"params\">(n,n)</span></span>; <span class=\"comment\">//左边第一小的编号、右边第一小的编号</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; <span class=\"comment\">//处理左边</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums[s.<span class=\"built_in\">top</span>()]&gt;=nums[i]) s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>()) left[i]=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        s=<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt; ();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123; <span class=\"comment\">//处理右边</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;nums[s.<span class=\"built_in\">top</span>()]&gt;=nums[i]) s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>()) right[i]=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> h=nums[i],l=left[i],r=right[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l&lt;k&amp;&amp;r&gt;k)&#123; <span class=\"comment\">//多了一个区间判断</span></span><br><span class=\"line\">                ans=<span class=\"built_in\">max</span>(ans,h*(r-l<span class=\"number\">-1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最大矩形\"><a href=\"#最大矩形\" class=\"headerlink\" title=\"最大矩形\"></a>最大矩形</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=matrix.<span class=\"built_in\">size</span>(); <span class=\"comment\">//行数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> m=matrix[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); <span class=\"comment\">//列数</span></span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">left</span>(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m,<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(matrix[i][j]==<span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    left[i][j]=(j==<span class=\"number\">0</span>?<span class=\"number\">1</span>:left[i][j<span class=\"number\">-1</span>]<span class=\"number\">+1</span>); <span class=\"comment\">//往左能够延申的最大长度</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//对于每一列，使用基于柱状图求最大矩形的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">up</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">down</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">            stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; </span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;left[s.<span class=\"built_in\">top</span>()][j]&gt;=left[i][j])&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                up[i]=s.<span class=\"built_in\">empty</span>()?<span class=\"number\">-1</span>:s.<span class=\"built_in\">top</span>(); <span class=\"comment\">//上边第一个小于的编号</span></span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s=<span class=\"built_in\">stack</span>&lt;<span class=\"type\">int</span>&gt;();<span class=\"comment\">//清空栈</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;left[s.<span class=\"built_in\">top</span>()][j]&gt;=left[i][j])&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                down[i]=s.<span class=\"built_in\">empty</span>()?n:s.<span class=\"built_in\">top</span>(); <span class=\"comment\">//下边第一个小于的编号</span></span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> width=down[i]-up[i]<span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> area=width*left[i][j];</span><br><span class=\"line\">                ret=<span class=\"built_in\">max</span>(ret,area);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"统计全-1-子矩形\"><a href=\"#统计全-1-子矩形\" class=\"headerlink\" title=\"统计全 1 子矩形\"></a>统计全 1 子矩形</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numSubmat</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=mat.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> m=mat[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">height</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/*单调栈求左右更小值(同时处理)*/</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> calc=[&amp;]()-&gt;<span class=\"type\">int</span>&#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">left</span>(m,<span class=\"number\">-1</span>),<span class=\"built_in\">right</span>(m,m);</span><br><span class=\"line\"> </span><br><span class=\"line\">            stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()&amp;&amp;height[s.<span class=\"built_in\">top</span>()]&gt;height[i])&#123;</span><br><span class=\"line\">                    right[s.<span class=\"built_in\">top</span>()]=i;</span><br><span class=\"line\">                    s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                    left[i]=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">/* 计算结果时, 乘法原理 * 矩阵高度 */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">                ans+=(right[i]-i)*(i-left[i])*height[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123; <span class=\"comment\">/* 遍历每一行的高度, 更新改行的高度值使用单调栈计算左侧更小值和右侧更小值,再计算每个小矩阵出现的次数*/</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mat[i][j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    height[j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    height[j]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans+=<span class=\"built_in\">calc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接雨水\"><a href=\"#接雨水\" class=\"headerlink\" title=\"接雨水\"></a>接雨水</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">trap</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=height.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; height[s.<span class=\"built_in\">top</span>()]&lt;height[i]) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> top = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> left = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> currWidth = i - left - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> currHeight = <span class=\"built_in\">min</span>(height[left], height[i]) - height[top];</span><br><span class=\"line\">                ans += currWidth * currHeight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/***** 不能单纯找左边第一个大、右边第一个大 *****/</span></span><br><span class=\"line\"><span class=\"comment\">/*这种情况会多算</span></span><br><span class=\"line\"><span class=\"comment\">*   *</span></span><br><span class=\"line\"><span class=\"comment\">** **</span></span><br><span class=\"line\"><span class=\"comment\">** **</span></span><br><span class=\"line\"><span class=\"comment\">*****</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"最小字典序\"><a href=\"#最小字典序\" class=\"headerlink\" title=\"最小字典序\"></a>最小字典序</h1><h2 id=\"移掉-K-位数字\"><a href=\"#移掉-K-位数字\" class=\"headerlink\" title=\"移掉 K 位数字\"></a>移掉 K 位数字</h2>","tags":["编程","单调栈","c++"]},{"title":"图论算法做题总结","url":"/2024/10/07/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/","content":""},{"title":"数值计算方法","url":"/2024/10/08/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/","content":"<h2 id=\"插值法\"><a href=\"#插值法\" class=\"headerlink\" title=\"插值法\"></a>插值法</h2><p><strong>要求：实现范德蒙德多项式插值、拉格朗日插值、牛顿插值、分段线性、分段三次Hermite插值，并完成各方法之间的对比。</strong><br><font color=red>输入</font>：插值区间$[a, b]$，参数$c, d, e, f$作为标准函数$f(x) &#x3D; c \\cdot \\sin(dx) + e \\cdot \\cos(fx)$的值，参数$n+1$作为采样点的个数，参数$m$作为实验点的个数。<br><font color=red>要求</font>：在区间$[a, b]$上均匀采集个采集点，利用这$n+1$个采集点，分别使用范德蒙德多项式插值、拉格朗日插值、牛顿插值、分段线性、分段三次Hermite插值进行插值，求出$L(x)$，之后再选取$m$个点作为实验点，计算在这$m$个实验点上插值函数$L(x)$与目标函数$f(x)$的平均误差。同时对比各插值方法之间的精度差异。<br><font color=red>输出</font>：对比函数曲线，平均误差。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 范德蒙德多项式插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">vandermonde_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    coefficients = []</span><br><span class=\"line\">    c = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        coeff = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            coeff.append(x[i]**j)</span><br><span class=\"line\">        coefficients.append(coeff)</span><br><span class=\"line\">        c.append(y[i])</span><br><span class=\"line\">    A = np.array(coefficients)</span><br><span class=\"line\">    inv_A = np.linalg.inv(A)</span><br><span class=\"line\">    a = inv_A.dot(c)</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"built_in\">sum</span> += a[i] * x_values ** i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉格朗日插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lagrange_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        p = y[i]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j != i:</span><br><span class=\"line\">                p *= (x_values - x[j]) / (x[i] - x[j])</span><br><span class=\"line\">        result += p</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 牛顿插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">newton_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    coefficients = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        divided_diff = (y[i] - y[i-<span class=\"number\">1</span>]) / (x[i] - x[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">        coefficients.append(divided_diff)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-i-<span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            divided_diff = (-divided_diff + coefficients[j-<span class=\"number\">1</span>]) / (x[n-j] - x[i-<span class=\"number\">1</span>])</span><br><span class=\"line\">            coefficients[j-<span class=\"number\">1</span>] = divided_diff</span><br><span class=\"line\">    coefficients.append(y[<span class=\"number\">0</span>])</span><br><span class=\"line\">    result = coefficients[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        result = result * (x_values - x[i]) + coefficients[n-<span class=\"number\">1</span>-i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分段线性插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">piecewise_linear_interpolation</span>(<span class=\"params\">x, y, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>):</span><br><span class=\"line\">        mask = (x[i] &lt;= x_values) &amp; (x_values &lt; x[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">        slope = (y[i+<span class=\"number\">1</span>] - y[i]) / (x[i+<span class=\"number\">1</span>] - x[i])</span><br><span class=\"line\">        result += ((y[i] + slope * (x_values - x[i]))*mask)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x_values == x[n-<span class=\"number\">1</span>]):</span><br><span class=\"line\">        result = y[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分段三次Hermite插值</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">piecewise_cubic_hermite_interpolation</span>(<span class=\"params\">x, y, yy, x_values</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(x)</span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x[i] &lt;= x_values) &amp; (x_values &lt; x[i+<span class=\"number\">1</span>])):</span><br><span class=\"line\">            ai = (<span class=\"number\">1</span>+<span class=\"number\">2</span>*(x_values-x[i])/(x[i+<span class=\"number\">1</span>]-x[i]))*((x_values-x[i+<span class=\"number\">1</span>])/(x[i]-x[i+<span class=\"number\">1</span>]))**<span class=\"number\">2</span></span><br><span class=\"line\">            bi = (x_values - x[i])*((x_values-x[i+<span class=\"number\">1</span>])/(x[i]-x[i+<span class=\"number\">1</span>]))**<span class=\"number\">2</span></span><br><span class=\"line\">            ai1 = (<span class=\"number\">1</span>+<span class=\"number\">2</span>*(x_values-x[i+<span class=\"number\">1</span>])/(x[i]-x[i+<span class=\"number\">1</span>]))*((x_values-x[i])/(x[i+<span class=\"number\">1</span>]-x[i]))**<span class=\"number\">2</span></span><br><span class=\"line\">            bi1 = (x_values - x[i+<span class=\"number\">1</span>])*((x_values-x[i])/(x[i+<span class=\"number\">1</span>]-x[i]))**<span class=\"number\">2</span></span><br><span class=\"line\">            result += (y[i] * ai +yy[i] * bi +y[i+<span class=\"number\">1</span>] * ai1 +yy[i+<span class=\"number\">1</span>] * bi1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x_values == x[n-<span class=\"number\">1</span>]):</span><br><span class=\"line\">        result = y[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目标函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_function</span>(<span class=\"params\">c,d,e,f,x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [(c*np.sin(d*val)+e*np.cos(f*val)) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> x] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目标函数导函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">derivative_function</span>(<span class=\"params\">c,d,e,f,x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [(c*d*np.cos(d*val)-e*f*np.sin(f*val)) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算平均误差</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compute_average_error</span>(<span class=\"params\">f, g, x_values</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>([<span class=\"built_in\">abs</span>(f[i] - g[i]) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x_values))]) / <span class=\"built_in\">len</span>(x_values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置插值区间和参数</span></span><br><span class=\"line\">a = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">b = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">c = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">d = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">e = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">f = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">num_samples = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">num_experiments = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">x_values = [a + (b - a) * i / (num_samples - <span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_samples)]</span><br><span class=\"line\">ys = target_function(c,d,e,f,x_values)</span><br><span class=\"line\">yy = derivative_function(c,d,e,f,x_values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算实验点</span></span><br><span class=\"line\">experiment_points = [a + (b - a) * i / (num_experiments - <span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_experiments)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算各插值方法的插值结果和平均误差</span></span><br><span class=\"line\">vandermonde_interpolated = [vandermonde_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">vandermonde_error = compute_average_error(target_function(c,d,e,f,experiment_points), vandermonde_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">lagrange_interpolated = [lagrange_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">lagrange_error = compute_average_error(target_function(c,d,e,f,experiment_points), lagrange_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">newton_interpolated = [newton_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">newton_error = compute_average_error(target_function(c,d,e,f,experiment_points), newton_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">piecewise_linear_interpolated = [piecewise_linear_interpolation(x_values, ys, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">piecewise_linear_error = compute_average_error(target_function(c,d,e,f,experiment_points), piecewise_linear_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">piecewise_cubic_hermite_interpolated = [piecewise_cubic_hermite_interpolation(x_values, ys, yy, val) <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> experiment_points]</span><br><span class=\"line\">piecewise_cubic_hermite_error = compute_average_error(target_function(c,d,e,f,experiment_points), piecewise_cubic_hermite_interpolated, experiment_points)</span><br><span class=\"line\"></span><br><span class=\"line\">fig = plt.figure(num = <span class=\"number\">1</span>,dpi = <span class=\"number\">120</span>)</span><br><span class=\"line\">ax = plt.subplot(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"comment\"># 坐标轴</span></span><br><span class=\"line\">ax = plt.gca()  <span class=\"comment\"># get current axis 获得坐标轴对象</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;right&#x27;</span>].set_color(<span class=\"string\">&#x27;none&#x27;</span>)  <span class=\"comment\"># 将右边 边沿线颜色设置为空 其实就相当于抹掉这条边</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;top&#x27;</span>].set_color(<span class=\"string\">&#x27;none&#x27;</span>)</span><br><span class=\"line\">ax.xaxis.set_ticks_position(<span class=\"string\">&#x27;bottom&#x27;</span>)</span><br><span class=\"line\">ax.yaxis.set_ticks_position(<span class=\"string\">&#x27;left&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置中心的为（0，0）的坐标轴</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;bottom&#x27;</span>].set_position((<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"number\">0</span>))  <span class=\"comment\"># 指定 data 设置的bottom(也就是指定的x轴)绑定到y轴的0这个点上</span></span><br><span class=\"line\">ax.spines[<span class=\"string\">&#x27;left&#x27;</span>].set_position((<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">x=<span class=\"built_in\">list</span>(np.arange(a,b,<span class=\"number\">0.01</span>))<span class=\"comment\">#此处可调整自变量取值范围，以便选择合适的观察尺度</span></span><br><span class=\"line\">y=[]</span><br><span class=\"line\">y1=[]</span><br><span class=\"line\">y2=[]</span><br><span class=\"line\">y3=[]</span><br><span class=\"line\">y4=[]</span><br><span class=\"line\">y5=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x)):</span><br><span class=\"line\">    y = target_function(c,d,e,f,x)</span><br><span class=\"line\">    y1.append(vandermonde_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y2.append(lagrange_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y3.append(newton_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y4.append(piecewise_linear_interpolation(x_values, ys, x[i]))</span><br><span class=\"line\">    y5.append(piecewise_cubic_hermite_interpolation(x_values, ys, yy, x[i]))</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">ax.plot(x,y,label = <span class=\"string\">&quot;Target Function&quot;</span>,color =<span class=\"string\">&quot;blueviolet&quot;</span>)</span><br><span class=\"line\">ax.plot(x_values,ys, marker = <span class=\"string\">&quot;*&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;blueviolet&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y1,label = <span class=\"string\">&quot;vandermonde interpolation\\n average error=%f&quot;</span>%vandermonde_error,color =<span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, vandermonde_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y2,label = <span class=\"string\">&quot;lagrange interpolation\\n average error=%f&quot;</span>%lagrange_error,color =<span class=\"string\">&quot;yellow&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, lagrange_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;yellow&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y3,label = <span class=\"string\">&quot;newton interpolation\\n average error=%f&quot;</span>%newton_error,color =<span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, newton_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y4,label = <span class=\"string\">&quot;piecewise linear interpolation\\n average error=%f&quot;</span>%piecewise_linear_error,color =<span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, piecewise_linear_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">ax.plot(x,y5,label = <span class=\"string\">&quot;piecewise cubic hermite interpolation\\n average error=%f&quot;</span>%piecewise_cubic_hermite_error,color =<span class=\"string\">&quot;purple&quot;</span>)</span><br><span class=\"line\">ax.plot(experiment_points, piecewise_cubic_hermite_interpolated, marker = <span class=\"string\">&quot;o&quot;</span>,linestyle = <span class=\"string\">&quot;&quot;</span>, color = <span class=\"string\">&quot;purple&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#ax.set_xlim(0,2)</span></span><br><span class=\"line\"><span class=\"comment\">#plt.draw()</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数逼近\"><a href=\"#函数逼近\" class=\"headerlink\" title=\"函数逼近\"></a>函数逼近</h2><p><strong>实现最佳平方逼近与最小二乘拟合，并完成两种方法之间的对比。</strong><br><font color=red>输入</font>：函数区间 $[a, b]$ ，参数 $c$ 作为标准函数的值，参数 $k$ 作为所构造的逼近多项式的次数 $(k&#x3D;1,2,3)$ 。参数 $n+1$ 作为采样点的个数，参数 $m$ 作为实验点的个数。<br><font color=red>要求</font>：要求选用勒让德正交多项式作最佳平方逼近；在区间 $[a, b]$ 上均匀采集 $n$ 个采集点，利用这 $n+1$ 个采集点，计算采集点上的函数值，构造最小二乘拟合多项式函数。之后再选取 $m$ 个点作为实验点，计算在这 $m$ 个实验点上所构造的逼近函数与给定的目标函数 $f(x)$ 的平均误差。同时对比两种逼近方法之间的精度差异。。<br><font color=red>输出</font>：对比函数曲线，平均误差。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["数值计算方法","实验记录","Python"]},{"title":"软件工程综合实践","url":"/2024/10/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/","content":"<h2 id=\"故事场景\"><a href=\"#故事场景\" class=\"headerlink\" title=\"故事场景\"></a>故事场景</h2><blockquote>\n<p>你们是几名到某软件开发公司（以下简称T软）实习的学生。上班第一天，老板告诉你们，公司现在有个紧急项目，要求三周后上线，但是……上周末，这个项目唯一的程序员，小东，因不满公司的薪水待遇过低而离职了，现在留下了一个半成品的烂摊子，重担落在了你们几个毫无开发经验的实习生身上……</p>\n</blockquote>\n<h2 id=\"JDBC-项目\"><a href=\"#JDBC-项目\" class=\"headerlink\" title=\"JDBC 项目\"></a>JDBC 项目</h2><p><strong>主要目标：解决“使用 JDBC 封装数据层，并实现增删改查”的问题。</strong></p>\n<h2 id=\"前端项目\"><a href=\"#前端项目\" class=\"headerlink\" title=\"前端项目\"></a>前端项目</h2><p><strong>主要目标：解决“使用 HTML5+CSS3+JavaScript 开发企业级前端静态页面”的问题。</strong></p>\n<h2 id=\"JavaWeb-项目\"><a href=\"#JavaWeb-项目\" class=\"headerlink\" title=\"JavaWeb 项目\"></a>JavaWeb 项目</h2><p><strong>主要目标：解决“使用 Vue（前端）+Servlet（服务端）开发基于前后端分离架构应用程序”的问题。</strong></p>\n<h2 id=\"SpringBoot-项目\"><a href=\"#SpringBoot-项目\" class=\"headerlink\" title=\"SpringBoot 项目\"></a>SpringBoot 项目</h2><p><strong>主要目标：解决“使用 Vue（前端）+SpringBoot（服务端）开发基于前后端分离架构应用程序”的问题。</strong></p>\n<h2 id=\"SpringCloud-项目\"><a href=\"#SpringCloud-项目\" class=\"headerlink\" title=\"SpringCloud 项目\"></a>SpringCloud 项目</h2><p><strong>主要目标：解决“使用 Vue（前端）+SpringCloud（服务端）开发基于微服务的互联网应用程序”的问题。</strong></p>\n","tags":["开发"]},{"title":"计算机网络实践记录","url":"/2024/09/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/","content":"<hr>\n<ul>\n<li>天津大学 2024 计算机网络 TCP 课程实践</li>\n<li>Lab Member：海棠未雨，梨花先雪</li>\n<li>最终成绩 +∞ 分捏 😋</li>\n</ul>\n<hr>\n<h1 id=\"文件结构说明\"><a href=\"#文件结构说明\" class=\"headerlink\" title=\"文件结构说明\"></a>文件结构说明</h1><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">tju<span class=\"emphasis\">_tcp ----------------- 项目根目录 </span></span><br><span class=\"line\"><span class=\"emphasis\">├─ build ---------------- 存放所有编译的中间文件</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ kernel.o</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ tju_</span>packet.o  </span><br><span class=\"line\">│  └─ tju<span class=\"emphasis\">_tcp.o</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ inc ------------------ 存放所有头文件</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ global.h ---------- 定义一些全局都会用到的变量和结构</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ kernel.h ---------- 模拟一部分linux内核行为 比如如何发送数据到下一层 根据五元组查找socket等</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ tju_</span>packet.h ------ 定义TCP所用到的数据包格式 提供各种数据包的操作(创建 获得字段等)</span><br><span class=\"line\">│  └─ tju<span class=\"emphasis\">_tcp.h --------- 需要实现的TCP的各种结构和功能的定义</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ src ------------------ 存放所有源代码文件</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ client.c ---------- 客户端主函数实现</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ server.c ---------- 服务端主函数实现</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ kernel.c ---------- 虚拟内核实现</span></span><br><span class=\"line\"><span class=\"emphasis\">│  ├─ tju_</span>packet.c ------ 可靠层包封装实现</span><br><span class=\"line\">│  └─ tju<span class=\"emphasis\">_tcp.c --------- 可靠层实现</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ Makefile ------------- 生成脚本</span></span><br><span class=\"line\"><span class=\"emphasis\">├─ README.md ------------ 文件说明</span></span><br><span class=\"line\"><span class=\"emphasis\">└─ bin</span></span><br><span class=\"line\"><span class=\"emphasis\">   ├─ client</span></span><br><span class=\"line\"><span class=\"emphasis\">   └─ server</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"系统环境信息\"><a href=\"#系统环境信息\" class=\"headerlink\" title=\"系统环境信息\"></a>系统环境信息</h1><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">neofetch</span><br><span class=\"line\">--------------</span><br><span class=\"line\">OS: Ubuntu 20.04.2 LTS x86_64</span><br><span class=\"line\">Host: Oracle Corporation VirtualBox</span><br><span class=\"line\">Kernel: 5.4.0-80-generic</span><br><span class=\"line\">Uptime: 3 mins</span><br><span class=\"line\">Packages: 676 (dpkg), 4 (snap)</span><br><span class=\"line\">Shell: bash 5.0.17</span><br><span class=\"line\">Resolution: 800x600</span><br><span class=\"line\">Terminal: /dev/pts/0</span><br><span class=\"line\">CPU: 11th Gen Intel i7-11800H (2) @ 2.304GHz</span><br><span class=\"line\">GPU: VirtualBox Graphics Adapter</span><br><span class=\"line\">Memory: 294MiB / 981MiB</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"具体实验记录\"><a href=\"#具体实验记录\" class=\"headerlink\" title=\"具体实验记录\"></a>具体实验记录</h1><h2 id=\"连接管理\"><a href=\"#连接管理\" class=\"headerlink\" title=\"连接管理\"></a>连接管理</h2><center>\n<img src=\"https://s2.loli.net/2024/10/11/t2LOxSBZgRkiblj.png\" width=\"60%\" />\n</center>\n\n<h3 id=\"三次握手建立连接\"><a href=\"#三次握手建立连接\" class=\"headerlink\" title=\"三次握手建立连接\"></a>三次握手建立连接</h3><p><strong>1. tju_connect( )</strong><br><code>tju_connect( )</code>函数是三次握手的开端。在该函数中，客户端的sock绑定好本地的ip和port后向服务器端发送SYN包，同时把当前的状态变化为SYN_SENT。成功建立连接后将sock放入ESTABLISHED的hash表中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_connect</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, tju_sock_addr target_addr)</span>&#123;</span><br><span class=\"line\">    sock-&gt;established_remote_addr = target_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    tju_sock_addr local_addr;</span><br><span class=\"line\">    local_addr.ip = inet_network(CLIENT_IP);</span><br><span class=\"line\">    local_addr.port = <span class=\"number\">5678</span>; <span class=\"comment\">// 连接方进行connect连接的时候 内核中是随机分配一个可用的端口</span></span><br><span class=\"line\">    sock-&gt;established_local_addr = local_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里也不能直接建立连接 需要经过三次握手</span></span><br><span class=\"line\">    <span class=\"comment\">// 实际在linux中 connect调用后 会进入一个while循环</span></span><br><span class=\"line\">    <span class=\"comment\">// 循环跳出的条件是socket的状态变为ESTABLISHED 表面看上去就是 正在连接中 阻塞</span></span><br><span class=\"line\">    <span class=\"comment\">// 而状态的改变在别的地方进行 在我们这就是tju_handle_packet</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> seq = <span class=\"number\">0</span>;  <span class=\"comment\">// 序列号</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ack = <span class=\"number\">0</span>;  <span class=\"comment\">// 确认号</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> flag=SYN_FLAG_MASK; <span class=\"comment\">//flag标记为：连接状态进行到哪一步</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *SYN = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    sendToLayer3(SYN, DEFAULT_HEADER_LEN); <span class=\"comment\">//客户端向服务器端发送同步报文--第一次握手</span></span><br><span class=\"line\">    change_sock_state(sock, SYN_SENT);</span><br><span class=\"line\">    <span class=\"comment\">// printf(&quot;client发送SYN\\n&quot;);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Timeout_retransmission(sock, ESTABLISHED, SYN, DEFAULT_HEADER_LEN); <span class=\"comment\">//阻塞等待，直到sock被建立</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hashval = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">    established_socks[hashval] = sock;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. Timeout_retransmission( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Timeout_retransmission</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">int</span> exp_state, <span class=\"type\">char</span>* pkt, <span class=\"type\">int</span> pktlen)</span> &#123; <span class=\"comment\">//超时重传发包函数</span></span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;bg1\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"type\">long</span> timeout = <span class=\"number\">100000L</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">start_time</span>, <span class=\"title\">end_time</span>;</span></span><br><span class=\"line\">    gettimeofday(&amp;start_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sock-&gt;state != exp_state)&#123;</span><br><span class=\"line\">        gettimeofday(&amp;end_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> Time = <span class=\"number\">1000000L</span> * (end_time.tv_sec - start_time.tv_sec) + (end_time.tv_usec - start_time.tv_usec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Time &gt;= timeout) &#123; <span class=\"comment\">//超时重传</span></span><br><span class=\"line\">            gettimeofday(&amp;start_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            sendToLayer3(pkt, pktlen);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;ed1\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. change_sock_state( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">change_sock_state</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">int</span> state)</span> &#123;  <span class=\"comment\">//添加：sock状态改变</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;state_lock)) != <span class=\"number\">0</span>) ; <span class=\"comment\">//改变sock状态前先加锁</span></span><br><span class=\"line\">    sock-&gt;state = state;  </span><br><span class=\"line\">    pthread_mutex_unlock(&amp;(sock-&gt;state_lock)); <span class=\"comment\">//解锁</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. tju_accept()</strong><br><code>tju_accept( )</code>函数中添加了一个阻塞，使得只有当全连接hash表中存在这一个sock，服务器端才算连接完成，才能把新的sock加入到ESTABLISHED的hash表中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">tju_tcp_t</span> *<span class=\"title function_\">tju_accept</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *listen_sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (listen_sock-&gt;received_len &lt; DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    <span class=\"type\">char</span> *header = <span class=\"built_in\">malloc</span>(DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(header, listen_sock-&gt;received_buf, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(listen_sock-&gt;received_buf, <span class=\"number\">0</span>, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    listen_sock-&gt;received_buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    listen_sock-&gt;received_len = listen_sock-&gt;received_len - DEFAULT_HEADER_LEN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">tju_tcp_t</span>* new_conn = (<span class=\"type\">tju_tcp_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">tju_tcp_t</span>));</span><br><span class=\"line\">    pthread_mutex_init(&amp;(new_conn-&gt;state_lock), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(new_conn, listen_sock, <span class=\"keyword\">sizeof</span>(<span class=\"type\">tju_tcp_t</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    tju_sock_addr local_addr, remote_addr;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     这里涉及到TCP连接的建立</span></span><br><span class=\"line\"><span class=\"comment\">     正常来说应该是收到客户端发来的SYN报文</span></span><br><span class=\"line\"><span class=\"comment\">     从中拿到对端的IP和PORT</span></span><br><span class=\"line\"><span class=\"comment\">     换句话说 下面的处理流程其实不应该放在这里 应该在tju_handle_packet中</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    remote_addr.ip = inet_network(CLIENT_IP);  <span class=\"comment\">//具体的IP地址</span></span><br><span class=\"line\">    remote_addr.port = <span class=\"number\">5678</span>;  <span class=\"comment\">//端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    local_addr.ip = listen_sock-&gt;bind_addr.ip;  <span class=\"comment\">//具体的IP地址</span></span><br><span class=\"line\">    local_addr.port = listen_sock-&gt;bind_addr.port;  <span class=\"comment\">//端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">    new_conn-&gt;established_local_addr = local_addr;</span><br><span class=\"line\">    new_conn-&gt;established_remote_addr = remote_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (listen_sock-&gt;state != ESTABLISHED) ;</span><br><span class=\"line\">    change_sock_state(new_conn, ESTABLISHED);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新的conn放到内核建立连接的socket哈希表中</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hashval = cal_hash(local_addr.ip, local_addr.port, remote_addr.ip, remote_addr.port);</span><br><span class=\"line\">    established_socks[hashval] = new_conn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_conn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5. tju_handle_packet( )</strong><br><code>tju_handle_packet( )</code>函数中需要解决对各种报文的解析。<code>onTCPPocket( )</code>函数如果从established_hash或listen_hash中找到了对应的socket，就会调用 <code>tju_handle_packet( )</code>函数对收到的数据包进行处理。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_handle_packet</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;state == LISTEN &amp;&amp; get_flags(pkt) == SYN_FLAG_MASK)&#123; <span class=\"comment\">//第二次握手</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;recv_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sock-&gt;received_buf == <span class=\"literal\">NULL</span>) sock-&gt;received_buf = <span class=\"built_in\">malloc</span>(DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> sock-&gt;received_buf = <span class=\"built_in\">realloc</span>(sock-&gt;received_buf, sock-&gt;received_len + DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sock-&gt;received_buf + sock-&gt;received_len, pkt, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        sock-&gt;received_len += DEFAULT_HEADER_LEN;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;recv_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">        tju_sock_addr remote;</span><br><span class=\"line\">        remote.ip = inet_network(CLIENT_IP);</span><br><span class=\"line\">        remote.port = get_src(pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">        sock-&gt;established_local_addr = sock-&gt;bind_addr;</span><br><span class=\"line\">        sock-&gt;established_remote_addr = remote;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> hashval = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port, remote.ip, remote.port);</span><br><span class=\"line\">        half_connection[hashval] = sock;  <span class=\"comment\">//收到SYN报文后放进LISTEN的半连接队列中</span></span><br><span class=\"line\">        established_socks[hashval] = sock; <span class=\"comment\">//还会将该新建的socket放到ehash中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>; <span class=\"comment\">//确认号是SYN报文序列号+1</span></span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = SYN_FLAG_MASK | ACK_FLAG_MASK; <span class=\"comment\">//状态记为SYN+ACK，这里采用位运算|</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *SYNACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(SYNACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, SYN_RECV);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == SYN_SENT &amp;&amp; get_flags(pkt) == (ACK_FLAG_MASK | SYN_FLAG_MASK))&#123; <span class=\"comment\">//第三次握手</span></span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;client收到SYCACK, 准备发送ACK\\n&quot;);</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;base = seq;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;nextseq = seq;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, get_src(pkt), seq,ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, ESTABLISHED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == SYN_SENT &amp;&amp; get_flags(pkt) == SYN_FLAG_MASK)&#123; <span class=\"comment\">//第三次握手（奇怪）</span></span><br><span class=\"line\">        <span class=\"comment\">// //printf(&quot;client收到SYCACK, 准备发送ACK\\n&quot;);</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;base = seq;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;nextseq = seq;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, get_src(pkt), seq,ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, ESTABLISHED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == (SYN_FLAG_MASK | ACK_FLAG_MASK))&#123;  <span class=\"comment\">//三次握手第三个包的重传</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == SYN_RECV &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// //printf(&quot;server收到ACK\\n&quot;);</span></span><br><span class=\"line\">        sock-&gt;window.wnd_recv-&gt;expect_seq = get_seq(pkt) + get_plen(pkt) - DEFAULT_HEADER_LEN;</span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        com_connection[hash] = sock;</span><br><span class=\"line\">        half_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        change_sock_state(sock, ESTABLISHED);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (get_plen(pkt) &gt; DEFAULT_HEADER_LEN) &#123; <span class=\"comment\">//ACK包携带信息</span></span><br><span class=\"line\">            pkt2buffer(sock, pkt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>6. pkt2buffer( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">pkt2buffer</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;bg6\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> data_len = get_plen(pkt) - DEFAULT_HEADER_LEN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;recv_lock)) != <span class=\"number\">0</span>); <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;received_buf == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        sock-&gt;received_buf = <span class=\"built_in\">malloc</span>(data_len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sock-&gt;received_buf = <span class=\"built_in\">realloc</span>(sock-&gt;received_buf, sock-&gt;received_len + data_len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(sock-&gt;received_buf + sock-&gt;received_len, pkt + DEFAULT_HEADER_LEN, data_len);    </span><br><span class=\"line\">    sock-&gt;received_len += data_len;</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;(sock-&gt;recv_lock)); <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;ed6\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四次挥手关闭连接\"><a href=\"#四次挥手关闭连接\" class=\"headerlink\" title=\"四次挥手关闭连接\"></a>四次挥手关闭连接</h3><p><strong>1. tju_close ( )</strong><br>四次挥手有两种情况，分别为先后关闭和同时关闭，两种方式首先都需要调用<code>tju_close( )</code>函数，因此，在<code>tju_close( )</code>函数中，需要构造一个 FIN+ACK 报文，seq和ack都是当前报文窗口的下一个数值，并把自身状态变为 FIN-WAIT1。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_close</span> <span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> flag = FIN_FLAG_MASK | ACK_FLAG_MASK;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">    <span class=\"type\">char</span>* FINACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    sendToLayer3(FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    change_sock_state(sock, FIN_WAIT_1);</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;nextseq++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sock-&gt;state != CLOSED) ;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;连接完全关闭\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. tju_handle_packet( )</strong><br>接下来分为两种情况，但处理过程均在<code>tju_handle_packet( )</code>中完成，<code>tju_handle_packet( )</code>作为对收到的包进行响应的函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_handle_packet</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == (FIN_FLAG_MASK | ACK_FLAG_MASK))&#123; <span class=\"comment\">// server收到第一次挥手，并进行第二次挥手和第三次挥手</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第二次挥手报文\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSE_WAIT);</span><br><span class=\"line\">        </span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = ACK_FLAG_MASK | FIN_FLAG_MASK;</span><br><span class=\"line\">        seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">        ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> *FINACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第三次挥手报文\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, LAST_ACK);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == FIN_FLAG_MASK)&#123; <span class=\"comment\">// server收到第一次挥手，并进行第二次挥手和第三次挥手</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        change_sock_state(sock, CLOSE_WAIT);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第二次挥手报文\\n&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = ACK_FLAG_MASK | FIN_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *FINACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;发送第三次挥手报文\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, LAST_ACK);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, FINACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == FIN_WAIT_1 &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123; <span class=\"comment\">// client收到第二次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, FIN_WAIT_2);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;收到第二次挥手报文\\n&quot;);</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == FIN_WAIT_2 &amp;&amp; (get_flags(pkt) == (ACK_FLAG_MASK | FIN_FLAG_MASK)))&#123; <span class=\"comment\">// client收到第三次挥手进行第四次挥手并关闭连接</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN,flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;收到第三次挥手报文, 并发出第四次挥手\\n&quot;);</span></span><br><span class=\"line\">        change_sock_state(sock, TIME_WAIT);</span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port,    sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        <span class=\"comment\">//这里要等待2MSL</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSED);</span><br><span class=\"line\">        established_socks[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;关闭连接\\n&quot;);</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == LAST_ACK &amp;&amp; (get_flags(pkt) == ACK_FLAG_MASK))&#123; <span class=\"comment\">// server收到第四次挥手并关闭连接</span></span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        established_socks[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        half_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        com_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        change_sock_state(sock, CLOSED);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;关闭连接\\n&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == FIN_WAIT_1 &amp;&amp; (get_flags(pkt) == (FIN_FLAG_MASK | ACK_FLAG_MASK)))&#123; <span class=\"comment\">// 同时关闭收到第一次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSING);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span>* ACK = create_packet_buf(sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.port,seq,ack,DEFAULT_HEADER_LEN,DEFAULT_HEADER_LEN,flag,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK,DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        <span class=\"comment\">// //printf(&quot;同时关闭发出ACK\\n&quot;);</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sock-&gt;state == FIN_WAIT_1 &amp;&amp; get_flags(pkt) == FIN_FLAG_MASK)&#123; <span class=\"comment\">// 同时关闭收到第一次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, CLOSING);</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = get_ack(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = get_seq(pkt) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">uint16_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span>* ACK = create_packet_buf(sock-&gt;established_local_addr.port,sock-&gt;established_remote_addr.port,seq,ack,DEFAULT_HEADER_LEN,DEFAULT_HEADER_LEN,flag,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        Timeout_retransmission(sock, CLOSED, ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;state == CLOSING &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123; <span class=\"comment\">// 同时关闭时收到第三次挥手</span></span><br><span class=\"line\">        change_sock_state(sock, TIME_WAIT);</span><br><span class=\"line\">        <span class=\"comment\">//等待2MSL</span></span><br><span class=\"line\">        <span class=\"type\">int</span> hash = cal_hash(sock-&gt;established_local_addr.ip, sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.ip, sock-&gt;established_remote_addr.port);</span><br><span class=\"line\">        established_socks[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        half_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        com_connection[hash] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        change_sock_state(sock, CLOSED);</span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;同时关闭彻底关闭\\n&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可靠数据传输\"><a href=\"#可靠数据传输\" class=\"headerlink\" title=\"可靠数据传输\"></a>可靠数据传输</h2><h3 id=\"发送缓冲区管理\"><a href=\"#发送缓冲区管理\" class=\"headerlink\" title=\"发送缓冲区管理\"></a>发送缓冲区管理</h3><p><strong>1. <code>global.h</code> 中宏定义 TCP 发送窗口大小。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TCP_SENDWN_SIZE 1000 </span></span><br></pre></td></tr></table></figure>\n<p><strong>2. <code>tju_packet.h</code> 中为发送缓冲区创建1000个报文长度的循环队列，方便数据包超时重传。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TCP 报文的结构定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">tju_header_t</span> header;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">sent_time</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* data;</span><br><span class=\"line\">&#125; <span class=\"type\">tju_packet_t</span>;</span><br><span class=\"line\"><span class=\"type\">tju_packet_t</span>* pktlist[TCP_SENDWN_SIZE];</span><br></pre></td></tr></table></figure>\n<p><strong>3. tju_send( )</strong><br>上层调用 <code>tju_send( )</code> 时，我们在 <code>tju_send( )</code>函数内创建发送线程并把发送数据存入缓冲区中。<br>&emsp;这里我们先了解一下创建线程 <code>pthread_create( )</code>函数。</p>\n<blockquote>\n<p>int pthread_create(pthread_t* restrict tidp,const pthread_attr_t* restrict_attr,void* (<em>start_rtn)(void</em>),void *restrict arg);</p>\n<ul>\n<li>tidp：事先创建好的pthread_t类型的参数。成功时tidp指向的内存单元被设置为新创建线程的线程ID。</li>\n<li>attr：用于定制各种不同的线程属性。APUE的12.3节讨论了线程属性。通常直接设为NULL。</li>\n<li>start_rtn：新创建线程从此函数开始运行。无参数是arg设为NULL即可。</li>\n<li>arg：start_rtn函数的参数。无参数时设为NULL即可。有参数时输入参数的地址。当多于一个参数时应当使用结构体传入。</li>\n<li>返回值为 0（表示线程成功创建）。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> send_thread_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_send</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">const</span> <span class=\"type\">void</span> *buffer, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里当然不能直接简单地调用sendToLayer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!send_thread_flag)&#123;</span><br><span class=\"line\">        send_thread_flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">pthread_t</span> sendthreadid;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = pthread_create(&amp;sendthreadid, <span class=\"literal\">NULL</span>, send_pkt, (<span class=\"type\">void</span> *)sock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;send_lock)) != <span class=\"number\">0</span>) ;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(sock-&gt;sending_buf + sock-&gt;index, (<span class=\"type\">char</span>*)buffer, len);</span><br><span class=\"line\">    sock-&gt;sending_len += len;</span><br><span class=\"line\">    sock-&gt;index += len;</span><br><span class=\"line\">    pthread_mutex_unlock(&amp;(sock-&gt;send_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. send_pkt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">send_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;bg4\\n&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//struct timeval start_time, now_time;</span></span><br><span class=\"line\">    <span class=\"comment\">//gettimeofday(&amp;start_time, NULL);</span></span><br><span class=\"line\">    <span class=\"comment\">//long deltatime = 0; //时间差</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123; <span class=\"comment\">//不断检查和发送数据包</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;nextseq &lt; sock-&gt;index)&#123; <span class=\"comment\">//检查发送窗口：检查当前发送序列号是否小于索引，确保有数据需要发送。</span></span><br><span class=\"line\">            <span class=\"comment\">//gettimeofday(&amp;now_time, NULL);</span></span><br><span class=\"line\">            <span class=\"comment\">//deltatime = now_time.tv_sec - start_time.tv_sec;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pthread_mutex_lock(&amp;(sock-&gt;send_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> unlen = sock-&gt;sending_len - (sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base); <span class=\"comment\">//计算当前未发送的数据长度。 </span></span><br><span class=\"line\">            <span class=\"type\">int</span> len = min(unlen, MAX_DLEN); <span class=\"comment\">//确定本次发送的长度，取未发送长度和最大数据长度中的最小值。 </span></span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;send_lock));</span><br><span class=\"line\">            <span class=\"type\">int</span> leftlen = sock-&gt;window.wnd_send-&gt;rwnd - (sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base);</span><br><span class=\"line\">            len =len&gt;leftlen?leftlen:len;            </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base + len &lt;= sock-&gt;window.wnd_send-&gt;rwnd) &#123; <span class=\"comment\">//检查窗口大小：检查当前已发送的长度加上本次发送长度是否在接收窗口范围内。 </span></span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> ack = seq + len; <span class=\"comment\">//不理解 </span></span><br><span class=\"line\">                <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">                <span class=\"type\">uint16_t</span> pkt_len = len + DEFAULT_HEADER_LEN;</span><br><span class=\"line\">                <span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(MAX_DLEN);</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(data, sock-&gt;sending_buf + sock-&gt;window.wnd_send-&gt;nextseq, len);</span><br><span class=\"line\">                <span class=\"type\">tju_packet_t</span> *datapacket = create_packet(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, pkt_len, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data, len);</span><br><span class=\"line\">                <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port,seq, ack, DEFAULT_HEADER_LEN, pkt_len, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data, len);</span><br><span class=\"line\"></span><br><span class=\"line\">                sendToLayer3(ACK, pkt_len);</span><br><span class=\"line\">                </span><br><span class=\"line\">                sock-&gt;window.wnd_send-&gt;nextseq += len;</span><br><span class=\"line\">                pktlist[sock-&gt;packetr] = datapacket;</span><br><span class=\"line\">                gettimeofday(&amp;pktlist[sock-&gt;packetr]-&gt;sent_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                sock-&gt;packetr = (sock-&gt;packetr + <span class=\"number\">1</span>) % TCP_SENDWN_SIZE;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (len == (<span class=\"type\">int</span>)(sock-&gt;window.wnd_send-&gt;nextseq - sock-&gt;window.wnd_send-&gt;base))&#123;</span><br><span class=\"line\">                    gettimeofday(&amp;(sock-&gt;window.wnd_send-&gt;send_time), <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">                    sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ed4\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"失序报文数组的管理\"><a href=\"#失序报文数组的管理\" class=\"headerlink\" title=\"失序报文数组的管理\"></a>失序报文数组的管理</h3><p><strong>1. tju_handle_packet( )</strong><br><code>tju_handle_packet( )</code>中添加建立连接后收到数据包的处理。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_handle_packet</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;</span><br><span class=\"line\">    `````` 建立连接 ``````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sock-&gt;state == ESTABLISHED &amp;&amp; get_flags(pkt) == ACK_FLAG_MASK)&#123; <span class=\"comment\">//收到数据包</span></span><br><span class=\"line\">        <span class=\"type\">char</span> hostname[<span class=\"number\">8</span>];</span><br><span class=\"line\">        gethostname(hostname, <span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(hostname, <span class=\"string\">&quot;server&quot;</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            serverrdt(sock, pkt);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            clientrdt(sock, pkt);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    `````` 关闭连接 ``````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">    ````````````````````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. <code>tju_tcp_t</code> 结构体中创建空间用来存储失序报文并记录失序报文的个数。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TJU_TCP 结构体 保存TJU_TCP用到的各种数据</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> unorder[<span class=\"number\">100</span>][MAX_LEN]; <span class=\"comment\">//失序报文数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> unolen; <span class=\"comment\">//失序报文个数</span></span><br><span class=\"line\">&#125; <span class=\"type\">tju_tcp_t</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>3. serverrdt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">serverrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 服务器端处理数据包</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (get_seq(pkt) &lt; (sock-&gt;window.wnd_recv-&gt;expect_seq))&#123; <span class=\"comment\">//函数发送一个 ACK 响应已确认接收</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_seq(pkt) &gt; (sock-&gt;window.wnd_recv-&gt;expect_seq))&#123; <span class=\"comment\">//数据包乱序，函数将包暂存，并发送 ACK，同时更新接收窗口</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">        <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((sock-&gt;unolen) &gt; MAX_PKT_IN_WINDOW)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sock-&gt;unorder[sock-&gt;unolen], pkt, get_plen(pkt));</span><br><span class=\"line\">        sock-&gt;unolen++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123; <span class=\"comment\">//刚刚好</span></span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;nextseq=get_ack(pkt);</span><br><span class=\"line\">        sock-&gt;window.wnd_recv-&gt;expect_seq+=get_plen(pkt)-DEFAULT_HEADER_LEN;</span><br><span class=\"line\">        pkt2buffer(sock,pkt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;unolen == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">            <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">            <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag,TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> len = sock-&gt;unolen;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(get_seq(sock-&gt;unorder[i])&gt;get_seq(sock-&gt;unorder[j]))&#123;</span><br><span class=\"line\">                        my_swap(&amp;sock-&gt;unorder[i], &amp;sock-&gt;unorder[j]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; index &lt; len; index++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(get_seq(sock-&gt;unorder[index]) == sock-&gt;window.wnd_recv-&gt;expect_seq)&#123;</span><br><span class=\"line\">                    sock-&gt;window.wnd_send-&gt;nextseq = get_ack(sock-&gt;unorder[index]);</span><br><span class=\"line\">                    sock-&gt;window.wnd_recv-&gt;expect_seq += get_plen(sock-&gt;unorder[index]) - DEFAULT_HEADER_LEN;</span><br><span class=\"line\">                    pkt2buffer(sock, sock-&gt;unorder[index]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_seq(sock-&gt;unorder[index]) &lt; (sock-&gt;window.wnd_recv-&gt;expect_seq)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = index; i &lt; len; i++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(sock-&gt;unorder[i - index], sock-&gt;unorder[i], <span class=\"keyword\">sizeof</span>(sock-&gt;unorder[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sock-&gt;unolen -= index;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">            <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">            <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            sendToLayer3(ACK, DEFAULT_HEADER_LEN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. my_swap( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_swap</span><span class=\"params\">(<span class=\"type\">char</span>** a, <span class=\"type\">char</span>** b)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* tem = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(MAX_LEN);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(tem, a, get_plen(b));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(a, b, get_plen(b));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(b, tem, get_plen(tem));</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(tem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现累计应答\"><a href=\"#实现累计应答\" class=\"headerlink\" title=\"实现累计应答\"></a>实现累计应答</h3><center>\n<img src=\"https://s2.loli.net/2024/10/11/vKkuC1ibGfmo2sM.png\" width=\"60%\" />\n\n<p>Figure 1. 累计应答</p>\n</center>\n\n<p><strong>1. clientrdt( )</strong><br><code>clientrdt( )</code>函数中添加累计应答处理。当发送方收到任意大于当前base的ack报文后，直接把当前base进行更新即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 客户端处理数据包</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;base == sock-&gt;window.wnd_send-&gt;nextseq) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (get_ack(pkt) &lt; sock-&gt;window.wnd_send-&gt;base) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;send_lock)) != <span class=\"number\">0</span>); <span class=\"comment\">//加锁</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sock-&gt;window.wnd_send-&gt;base &lt; get_ack(pkt) &amp;&amp; sock-&gt;window.wnd_send-&gt;base &lt; sock-&gt;window.wnd_send-&gt;nextseq )&#123;   </span><br><span class=\"line\">            <span class=\"type\">int</span> pkt_len = pktlist[sock-&gt;packetl]-&gt;header.plen;</span><br><span class=\"line\">            <span class=\"type\">int</span> datalen = pkt_len - DEFAULT_HEADER_LEN;</span><br><span class=\"line\">            sock-&gt;sending_len -= datalen;</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;base += datalen;</span><br><span class=\"line\">            sock-&gt;packetl = (sock-&gt;packetl + <span class=\"number\">1</span>) % TCP_SENDWN_SIZE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;send_lock)); <span class=\"comment\">//解锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时重传\"><a href=\"#超时重传\" class=\"headerlink\" title=\"超时重传\"></a>超时重传</h3><p><strong>1. tju_send( )</strong><br><code>tju_send( )</code> 中创建了一个新的线程判断是否要进行重传。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> resend_thread_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tju_send</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">const</span> <span class=\"type\">void</span> *buffer, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!resend_thread_flag)&#123;</span><br><span class=\"line\">        resend_thread_flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">pthread_t</span> resendthreadid;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = pthread_create(&amp;resendthreadid, <span class=\"literal\">NULL</span>,resend_pkt, (<span class=\"type\">void</span> *)sock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. resend_pkt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">resend_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">start_time</span>,<span class=\"title\">now_time</span>;</span></span><br><span class=\"line\">    gettimeofday(&amp;start_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"type\">long</span> deltatime = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;base &lt; sock-&gt;window.wnd_send-&gt;nextseq)&#123;</span><br><span class=\"line\">            gettimeofday(&amp;now_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            deltatime = now_time.tv_sec - start_time.tv_sec;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deltatime &gt; <span class=\"number\">100</span>) <span class=\"keyword\">break</span>; <span class=\"comment\">//不理解</span></span><br><span class=\"line\">            <span class=\"type\">long</span> nowtimeval = <span class=\"number\">1000000</span> * (now_time.tv_sec - sock-&gt;window.wnd_send-&gt;send_time.tv_sec) +  (now_time.tv_usec - sock-&gt;window.wnd_send-&gt;send_time.tv_usec);</span><br><span class=\"line\">            <span class=\"type\">long</span> timeoutval = <span class=\"number\">1000000</span> * (sock-&gt;window.wnd_send-&gt;timeout.tv_sec) + (sock-&gt;window.wnd_send-&gt;timeout.tv_usec);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nowtimeval &gt; timeoutval)&#123; <span class=\"comment\">//超时重传</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(pktlist[sock-&gt;packetl] == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> seq = pktlist[sock-&gt;packetl]-&gt;header.seq_num;</span><br><span class=\"line\">                <span class=\"type\">uint32_t</span> ack = pktlist[sock-&gt;packetl]-&gt;header.ack_num;</span><br><span class=\"line\">                <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">                <span class=\"type\">int</span> pkt_len = pktlist[sock-&gt;packetl]-&gt;header.plen;</span><br><span class=\"line\">                <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack,DEFAULT_HEADER_LEN, pkt_len, flag, <span class=\"number\">0</span>, <span class=\"number\">0</span>, pktlist[sock-&gt;packetl]-&gt;data, pkt_len - DEFAULT_HEADER_LEN);</span><br><span class=\"line\">                sendToLayer3(ACK, pkt_len);</span><br><span class=\"line\">                gettimeofday(&amp;pktlist[sock-&gt;packetl]-&gt;sent_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">                gettimeofday(&amp;sock-&gt;window.wnd_send-&gt;send_time, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. clientrdt( )</strong><br><code>clientrdt( )</code> 函数中添加动态设置超时间隔的实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 客户端处理数据包</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//更新RTO</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">nowtime</span>;</span></span><br><span class=\"line\">        gettimeofday(&amp;nowtime, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> ntime = <span class=\"number\">1000000</span> * nowtime.tv_sec + nowtime.tv_usec;</span><br><span class=\"line\">        <span class=\"type\">long</span> samplertt = <span class=\"number\">1000000</span> * (nowtime.tv_sec-pktlist[sock-&gt;packetl]-&gt;sent_time.tv_sec)+nowtime.tv_usec-pktlist[sock-&gt;packetl]-&gt;sent_time.tv_usec;</span><br><span class=\"line\">        <span class=\"type\">long</span> estmatedrtt = sock-&gt;window.wnd_send-&gt;estmated_rtt;</span><br><span class=\"line\">        <span class=\"type\">long</span> devrtt = sock-&gt;window.wnd_send-&gt;dev_rtt;</span><br><span class=\"line\">        estmatedrtt = <span class=\"number\">1.0</span> * estmatedrtt * <span class=\"number\">7</span> / <span class=\"number\">8</span> + samplertt / <span class=\"number\">8</span>;</span><br><span class=\"line\">        devrtt = <span class=\"number\">1.0</span> * devrtt * <span class=\"number\">3</span> / <span class=\"number\">4</span> + (samplertt &gt; <span class=\"number\">1.0</span> * estmatedrtt ? (samplertt - estmatedrtt) : (estmatedrtt - samplertt)) / <span class=\"number\">4</span>;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;timeout.tv_usec = (estmatedrtt + <span class=\"number\">4</span> * devrtt) % <span class=\"number\">1000000</span>;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;timeout.tv_sec = (estmatedrtt + <span class=\"number\">4</span> * devrtt) / <span class=\"number\">1000000</span>;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;estmated_rtt = estmatedrtt;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;dev_rtt = devrtt;</span><br><span class=\"line\">        <span class=\"type\">double</span> dsamplertt=(<span class=\"type\">double</span>)samplertt/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> destmatedrtt=(<span class=\"type\">double</span>)estmatedrtt/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> ddevrtt=(<span class=\"type\">double</span>)devrtt/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> dtimegap=(<span class=\"type\">double</span>)(estmatedrtt + <span class=\"number\">4</span> * devrtt)/(<span class=\"type\">double</span>)<span class=\"number\">1000000</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速重传\"><a href=\"#快速重传\" class=\"headerlink\" title=\"快速重传\"></a>快速重传</h3><center>\n<img src=\"https://s2.loli.net/2024/10/11/cj2PfZsz8abBVW9.png\" width=\"60%\" />\n\n<p>Figure 1. 快速重传</p>\n</center>\n\n<p><strong>1. clientrdt( )</strong><br><code>clientrdt( )</code> 函数中添加快速重传的实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123; <span class=\"comment\">// 客户端处理数据包</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(get_ack(pkt) == sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//冗余ACK</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;ack_cnt++;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;ack_cnt == <span class=\"number\">3</span>)&#123; <span class=\"comment\">//快速重传 </span></span><br><span class=\"line\">            ``````</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> seq = pktlist[sock-&gt;packetl]-&gt;header.seq_num;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> ack = pktlist[sock-&gt;packetl]-&gt;header.ack_num;</span><br><span class=\"line\">            <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">            <span class=\"type\">int</span> pkt_len = pktlist[sock-&gt;packetl]-&gt;header.plen;</span><br><span class=\"line\">            <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, pkt_len, ACK_FLAG_MASK, <span class=\"number\">0</span>, <span class=\"number\">0</span>, pktlist[sock-&gt;packetl]-&gt;data, pkt_len - DEFAULT_HEADER_LEN);</span><br><span class=\"line\">            sendToLayer3(ACK, pkt_len);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            gettimeofday(&amp;pktlist[sock-&gt;packetl]-&gt;sent_time, <span class=\"literal\">NULL</span>);            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h2><h3 id=\"接收方计算接受缓冲区大小\"><a href=\"#接收方计算接受缓冲区大小\" class=\"headerlink\" title=\"接收方计算接受缓冲区大小\"></a>接收方计算接受缓冲区大小</h3><p><strong>1. serverrdt( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">serverrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock, <span class=\"type\">char</span>* pkt)</span>&#123;<span class=\"comment\">// 服务端处理数据包</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> seq = sock-&gt;window.wnd_send-&gt;nextseq;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ack = sock-&gt;window.wnd_recv-&gt;expect_seq;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> flag = ACK_FLAG_MASK;</span><br><span class=\"line\">    <span class=\"type\">char</span> *ACK = create_packet_buf(sock-&gt;established_local_addr.port, sock-&gt;established_remote_addr.port, seq, ack, DEFAULT_HEADER_LEN, DEFAULT_HEADER_LEN, flag, TCP_RECVWN_SIZE-(sock-&gt;unolen)*MAX_DLEN, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送方调整发送缓冲区大小\"><a href=\"#发送方调整发送缓冲区大小\" class=\"headerlink\" title=\"发送方调整发送缓冲区大小\"></a>发送方调整发送缓冲区大小</h3><p><strong>1. clientrdt( )</strong><br><code>clientrdt( )</code>函数确定window_size大小。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````get_advertised_window(pkt)``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. get_advertised_window( )</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint16_t</span> <span class=\"title function_\">get_advertised_window</span><span class=\"params\">(<span class=\"type\">char</span>* msg)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> offset = <span class=\"number\">17</span>;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> var;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;var, msg+offset, SIZE16);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ntohs(var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"0窗口探测\"><a href=\"#0窗口探测\" class=\"headerlink\" title=\"0窗口探测\"></a>0窗口探测</h3><p><strong>1. send_pkt( )</strong><br><code>send_pkt( )</code>发送数据的线程中加入一个判断条件。<br>0窗口探测用于在ADVERTISED WINDOW为0的情况下，发送大小为1的数据报文以获得实时的窗口返回值。  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">send_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((sock-&gt;window.wnd_send-&gt;nextseq &gt; sock-&gt;window.wnd_send-&gt;base)&amp;&amp;sock-&gt;window.wnd_send-&gt;rwnd == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        len = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        ``````        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h2><h3 id=\"慢启动\"><a href=\"#慢启动\" class=\"headerlink\" title=\"慢启动\"></a>慢启动</h3><p><strong>1. 套接字的初始化使得发送方从其他状态进入慢启动状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">tju_tcp_t</span>* <span class=\"title function_\">tju_socket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;congestion_status = SLOW_START;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. <code>resend_pkt( )</code>函数超时事件使得发送方从其他状态进入慢启动状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nowtimeval &gt; timeoutval)&#123;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;congestion_status = SLOW_START;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在慢启动状态下，发送方每当接收到正确的 ACK 报文，就会将其拥塞窗口增大 1 个 MSS（MAX_DLEN）。虽然是不断的自增 MSS，但是由于拥塞窗口的增大（进而导致发送窗口的增大），每次自增的次数为 1-&gt;2-&gt;4-&gt;8 直至达到ssthresh，所以拥塞窗口整体上呈现指数增长的趋势。<br><strong>3. clientrdt( )</strong><br><code>clientrdt( )</code> 函数中发送方每当接收到正确的 ACK 报文，就会将其拥塞窗口增大 1 个 MSS。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123;   </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;congestion_status == SLOW_START)&#123; <span class=\"comment\">//慢启动</span></span><br><span class=\"line\">        ``````    </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">// new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd += MSS;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">            ``````</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. resend_pkt( )</strong><br><code>resend_pkt( )</code> 函数中处理超时重传导致慢启动参数变化。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">resend_pkt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span>* sock)</span>&#123;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowtimeval &gt; timeoutval)&#123;</span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;ssthresh = sock-&gt;window.wnd_send-&gt;cwnd / <span class=\"number\">2</span>; <span class=\"comment\">//拥塞阈值变成拥塞窗口大小的一半</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;ssthresh &lt; MAX_DLEN) sock-&gt;window.wnd_send-&gt;ssthresh = MSS; <span class=\"comment\">//调整</span></span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;cwnd = MSS; <span class=\"comment\">//拥塞窗口变成1MSS</span></span><br><span class=\"line\">        sock-&gt;window.wnd_send-&gt;congestion_status = SLOW_START; <span class=\"comment\">//拥塞状态不变</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拥塞避免\"><a href=\"#拥塞避免\" class=\"headerlink\" title=\"拥塞避免\"></a>拥塞避免</h3><p><strong>1. 拥塞窗口超过 ssthresh 进入拥塞避免状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123; </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;congestion_status == SLOW_START)&#123; <span class=\"comment\">//慢启动</span></span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;cwnd &gt;= sock-&gt;window.wnd_send-&gt;ssthresh)&#123; <span class=\"comment\">//cwnd达到ssthresh，转为拥塞避免状态</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = CONGESTION_AVOIDANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ``````</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 快速恢复阶段收到正确的 ACK 使得发送方从其他状态进入拥塞避免状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123; </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;congestion_status == FAST_RECOVERY)&#123; <span class=\"comment\">//快速恢复</span></span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd = sock-&gt;window.wnd_send-&gt;ssthresh;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">          </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = CONGESTION_AVOIDANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 在拥塞避免状态下，发送方每当收到一个正确的 ACK 报文，拥塞窗口就会增大（1&#x2F;cwnd）个 MSS。拥塞窗口整体上呈现线性增长的趋势。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123;   </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;congestion_status == CONGESTION_AVOIDANCE) &#123; <span class=\"comment\">//拥塞避免</span></span><br><span class=\"line\">        ``````</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd += MSS * ((<span class=\"type\">double</span>)MSS / (<span class=\"type\">double</span>)sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\">            </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速恢复\"><a href=\"#快速恢复\" class=\"headerlink\" title=\"快速恢复\"></a>快速恢复</h3><p><strong>1. <code>clientrdt( )</code> 发送方收到 3 个冗余 ACK 时，进入快速恢复状态。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(sock-&gt;window.wnd_send-&gt;ack_cnt == <span class=\"number\">3</span>)&#123;  <span class=\"comment\">//快速重传</span></span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;ssthresh = sock-&gt;window.wnd_send-&gt;cwnd / <span class=\"number\">2</span>;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;cwnd = sock-&gt;window.wnd_send-&gt;ssthresh + <span class=\"number\">3</span> * MSS;</span><br><span class=\"line\">    sock-&gt;window.wnd_send-&gt;congestion_status = FAST_RECOVERY; <span class=\"comment\">//快速恢复</span></span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 在快速恢复状态下，如果还是收到冗余 ACK，那么依然在此状态，cwnd+&#x3D;MSS；当收到正确 ACK 时，则进入拥塞避免状态 ，cwnd&#x3D;ssthresh；当超时时，回到慢启动，cwnd&#x3D;1MSS。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clientrdt</span><span class=\"params\">(<span class=\"type\">tju_tcp_t</span> *sock, <span class=\"type\">char</span> *pkt)</span>&#123; </span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````    </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sock-&gt;window.wnd_send-&gt;congestion_status == FAST_RECOVERY)&#123; <span class=\"comment\">//快速恢复</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(get_ack(pkt) == sock-&gt;window.wnd_send-&gt;base)&#123;<span class=\"comment\">//dup ack</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt++;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd += MSS;</span><br><span class=\"line\">                        </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = FAST_RECOVERY;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(get_ack(pkt) &gt; sock-&gt;window.wnd_send-&gt;base)&#123; <span class=\"comment\">//new ack</span></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;cwnd = sock-&gt;window.wnd_send-&gt;ssthresh;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(pthread_mutex_lock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock)) != <span class=\"number\">0</span>);</span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;ack_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            pthread_mutex_unlock(&amp;(sock-&gt;window.wnd_send-&gt;ack_cnt_lock));  </span><br><span class=\"line\">         </span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;window_size = min(get_advertised_window(pkt), sock-&gt;window.wnd_send-&gt;cwnd);</span><br><span class=\"line\"></span><br><span class=\"line\">            sock-&gt;window.wnd_send-&gt;congestion_status = CONGESTION_AVOIDANCE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">    ``````</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["计算机网络"]},{"title":"Hello World","url":"/2024/09/05/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}]